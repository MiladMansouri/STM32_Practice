
001_STM32F401_GPIO_OUT_PUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000448  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005e8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005e8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001236  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004bf  00000000  00000000  0002126a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00021730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000217f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de7d  00000000  00000000  00021878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fc2  00000000  00000000  0002f6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005002c  00000000  00000000  000306b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000806e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d0  00000000  00000000  00080734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005c4 	.word	0x080005c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080005c4 	.word	0x080005c4

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <gpio_port_init>:
#include "GPIO.h"

uint8_t gpio_port_init(GPIO_TypeDef *GPIO, Ts_GPIO_Handel *handel)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]

	for (uint32_t index = 0; index < 16u; index++)
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	e092      	b.n	800032e <gpio_port_init+0x136>
	{
		if (handel->pin & (1 << index))
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	2101      	movs	r1, #1
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	4013      	ands	r3, r2
 8000216:	2b00      	cmp	r3, #0
 8000218:	f000 8086 	beq.w	8000328 <gpio_port_init+0x130>
		{
			REG_SET_VAL(GPIO->MODER, handel->mode, GPIO_MODE_MASK, index * 2);
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	2103      	movs	r1, #3
 8000226:	fa01 f303 	lsl.w	r3, r1, r3
 800022a:	43db      	mvns	r3, r3
 800022c:	401a      	ands	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	6819      	ldr	r1, [r3, #0]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	fa01 f303 	lsl.w	r3, r1, r3
 8000242:	431a      	orrs	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	601a      	str	r2, [r3, #0]
			REG_SET_VAL(GPIO->OSPEEDR, handel->speed, GPIO_SPEED_MASK,
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	689a      	ldr	r2, [r3, #8]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	2103      	movs	r1, #3
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43db      	mvns	r3, r3
 8000258:	401a      	ands	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	6899      	ldr	r1, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	609a      	str	r2, [r3, #8]
					index * 2);
			REG_SET_VAL(GPIO->OTYPER, handel->output_mode, GPIO_OUTPUT_MASK,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	2101      	movs	r1, #1
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	43db      	mvns	r3, r3
 8000282:	401a      	ands	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	6859      	ldr	r1, [r3, #4]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
					index);
			REG_SET_VAL(GPIO->PUPDR, handel->pupdr, GPIO_PUPDR_PULL_Mask,
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	2103      	movs	r1, #3
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	43db      	mvns	r3, r3
 80002ac:	401a      	ands	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	68da      	ldr	r2, [r3, #12]
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	68d9      	ldr	r1, [r3, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	431a      	orrs	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	60da      	str	r2, [r3, #12]
					index * 2);
			if (index > 7)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2b07      	cmp	r3, #7
 80002cc:	d916      	bls.n	80002fc <gpio_port_init+0x104>
				REG_SET_VAL(GPIO->AFR[1], handel->af, GPIO_PUPDR_PULL_Mask,
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	43db      	mvns	r3, r3
 80002de:	401a      	ands	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	6919      	ldr	r1, [r3, #16]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	625a      	str	r2, [r3, #36]	; 0x24
 80002fa:	e015      	b.n	8000328 <gpio_port_init+0x130>
						index * 4);
			else
				REG_SET_VAL(GPIO->AFR[0], handel->af, GPIO_AF_MASK, index * 4);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6a1a      	ldr	r2, [r3, #32]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	210f      	movs	r1, #15
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	43db      	mvns	r3, r3
 800030c:	401a      	ands	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	621a      	str	r2, [r3, #32]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	6919      	ldr	r1, [r3, #16]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	431a      	orrs	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	621a      	str	r2, [r3, #32]
	for (uint32_t index = 0; index < 16u; index++)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b0f      	cmp	r3, #15
 8000332:	f67f af69 	bls.w	8000208 <gpio_port_init+0x10>
		}
	}
	return 1;
 8000336:	2301      	movs	r3, #1
}
 8000338:	4618      	mov	r0, r3
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <gpio_write_pin>:

void gpio_write_pin(GPIO_TypeDef *GPIO, uint32_t pin, Te_Pin_State state)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	4613      	mov	r3, r2
 8000350:	71fb      	strb	r3, [r7, #7]
	if (state == PIN_RESET)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d107      	bne.n	8000368 <gpio_write_pin+0x24>
	{
		GPIO->BSRR |= (pin << 16);
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	699a      	ldr	r2, [r3, #24]
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	041b      	lsls	r3, r3, #16
 8000360:	431a      	orrs	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIO->BSRR |= (pin);
	}
}
 8000366:	e005      	b.n	8000374 <gpio_write_pin+0x30>
		GPIO->BSRR |= (pin);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	699a      	ldr	r2, [r3, #24]
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	431a      	orrs	r2, r3
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	619a      	str	r2, [r3, #24]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <gpio_read_pin>:

Te_Pin_State gpio_read_pin(GPIO_TypeDef *GPIO, uint32_t pin)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	if (GPIO->IDR & pin)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691a      	ldr	r2, [r3, #16]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <gpio_read_pin+0x1a>
	{
		return PIN_SET;
 8000396:	2301      	movs	r3, #1
 8000398:	e000      	b.n	800039c <gpio_read_pin+0x1c>

	}
	else
	{
		return PIN_RESET;
 800039a:	2300      	movs	r3, #0
	}
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	6039      	str	r1, [r7, #0]
 80003b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	db0a      	blt.n	80003d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	490c      	ldr	r1, [pc, #48]	; (80003f4 <__NVIC_SetPriority+0x4c>)
 80003c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c6:	0112      	lsls	r2, r2, #4
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	440b      	add	r3, r1
 80003cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d0:	e00a      	b.n	80003e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4908      	ldr	r1, [pc, #32]	; (80003f8 <__NVIC_SetPriority+0x50>)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f003 030f 	and.w	r3, r3, #15
 80003de:	3b04      	subs	r3, #4
 80003e0:	0112      	lsls	r2, r2, #4
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	440b      	add	r3, r1
 80003e6:	761a      	strb	r2, [r3, #24]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	e000e100 	.word	0xe000e100
 80003f8:	e000ed00 	.word	0xe000ed00

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295
 8000420:	f7ff ffc2 	bl	80003a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	.word	0xe000e010

08000440 <SysTick_Handler>:
#include "main.h"
#include "GPIO.h"

static volatile uint32_t tick;
void SysTick_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	tick++;
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <SysTick_Handler+0x18>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a03      	ldr	r2, [pc, #12]	; (8000458 <SysTick_Handler+0x18>)
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	20000020 	.word	0x20000020

0800045c <main>:
	while (tick < delay)
		;
}

int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
	/* Loop forever */
	SysTick_Config(SystemCoreClock / 1000U);
 8000462:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <main+0xb8>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <main+0xbc>)
 8000468:	fba2 2303 	umull	r2, r3, r2, r3
 800046c:	099b      	lsrs	r3, r3, #6
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffc4 	bl	80003fc <SysTick_Config>
	 * - SET SPEED LOW
	 * - SET NO PULL UP PULL DOWN RESISTOR
	 * - USING ODR TO SET AND RESET PIN OR USING BSRR
	 * */

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <main+0xc0>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a28      	ldr	r2, [pc, #160]	; (800051c <main+0xc0>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <main+0xc0>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a25      	ldr	r2, [pc, #148]	; (800051c <main+0xc0>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6313      	str	r3, [r2, #48]	; 0x30

	Ts_GPIO_Handel handel =
 800048c:	463b      	mov	r3, r7
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
 800049a:	615a      	str	r2, [r3, #20]
	{ 0 };
	handel.mode = GPIO_MODE_OUTPUT;
 800049c:	2301      	movs	r3, #1
 800049e:	603b      	str	r3, [r7, #0]
	handel.output_mode = GPIO_OUTPUT_PP;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
	handel.speed = GPIO_SPEED_HIGH;
 80004a4:	2302      	movs	r3, #2
 80004a6:	60bb      	str	r3, [r7, #8]
	handel.pupdr = GPIO_PUPDR_NO_PU_PD;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
	handel.pin = GPIO_PIN_13;
 80004ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b0:	617b      	str	r3, [r7, #20]
	gpio_port_init(GPIOC, &handel);
 80004b2:	463b      	mov	r3, r7
 80004b4:	4619      	mov	r1, r3
 80004b6:	481a      	ldr	r0, [pc, #104]	; (8000520 <main+0xc4>)
 80004b8:	f7ff fe9e 	bl	80001f8 <gpio_port_init>

	handel.mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	603b      	str	r3, [r7, #0]
	handel.output_mode = GPIO_OUTPUT_PP;
 80004c0:	2300      	movs	r3, #0
 80004c2:	607b      	str	r3, [r7, #4]
	handel.speed = GPIO_SPEED_HIGH;
 80004c4:	2302      	movs	r3, #2
 80004c6:	60bb      	str	r3, [r7, #8]
	handel.pupdr = GPIO_PUPDR_PULL_UP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
	handel.pin = GPIO_PIN_15;
 80004cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d0:	617b      	str	r3, [r7, #20]
	gpio_port_init(GPIOA, &handel);
 80004d2:	463b      	mov	r3, r7
 80004d4:	4619      	mov	r1, r3
 80004d6:	4813      	ldr	r0, [pc, #76]	; (8000524 <main+0xc8>)
 80004d8:	f7ff fe8e 	bl	80001f8 <gpio_port_init>
	gpio_write_pin(GPIOC, GPIO_PIN_13, PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e2:	480f      	ldr	r0, [pc, #60]	; (8000520 <main+0xc4>)
 80004e4:	f7ff ff2e 	bl	8000344 <gpio_write_pin>
	while (1)
	{
		if (!gpio_read_pin(GPIOA, GPIO_PIN_15))
 80004e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <main+0xc8>)
 80004ee:	f7ff ff47 	bl	8000380 <gpio_read_pin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d106      	bne.n	8000506 <main+0xaa>
		{
			gpio_write_pin(GPIOC, GPIO_PIN_13, PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0xc4>)
 8000500:	f7ff ff20 	bl	8000344 <gpio_write_pin>
 8000504:	e7f0      	b.n	80004e8 <main+0x8c>
		}
		else
		{
			gpio_write_pin(GPIOC, GPIO_PIN_13, PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0xc4>)
 800050e:	f7ff ff19 	bl	8000344 <gpio_write_pin>
		if (!gpio_read_pin(GPIOA, GPIO_PIN_15))
 8000512:	e7e9      	b.n	80004e8 <main+0x8c>
 8000514:	20000000 	.word	0x20000000
 8000518:	10624dd3 	.word	0x10624dd3
 800051c:	40023800 	.word	0x40023800
 8000520:	40020800 	.word	0x40020800
 8000524:	40020000 	.word	0x40020000

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800052c:	f7ff fe52 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 f811 	bl	800057c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff ff7f 	bl	800045c <main>

0800055e <LoopForever>:

LoopForever:
  b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800056c:	080005e4 	.word	0x080005e4
  ldr r2, =_sbss
 8000570:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000574:	20000024 	.word	0x20000024

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <__libc_init_array>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	4d0d      	ldr	r5, [pc, #52]	; (80005b4 <__libc_init_array+0x38>)
 8000580:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <__libc_init_array+0x3c>)
 8000582:	1b64      	subs	r4, r4, r5
 8000584:	10a4      	asrs	r4, r4, #2
 8000586:	2600      	movs	r6, #0
 8000588:	42a6      	cmp	r6, r4
 800058a:	d109      	bne.n	80005a0 <__libc_init_array+0x24>
 800058c:	4d0b      	ldr	r5, [pc, #44]	; (80005bc <__libc_init_array+0x40>)
 800058e:	4c0c      	ldr	r4, [pc, #48]	; (80005c0 <__libc_init_array+0x44>)
 8000590:	f000 f818 	bl	80005c4 <_init>
 8000594:	1b64      	subs	r4, r4, r5
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	2600      	movs	r6, #0
 800059a:	42a6      	cmp	r6, r4
 800059c:	d105      	bne.n	80005aa <__libc_init_array+0x2e>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a4:	4798      	blx	r3
 80005a6:	3601      	adds	r6, #1
 80005a8:	e7ee      	b.n	8000588 <__libc_init_array+0xc>
 80005aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ae:	4798      	blx	r3
 80005b0:	3601      	adds	r6, #1
 80005b2:	e7f2      	b.n	800059a <__libc_init_array+0x1e>
 80005b4:	080005dc 	.word	0x080005dc
 80005b8:	080005dc 	.word	0x080005dc
 80005bc:	080005dc 	.word	0x080005dc
 80005c0:	080005e0 	.word	0x080005e0

080005c4 <_init>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr

080005d0 <_fini>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr
