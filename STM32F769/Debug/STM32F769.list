
STM32F769.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00096228  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0809a70c  0809a70c  000b0444  2**0
                  CONTENTS
  4 .ARM          00000008  0809a70c  0809a70c  000aa70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809a714  0809a714  000b0444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0809a714  0809a714  000aa714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0809a71c  0809a71c  000aa71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  0809a720  000b0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000444  0809ab64  000b0444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0809ab64  000b0580  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000b0444  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d54a  00000000  00000000  000b0472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bb  00000000  00000000  000bd9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  000bfc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  000c06d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e167  00000000  00000000  000c1000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec16  00000000  00000000  000ef167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001123d0  00000000  00000000  000fdd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021014d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  002101a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000444 	.word	0x20000444
 8000214:	00000000 	.word	0x00000000
 8000218:	080044cc 	.word	0x080044cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000448 	.word	0x20000448
 8000234:	080044cc 	.word	0x080044cc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <OTM8009A_Init>:
 * @param  hdsi_eval : pointer on DSI configuration structure
 * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
 * @retval Status
 */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	/* Enable CMD2 to access vendor specific commands                               */
	/* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 8000546:	49c1      	ldr	r1, [pc, #772]	; (800084c <OTM8009A_Init+0x310>)
 8000548:	2000      	movs	r0, #0
 800054a:	f000 fe75 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(3, (uint8_t*) lcdRegData1);
 800054e:	49c0      	ldr	r1, [pc, #768]	; (8000850 <OTM8009A_Init+0x314>)
 8000550:	2003      	movs	r0, #3
 8000552:	f000 fe71 	bl	8001238 <DSI_IO_WriteCmd>

	/* Enter ORISE Command 2 */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData2); /* Shift address to 0x80 */
 8000556:	49bf      	ldr	r1, [pc, #764]	; (8000854 <OTM8009A_Init+0x318>)
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fe6d 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(2, (uint8_t*) lcdRegData2);
 800055e:	49be      	ldr	r1, [pc, #760]	; (8000858 <OTM8009A_Init+0x31c>)
 8000560:	2002      	movs	r0, #2
 8000562:	f000 fe69 	bl	8001238 <DSI_IO_WriteCmd>

	/////////////////////////////////////////////////////////////////////
	/* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
	/* Set SD_PT                                                       */
	/* -> Source output level during porch and non-display area to GND */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData2);
 8000566:	49bb      	ldr	r1, [pc, #748]	; (8000854 <OTM8009A_Init+0x318>)
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fe65 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData3);
 800056e:	49bb      	ldr	r1, [pc, #748]	; (800085c <OTM8009A_Init+0x320>)
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fe61 	bl	8001238 <DSI_IO_WriteCmd>
	OTM8009A_IO_Delay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f000 fa38 	bl	80009ec <OTM8009A_IO_Delay>
	/* Not documented */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData4);
 800057c:	49b8      	ldr	r1, [pc, #736]	; (8000860 <OTM8009A_Init+0x324>)
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fe5a 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData5);
 8000584:	49b7      	ldr	r1, [pc, #732]	; (8000864 <OTM8009A_Init+0x328>)
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fe56 	bl	8001238 <DSI_IO_WriteCmd>
	OTM8009A_IO_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f000 fa2d 	bl	80009ec <OTM8009A_IO_Delay>
	/////////////////////////////////////////////////////////////////////

	/* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
	/* Set gvdd_en_test                                     */
	/* -> enable GVDD test mode !!!                         */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData6);
 8000592:	49b5      	ldr	r1, [pc, #724]	; (8000868 <OTM8009A_Init+0x32c>)
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fe4f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData7);
 800059a:	49b4      	ldr	r1, [pc, #720]	; (800086c <OTM8009A_Init+0x330>)
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fe4b 	bl	8001238 <DSI_IO_WriteCmd>
	/* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
	/* Set pump 4 vgh voltage                                    */
	/* -> from 15.0v down to 13.0v                               */
	/* Set pump 5 vgh voltage                                    */
	/* -> from -12.0v downto -9.0v                               */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData8);
 80005a2:	49b3      	ldr	r1, [pc, #716]	; (8000870 <OTM8009A_Init+0x334>)
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fe47 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData9);
 80005aa:	49b2      	ldr	r1, [pc, #712]	; (8000874 <OTM8009A_Init+0x338>)
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fe43 	bl	8001238 <DSI_IO_WriteCmd>

	/* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
	/* -> Column inversion                                */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData10);
 80005b2:	49b1      	ldr	r1, [pc, #708]	; (8000878 <OTM8009A_Init+0x33c>)
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fe3f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData11);
 80005ba:	49b0      	ldr	r1, [pc, #704]	; (800087c <OTM8009A_Init+0x340>)
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fe3b 	bl	8001238 <DSI_IO_WriteCmd>

	/* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
	/* VCOM Voltage settings                            */
	/* -> from -1.0000v downto -1.2625v                 */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 80005c2:	49a2      	ldr	r1, [pc, #648]	; (800084c <OTM8009A_Init+0x310>)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fe37 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData12);
 80005ca:	49ad      	ldr	r1, [pc, #692]	; (8000880 <OTM8009A_Init+0x344>)
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fe33 	bl	8001238 <DSI_IO_WriteCmd>

	/* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData13);
 80005d2:	49ac      	ldr	r1, [pc, #688]	; (8000884 <OTM8009A_Init+0x348>)
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fe2f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData14);
 80005da:	49ab      	ldr	r1, [pc, #684]	; (8000888 <OTM8009A_Init+0x34c>)
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fe2b 	bl	8001238 <DSI_IO_WriteCmd>

	/* Video mode internal */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData15);
 80005e2:	49aa      	ldr	r1, [pc, #680]	; (800088c <OTM8009A_Init+0x350>)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fe27 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData16);
 80005ea:	49a9      	ldr	r1, [pc, #676]	; (8000890 <OTM8009A_Init+0x354>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fe23 	bl	8001238 <DSI_IO_WriteCmd>

	/* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
	/* Set pump 4&5 x6                                     */
	/* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData17);
 80005f2:	49a8      	ldr	r1, [pc, #672]	; (8000894 <OTM8009A_Init+0x358>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fe1f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData18);
 80005fa:	49a7      	ldr	r1, [pc, #668]	; (8000898 <OTM8009A_Init+0x35c>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fe1b 	bl	8001238 <DSI_IO_WriteCmd>

	/* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
	/* Change pump4 clock ratio                              */
	/* -> from 1 line to 1/2 line                            */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData19);
 8000602:	49a6      	ldr	r1, [pc, #664]	; (800089c <OTM8009A_Init+0x360>)
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fe17 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData9);
 800060a:	499a      	ldr	r1, [pc, #616]	; (8000874 <OTM8009A_Init+0x338>)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fe13 	bl	8001238 <DSI_IO_WriteCmd>

	/* GVDD/NGVDD settings */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 8000612:	498e      	ldr	r1, [pc, #568]	; (800084c <OTM8009A_Init+0x310>)
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fe0f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(2, (uint8_t*) lcdRegData5);
 800061a:	49a1      	ldr	r1, [pc, #644]	; (80008a0 <OTM8009A_Init+0x364>)
 800061c:	2002      	movs	r0, #2
 800061e:	f000 fe0b 	bl	8001238 <DSI_IO_WriteCmd>

	/* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
	/* Rewrite the default value !                           */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData20);
 8000622:	49a0      	ldr	r1, [pc, #640]	; (80008a4 <OTM8009A_Init+0x368>)
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fe07 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData21);
 800062a:	499f      	ldr	r1, [pc, #636]	; (80008a8 <OTM8009A_Init+0x36c>)
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fe03 	bl	8001238 <DSI_IO_WriteCmd>

	/* Panel display timing Setting 3 */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData22);
 8000632:	499e      	ldr	r1, [pc, #632]	; (80008ac <OTM8009A_Init+0x370>)
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fdff 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData23);
 800063a:	499d      	ldr	r1, [pc, #628]	; (80008b0 <OTM8009A_Init+0x374>)
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fdfb 	bl	8001238 <DSI_IO_WriteCmd>

	/* Power control 1 */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData24);
 8000642:	499c      	ldr	r1, [pc, #624]	; (80008b4 <OTM8009A_Init+0x378>)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fdf7 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData25);
 800064a:	499b      	ldr	r1, [pc, #620]	; (80008b8 <OTM8009A_Init+0x37c>)
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fdf3 	bl	8001238 <DSI_IO_WriteCmd>

	/* Source driver precharge */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData13);
 8000652:	498c      	ldr	r1, [pc, #560]	; (8000884 <OTM8009A_Init+0x348>)
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fdef 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData26);
 800065a:	4998      	ldr	r1, [pc, #608]	; (80008bc <OTM8009A_Init+0x380>)
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fdeb 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData15);
 8000662:	498a      	ldr	r1, [pc, #552]	; (800088c <OTM8009A_Init+0x350>)
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fde7 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData27);
 800066a:	4995      	ldr	r1, [pc, #596]	; (80008c0 <OTM8009A_Init+0x384>)
 800066c:	2000      	movs	r0, #0
 800066e:	f000 fde3 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData28);
 8000672:	4994      	ldr	r1, [pc, #592]	; (80008c4 <OTM8009A_Init+0x388>)
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fddf 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(2, (uint8_t*) lcdRegData6);
 800067a:	4993      	ldr	r1, [pc, #588]	; (80008c8 <OTM8009A_Init+0x38c>)
 800067c:	2002      	movs	r0, #2
 800067e:	f000 fddb 	bl	8001238 <DSI_IO_WriteCmd>

	/* GOAVST */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData2);
 8000682:	4974      	ldr	r1, [pc, #464]	; (8000854 <OTM8009A_Init+0x318>)
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fdd7 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(6, (uint8_t*) lcdRegData7);
 800068a:	4990      	ldr	r1, [pc, #576]	; (80008cc <OTM8009A_Init+0x390>)
 800068c:	2006      	movs	r0, #6
 800068e:	f000 fdd3 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData29);
 8000692:	498f      	ldr	r1, [pc, #572]	; (80008d0 <OTM8009A_Init+0x394>)
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fdcf 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(14, (uint8_t*) lcdRegData8);
 800069a:	498e      	ldr	r1, [pc, #568]	; (80008d4 <OTM8009A_Init+0x398>)
 800069c:	200e      	movs	r0, #14
 800069e:	f000 fdcb 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData30);
 80006a2:	498d      	ldr	r1, [pc, #564]	; (80008d8 <OTM8009A_Init+0x39c>)
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fdc7 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(14, (uint8_t*) lcdRegData9);
 80006aa:	498c      	ldr	r1, [pc, #560]	; (80008dc <OTM8009A_Init+0x3a0>)
 80006ac:	200e      	movs	r0, #14
 80006ae:	f000 fdc3 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData31);
 80006b2:	498b      	ldr	r1, [pc, #556]	; (80008e0 <OTM8009A_Init+0x3a4>)
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 fdbf 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData10);
 80006ba:	498a      	ldr	r1, [pc, #552]	; (80008e4 <OTM8009A_Init+0x3a8>)
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 fdbb 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData32);
 80006c2:	4989      	ldr	r1, [pc, #548]	; (80008e8 <OTM8009A_Init+0x3ac>)
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fdb7 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData46);
 80006ca:	4988      	ldr	r1, [pc, #544]	; (80008ec <OTM8009A_Init+0x3b0>)
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 fdb3 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData2);
 80006d2:	4960      	ldr	r1, [pc, #384]	; (8000854 <OTM8009A_Init+0x318>)
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fdaf 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData11);
 80006da:	4985      	ldr	r1, [pc, #532]	; (80008f0 <OTM8009A_Init+0x3b4>)
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 fdab 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData33);
 80006e2:	4984      	ldr	r1, [pc, #528]	; (80008f4 <OTM8009A_Init+0x3b8>)
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fda7 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData12);
 80006ea:	4983      	ldr	r1, [pc, #524]	; (80008f8 <OTM8009A_Init+0x3bc>)
 80006ec:	200f      	movs	r0, #15
 80006ee:	f000 fda3 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData29);
 80006f2:	4977      	ldr	r1, [pc, #476]	; (80008d0 <OTM8009A_Init+0x394>)
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fd9f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData13);
 80006fa:	4980      	ldr	r1, [pc, #512]	; (80008fc <OTM8009A_Init+0x3c0>)
 80006fc:	200f      	movs	r0, #15
 80006fe:	f000 fd9b 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData30);
 8000702:	4975      	ldr	r1, [pc, #468]	; (80008d8 <OTM8009A_Init+0x39c>)
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fd97 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData14);
 800070a:	497d      	ldr	r1, [pc, #500]	; (8000900 <OTM8009A_Init+0x3c4>)
 800070c:	200a      	movs	r0, #10
 800070e:	f000 fd93 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData31);
 8000712:	4973      	ldr	r1, [pc, #460]	; (80008e0 <OTM8009A_Init+0x3a4>)
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fd8f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData15);
 800071a:	497a      	ldr	r1, [pc, #488]	; (8000904 <OTM8009A_Init+0x3c8>)
 800071c:	200f      	movs	r0, #15
 800071e:	f000 fd8b 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData32);
 8000722:	4971      	ldr	r1, [pc, #452]	; (80008e8 <OTM8009A_Init+0x3ac>)
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fd87 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData16);
 800072a:	4977      	ldr	r1, [pc, #476]	; (8000908 <OTM8009A_Init+0x3cc>)
 800072c:	200f      	movs	r0, #15
 800072e:	f000 fd83 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData34);
 8000732:	4976      	ldr	r1, [pc, #472]	; (800090c <OTM8009A_Init+0x3d0>)
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fd7f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData17);
 800073a:	4975      	ldr	r1, [pc, #468]	; (8000910 <OTM8009A_Init+0x3d4>)
 800073c:	200a      	movs	r0, #10
 800073e:	f000 fd7b 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData35);
 8000742:	4974      	ldr	r1, [pc, #464]	; (8000914 <OTM8009A_Init+0x3d8>)
 8000744:	2000      	movs	r0, #0
 8000746:	f000 fd77 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData18);
 800074a:	4973      	ldr	r1, [pc, #460]	; (8000918 <OTM8009A_Init+0x3dc>)
 800074c:	200a      	movs	r0, #10
 800074e:	f000 fd73 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData2);
 8000752:	4940      	ldr	r1, [pc, #256]	; (8000854 <OTM8009A_Init+0x318>)
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fd6f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData19);
 800075a:	4970      	ldr	r1, [pc, #448]	; (800091c <OTM8009A_Init+0x3e0>)
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fd6b 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData33);
 8000762:	4964      	ldr	r1, [pc, #400]	; (80008f4 <OTM8009A_Init+0x3b8>)
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fd67 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData20);
 800076a:	496d      	ldr	r1, [pc, #436]	; (8000920 <OTM8009A_Init+0x3e4>)
 800076c:	200f      	movs	r0, #15
 800076e:	f000 fd63 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData29);
 8000772:	4957      	ldr	r1, [pc, #348]	; (80008d0 <OTM8009A_Init+0x394>)
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fd5f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData21);
 800077a:	496a      	ldr	r1, [pc, #424]	; (8000924 <OTM8009A_Init+0x3e8>)
 800077c:	200f      	movs	r0, #15
 800077e:	f000 fd5b 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData30);
 8000782:	4955      	ldr	r1, [pc, #340]	; (80008d8 <OTM8009A_Init+0x39c>)
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fd57 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(10, (uint8_t*) lcdRegData22);
 800078a:	4967      	ldr	r1, [pc, #412]	; (8000928 <OTM8009A_Init+0x3ec>)
 800078c:	200a      	movs	r0, #10
 800078e:	f000 fd53 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData31);
 8000792:	4953      	ldr	r1, [pc, #332]	; (80008e0 <OTM8009A_Init+0x3a4>)
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fd4f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData23);
 800079a:	4964      	ldr	r1, [pc, #400]	; (800092c <OTM8009A_Init+0x3f0>)
 800079c:	200f      	movs	r0, #15
 800079e:	f000 fd4b 	bl	8001238 <DSI_IO_WriteCmd>

	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData32);
 80007a2:	4951      	ldr	r1, [pc, #324]	; (80008e8 <OTM8009A_Init+0x3ac>)
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fd47 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(15, (uint8_t*) lcdRegData24);
 80007aa:	4961      	ldr	r1, [pc, #388]	; (8000930 <OTM8009A_Init+0x3f4>)
 80007ac:	200f      	movs	r0, #15
 80007ae:	f000 fd43 	bl	8001238 <DSI_IO_WriteCmd>

	/////////////////////////////////////////////////////////////////////////////
	/* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
	/* Pump 1 min and max DM                                */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData13);
 80007b2:	4934      	ldr	r1, [pc, #208]	; (8000884 <OTM8009A_Init+0x348>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fd3f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData47);
 80007ba:	495e      	ldr	r1, [pc, #376]	; (8000934 <OTM8009A_Init+0x3f8>)
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 fd3b 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData48);
 80007c2:	495d      	ldr	r1, [pc, #372]	; (8000938 <OTM8009A_Init+0x3fc>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fd37 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData49);
 80007ca:	495c      	ldr	r1, [pc, #368]	; (800093c <OTM8009A_Init+0x400>)
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 fd33 	bl	8001238 <DSI_IO_WriteCmd>
	/////////////////////////////////////////////////////////////////////////////

	/* CABC LEDPWM frequency adjusted to 22,7kHz */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData50);
 80007d2:	495b      	ldr	r1, [pc, #364]	; (8000940 <OTM8009A_Init+0x404>)
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fd2f 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData51);
 80007da:	495a      	ldr	r1, [pc, #360]	; (8000944 <OTM8009A_Init+0x408>)
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 fd2b 	bl	8001238 <DSI_IO_WriteCmd>

	/* Exit CMD2 mode */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 80007e2:	491a      	ldr	r1, [pc, #104]	; (800084c <OTM8009A_Init+0x310>)
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fd27 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(3, (uint8_t*) lcdRegData25);
 80007ea:	4957      	ldr	r1, [pc, #348]	; (8000948 <OTM8009A_Init+0x40c>)
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fd23 	bl	8001238 <DSI_IO_WriteCmd>
	/*************************************************************************** */
	/* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
	/*************************************************************************** */

	/* NOP - goes back to DCS std command ? */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 80007f2:	4916      	ldr	r1, [pc, #88]	; (800084c <OTM8009A_Init+0x310>)
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fd1f 	bl	8001238 <DSI_IO_WriteCmd>

	/* Gamma correction 2.2+ table (HSDT possible) */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 80007fa:	4914      	ldr	r1, [pc, #80]	; (800084c <OTM8009A_Init+0x310>)
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fd1b 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(16, (uint8_t*) lcdRegData3);
 8000802:	4952      	ldr	r1, [pc, #328]	; (800094c <OTM8009A_Init+0x410>)
 8000804:	2010      	movs	r0, #16
 8000806:	f000 fd17 	bl	8001238 <DSI_IO_WriteCmd>

	/* Gamma correction 2.2- table (HSDT possible) */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 800080a:	4910      	ldr	r1, [pc, #64]	; (800084c <OTM8009A_Init+0x310>)
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fd13 	bl	8001238 <DSI_IO_WriteCmd>
	DSI_IO_WriteCmd(16, (uint8_t*) lcdRegData4);
 8000812:	494f      	ldr	r1, [pc, #316]	; (8000950 <OTM8009A_Init+0x414>)
 8000814:	2010      	movs	r0, #16
 8000816:	f000 fd0f 	bl	8001238 <DSI_IO_WriteCmd>

	/* Send Sleep Out command to display : no parameter */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData36);
 800081a:	494e      	ldr	r1, [pc, #312]	; (8000954 <OTM8009A_Init+0x418>)
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fd0b 	bl	8001238 <DSI_IO_WriteCmd>

	/* Wait for sleep out exit */
	OTM8009A_IO_Delay(120);
 8000822:	2078      	movs	r0, #120	; 0x78
 8000824:	f000 f8e2 	bl	80009ec <OTM8009A_IO_Delay>

	switch (ColorCoding)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d008      	beq.n	8000840 <OTM8009A_Init+0x304>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b02      	cmp	r3, #2
 8000832:	f040 8095 	bne.w	8000960 <OTM8009A_Init+0x424>
	{
	case OTM8009A_FORMAT_RBG565:
		/* Set Pixel color format to RGB565 */
		DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData37);
 8000836:	4948      	ldr	r1, [pc, #288]	; (8000958 <OTM8009A_Init+0x41c>)
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fcfd 	bl	8001238 <DSI_IO_WriteCmd>
		break;
 800083e:	e090      	b.n	8000962 <OTM8009A_Init+0x426>
	case OTM8009A_FORMAT_RGB888:
		/* Set Pixel color format to RGB888 */
		DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData38);
 8000840:	4946      	ldr	r1, [pc, #280]	; (800095c <OTM8009A_Init+0x420>)
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fcf8 	bl	8001238 <DSI_IO_WriteCmd>
		break;
 8000848:	e08b      	b.n	8000962 <OTM8009A_Init+0x426>
 800084a:	bf00      	nop
 800084c:	0800462c 	.word	0x0800462c
 8000850:	080044e4 	.word	0x080044e4
 8000854:	08004630 	.word	0x08004630
 8000858:	080044e8 	.word	0x080044e8
 800085c:	08004634 	.word	0x08004634
 8000860:	08004638 	.word	0x08004638
 8000864:	0800463c 	.word	0x0800463c
 8000868:	08004640 	.word	0x08004640
 800086c:	08004644 	.word	0x08004644
 8000870:	08004648 	.word	0x08004648
 8000874:	0800464c 	.word	0x0800464c
 8000878:	08004650 	.word	0x08004650
 800087c:	08004654 	.word	0x08004654
 8000880:	08004658 	.word	0x08004658
 8000884:	0800465c 	.word	0x0800465c
 8000888:	08004660 	.word	0x08004660
 800088c:	08004664 	.word	0x08004664
 8000890:	08004668 	.word	0x08004668
 8000894:	0800466c 	.word	0x0800466c
 8000898:	08004670 	.word	0x08004670
 800089c:	08004674 	.word	0x08004674
 80008a0:	08004514 	.word	0x08004514
 80008a4:	08004678 	.word	0x08004678
 80008a8:	0800467c 	.word	0x0800467c
 80008ac:	08004680 	.word	0x08004680
 80008b0:	08004684 	.word	0x08004684
 80008b4:	08004688 	.word	0x08004688
 80008b8:	0800468c 	.word	0x0800468c
 80008bc:	08004690 	.word	0x08004690
 80008c0:	08004694 	.word	0x08004694
 80008c4:	08004698 	.word	0x08004698
 80008c8:	08004518 	.word	0x08004518
 80008cc:	0800451c 	.word	0x0800451c
 80008d0:	0800469c 	.word	0x0800469c
 80008d4:	08004524 	.word	0x08004524
 80008d8:	080046a0 	.word	0x080046a0
 80008dc:	08004534 	.word	0x08004534
 80008e0:	080046a4 	.word	0x080046a4
 80008e4:	08004544 	.word	0x08004544
 80008e8:	080046a8 	.word	0x080046a8
 80008ec:	080046e0 	.word	0x080046e0
 80008f0:	08004550 	.word	0x08004550
 80008f4:	080046ac 	.word	0x080046ac
 80008f8:	0800455c 	.word	0x0800455c
 80008fc:	0800456c 	.word	0x0800456c
 8000900:	0800457c 	.word	0x0800457c
 8000904:	08004588 	.word	0x08004588
 8000908:	08004598 	.word	0x08004598
 800090c:	080046b0 	.word	0x080046b0
 8000910:	080045a8 	.word	0x080045a8
 8000914:	080046b4 	.word	0x080046b4
 8000918:	080045b4 	.word	0x080045b4
 800091c:	080045c0 	.word	0x080045c0
 8000920:	080045cc 	.word	0x080045cc
 8000924:	080045dc 	.word	0x080045dc
 8000928:	080045ec 	.word	0x080045ec
 800092c:	080045f8 	.word	0x080045f8
 8000930:	08004608 	.word	0x08004608
 8000934:	080046e4 	.word	0x080046e4
 8000938:	080046e8 	.word	0x080046e8
 800093c:	080046ec 	.word	0x080046ec
 8000940:	080046f0 	.word	0x080046f0
 8000944:	080046f4 	.word	0x080046f4
 8000948:	08004618 	.word	0x08004618
 800094c:	080044ec 	.word	0x080044ec
 8000950:	08004500 	.word	0x08004500
 8000954:	080046b8 	.word	0x080046b8
 8000958:	080046bc 	.word	0x080046bc
 800095c:	080046c0 	.word	0x080046c0
	default:
		break;
 8000960:	bf00      	nop
	}

	/* Send command to configure display in landscape orientation mode. By default
	 the orientation mode is portrait  */
	if (orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10b      	bne.n	8000980 <OTM8009A_Init+0x444>
	{
		DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData39);
 8000968:	4916      	ldr	r1, [pc, #88]	; (80009c4 <OTM8009A_Init+0x488>)
 800096a:	2000      	movs	r0, #0
 800096c:	f000 fc64 	bl	8001238 <DSI_IO_WriteCmd>
		DSI_IO_WriteCmd(4, (uint8_t*) lcdRegData27);
 8000970:	4915      	ldr	r1, [pc, #84]	; (80009c8 <OTM8009A_Init+0x48c>)
 8000972:	2004      	movs	r0, #4
 8000974:	f000 fc60 	bl	8001238 <DSI_IO_WriteCmd>
		DSI_IO_WriteCmd(4, (uint8_t*) lcdRegData28);
 8000978:	4914      	ldr	r1, [pc, #80]	; (80009cc <OTM8009A_Init+0x490>)
 800097a:	2004      	movs	r0, #4
 800097c:	f000 fc5c 	bl	8001238 <DSI_IO_WriteCmd>
	}

	/** CABC : Content Adaptive Backlight Control section start >> */
	/* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData40);
 8000980:	4913      	ldr	r1, [pc, #76]	; (80009d0 <OTM8009A_Init+0x494>)
 8000982:	2000      	movs	r0, #0
 8000984:	f000 fc58 	bl	8001238 <DSI_IO_WriteCmd>

	/* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData41);
 8000988:	4912      	ldr	r1, [pc, #72]	; (80009d4 <OTM8009A_Init+0x498>)
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fc54 	bl	8001238 <DSI_IO_WriteCmd>

	/* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData42);
 8000990:	4911      	ldr	r1, [pc, #68]	; (80009d8 <OTM8009A_Init+0x49c>)
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fc50 	bl	8001238 <DSI_IO_WriteCmd>

	/* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData43);
 8000998:	4910      	ldr	r1, [pc, #64]	; (80009dc <OTM8009A_Init+0x4a0>)
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fc4c 	bl	8001238 <DSI_IO_WriteCmd>

	/** CABC : Content Adaptive Backlight Control section end << */

	/* Send Command Display On */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData44);
 80009a0:	490f      	ldr	r1, [pc, #60]	; (80009e0 <OTM8009A_Init+0x4a4>)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fc48 	bl	8001238 <DSI_IO_WriteCmd>

	/* NOP command */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData1);
 80009a8:	490e      	ldr	r1, [pc, #56]	; (80009e4 <OTM8009A_Init+0x4a8>)
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 fc44 	bl	8001238 <DSI_IO_WriteCmd>

	/* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
	/* DSI host from LTDC incoming pixels in video mode */
	DSI_IO_WriteCmd(0, (uint8_t*) ShortRegData45);
 80009b0:	490d      	ldr	r1, [pc, #52]	; (80009e8 <OTM8009A_Init+0x4ac>)
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 fc40 	bl	8001238 <DSI_IO_WriteCmd>

	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	080046c4 	.word	0x080046c4
 80009c8:	0800461c 	.word	0x0800461c
 80009cc:	08004624 	.word	0x08004624
 80009d0:	080046c8 	.word	0x080046c8
 80009d4:	080046cc 	.word	0x080046cc
 80009d8:	080046d0 	.word	0x080046d0
 80009dc:	080046d4 	.word	0x080046d4
 80009e0:	080046d8 	.word	0x080046d8
 80009e4:	0800462c 	.word	0x0800462c
 80009e8:	080046dc 	.word	0x080046dc

080009ec <OTM8009A_IO_Delay>:

void OTM8009A_IO_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 fe0f 	bl	8001618 <HAL_Delay>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0ae      	sub	sp, #184	; 0xb8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a1a:	2224      	movs	r2, #36	; 0x24
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fce4 	bl	80043ec <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	226c      	movs	r2, #108	; 0x6c
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fcd5 	bl	80043ec <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a42:	4b64      	ldr	r3, [pc, #400]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a44:	4a64      	ldr	r2, [pc, #400]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000a46:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a48:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a4e:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a54:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a70:	4619      	mov	r1, r3
 8000a72:	4858      	ldr	r0, [pc, #352]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a74:	f000 ff22 	bl	80018bc <HAL_DSI_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000a7e:	f000 fcdf 	bl	8001440 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ab8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000abc:	4619      	mov	r1, r3
 8000abe:	4845      	ldr	r0, [pc, #276]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000ac0:	f001 fb66 	bl	8002190 <HAL_DSI_ConfigHostTimeouts>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000aca:	f000 fcb9 	bl	8001440 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000ace:	231c      	movs	r3, #28
 8000ad0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 36;
 8000ad2:	2324      	movs	r3, #36	; 0x24
 8000ad4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 18;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 17;
 8000ada:	2311      	movs	r3, #17
 8000adc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000aea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000aee:	4619      	mov	r1, r3
 8000af0:	4838      	ldr	r0, [pc, #224]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000af2:	f001 fae3 	bl	80020bc <HAL_DSI_ConfigPhyTimer>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000afc:	f000 fca0 	bl	8001440 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b00:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b04:	4833      	ldr	r0, [pc, #204]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b06:	f001 fd01 	bl	800250c <HAL_DSI_SetLowPowerRXFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000b10:	f000 fc96 	bl	8001440 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b18:	f000 ffec 	bl	8001af4 <HAL_DSI_ConfigErrorMonitor>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000b22:	f000 fc8d 	bl	8001440 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000b32:	2302      	movs	r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 800;
 8000b36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b3a:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000b44:	2304      	movs	r3, #4
 8000b46:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 11;
 8000b50:	230b      	movs	r3, #11
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 80;
 8000b54:	2350      	movs	r3, #80	; 0x50
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1994;
 8000b58:	f240 73ca 	movw	r3, #1994	; 0x7ca
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 20;
 8000b62:	2314      	movs	r3, #20
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 20;
 8000b66:	2314      	movs	r3, #20
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8000b6a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b74:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000b76:	231c      	movs	r3, #28
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 8;
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bac:	f001 f886 	bl	8001cbc <HAL_DSI_ConfigVideoMode>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_DSIHOST_DSI_Init+0x1b6>
  {
    Error_Handler();
 8000bb6:	f000 fc43 	bl	8001440 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bbe:	f001 f855 	bl	8001c6c <HAL_DSI_SetGenericVCID>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_DSIHOST_DSI_Init+0x1c8>
  {
    Error_Handler();
 8000bc8:	f000 fc3a 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	37b8      	adds	r7, #184	; 0xb8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000460 	.word	0x20000460
 8000bd8:	40016c00 	.word	0x40016c00

08000bdc <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_DSI_MspInit+0x38>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_DSI_MspInit+0x3c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_DSI_MspInit+0x3c>)
 8000bf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_DSI_MspInit+0x3c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40016c00 	.word	0x40016c00
 8000c18:	40023800 	.word	0x40023800

08000c1c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c34:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c36:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <MX_FMC_Init+0x148>)
 8000c38:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c3a:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c48:	2204      	movs	r2, #4
 8000c4a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000c4c:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c52:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c58:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c5a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c5e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c6c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c80:	2307      	movs	r3, #7
 8000c82:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4830      	ldr	r0, [pc, #192]	; (8000d60 <MX_FMC_Init+0x144>)
 8000c9e:	f003 f9df 	bl	8004060 <HAL_SDRAM_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ca8:	f000 fbca 	bl	8001440 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	__IO uint32_t tmpmrd = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]

	/* Step 1: Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cb8:	2210      	movs	r2, #16
 8000cba:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ccc:	4926      	ldr	r1, [pc, #152]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cce:	4824      	ldr	r0, [pc, #144]	; (8000d60 <MX_FMC_Init+0x144>)
 8000cd0:	f003 f9fa 	bl	80040c8 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fc9f 	bl	8001618 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf6:	491c      	ldr	r1, [pc, #112]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <MX_FMC_Init+0x144>)
 8000cfa:	f003 f9e5 	bl	80040c8 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d06:	2210      	movs	r2, #16
 8000d08:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 8;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1a:	4913      	ldr	r1, [pc, #76]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d1c:	4810      	ldr	r0, [pc, #64]	; (8000d60 <MX_FMC_Init+0x144>)
 8000d1e:	f003 f9d3 	bl	80040c8 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8000d22:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000d26:	603b      	str	r3, [r7, #0]
			|\
 SDRAM_MODEREG_OPERATING_MODE_STANDARD
			|\
 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d30:	2210      	movs	r2, #16
 8000d32:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d3e:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d44:	4908      	ldr	r1, [pc, #32]	; (8000d68 <MX_FMC_Init+0x14c>)
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_FMC_Init+0x144>)
 8000d48:	f003 f9be 	bl	80040c8 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000d4c:	f240 6103 	movw	r1, #1539	; 0x603
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_FMC_Init+0x144>)
 8000d52:	f003 f9ee 	bl	8004132 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000048c 	.word	0x2000048c
 8000d64:	a0000140 	.word	0xa0000140
 8000d68:	2000047c 	.word	0x2000047c

08000d6c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d80:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <HAL_FMC_MspInit+0x104>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d16f      	bne.n	8000e68 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000d88:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <HAL_FMC_MspInit+0x104>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_FMC_MspInit+0x108>)
 8000d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <HAL_FMC_MspInit+0x108>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_FMC_MspInit+0x108>)
 8000d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000da6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000daa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db8:	230c      	movs	r3, #12
 8000dba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <HAL_FMC_MspInit+0x10c>)
 8000dc2:	f001 fbd1 	bl	8002568 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000dc6:	f248 1333 	movw	r3, #33075	; 0x8133
 8000dca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd8:	230c      	movs	r3, #12
 8000dda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4826      	ldr	r0, [pc, #152]	; (8000e7c <HAL_FMC_MspInit+0x110>)
 8000de2:	f001 fbc1 	bl	8002568 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000de6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000dea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <HAL_FMC_MspInit+0x114>)
 8000e02:	f001 fbb1 	bl	8002568 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8000e06:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000e0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <HAL_FMC_MspInit+0x118>)
 8000e22:	f001 fba1 	bl	8002568 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <HAL_FMC_MspInit+0x11c>)
 8000e42:	f001 fb91 	bl	8002568 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8000e46:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000e4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <HAL_FMC_MspInit+0x120>)
 8000e62:	f001 fb81 	bl	8002568 <HAL_GPIO_Init>
 8000e66:	e000      	b.n	8000e6a <HAL_FMC_MspInit+0xfe>
    return;
 8000e68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200004c0 	.word	0x200004c0
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40022000 	.word	0x40022000
 8000e88:	40021400 	.word	0x40021400
 8000e8c:	40021c00 	.word	0x40021c00

08000e90 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e98:	f7ff ff68 	bl	8000d6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	; 0x38
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <MX_GPIO_Init+0x138>)
 8000f82:	f001 fc9d 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_GPIO_Init+0x13c>)
 8000f8e:	f001 fc97 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_GPIO_Init+0x138>)
 8000fac:	f001 fadc 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_GPIO_Init+0x13c>)
 8000fca:	f001 facd 	bl	8002568 <HAL_GPIO_Init>

}
 8000fce:	bf00      	nop
 8000fd0:	3738      	adds	r7, #56	; 0x38
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40022400 	.word	0x40022400
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg =
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2234      	movs	r2, #52	; 0x34
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f9fb 	bl	80043ec <memset>
	{ 0 };

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8000ff8:	4a3a      	ldr	r2, [pc, #232]	; (80010e4 <MX_LTDC_Init+0x100>)
 8000ffa:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_LTDC_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 4;
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001016:	2204      	movs	r2, #4
 8001018:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <MX_LTDC_Init+0xfc>)
 800101c:	2201      	movs	r2, #1
 800101e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 39;
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001022:	2227      	movs	r2, #39	; 0x27
 8001024:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 21;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001028:	2215      	movs	r2, #21
 800102a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 839;
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_LTDC_Init+0xfc>)
 800102e:	f240 3247 	movw	r2, #839	; 0x347
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 501;
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001036:	f240 12f5 	movw	r2, #501	; 0x1f5
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 874;
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_LTDC_Init+0xfc>)
 800103e:	f240 326a 	movw	r2, #874	; 0x36a
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 521;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001046:	f240 2209 	movw	r2, #521	; 0x209
 800104a:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MX_LTDC_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_LTDC_Init+0xfc>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001064:	481e      	ldr	r0, [pc, #120]	; (80010e0 <MX_LTDC_Init+0xfc>)
 8001066:	f001 fc45 	bl	80028f4 <HAL_LTDC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001070:	f000 f9e6 	bl	8001440 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 240;
 8001074:	23f0      	movs	r3, #240	; 0xf0
 8001076:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 560;
 8001078:	f44f 730c 	mov.w	r3, #560	; 0x230
 800107c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 120;
 800107e:	2378      	movs	r3, #120	; 0x78
 8001080:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 360;
 8001082:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001086:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800108c:	23ff      	movs	r3, #255	; 0xff
 800108e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 255;
 8001090:	23ff      	movs	r3, #255	; 0xff
 8001092:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001098:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800109a:	2305      	movs	r3, #5
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800109e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 320;
 80010a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 240;
 80010aa:	23f0      	movs	r3, #240	; 0xf0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 255;
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 255;
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 255;
 80010ba:	23ff      	movs	r3, #255	; 0xff
 80010bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_LTDC_Init+0xfc>)
 80010c8:	f001 fce4 	bl	8002a94 <HAL_LTDC_ConfigLayer>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_LTDC_Init+0xf2>
	{
		Error_Handler();
 80010d2:	f000 f9b5 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3738      	adds	r7, #56	; 0x38
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200004c4 	.word	0x200004c4
 80010e4:	40016800 	.word	0x40016800

080010e8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef *ltdcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0a8      	sub	sp, #160	; 0xa0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2290      	movs	r2, #144	; 0x90
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 f977 	bl	80043ec <memset>
	{ 0 };
	if (ltdcHandle->Instance == LTDC)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <HAL_LTDC_MspInit+0x74>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d124      	bne.n	8001152 <HAL_LTDC_MspInit+0x6a>

		/* USER CODE END LTDC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001108:	2308      	movs	r3, #8
 800110a:	613b      	str	r3, [r7, #16]
		PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800110c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001112:	2307      	movs	r3, #7
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
		PeriphClkInitStruct.PLLSAIDivQ = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
		PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001122:	2300      	movs	r3, #0
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fb70 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_LTDC_MspInit+0x52>
		{
			Error_Handler();
 8001136:	f000 f983 	bl	8001440 <Error_Handler>
		}

		/* LTDC clock enable */
		__HAL_RCC_LTDC_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_LTDC_MspInit+0x78>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_LTDC_MspInit+0x78>)
 8001140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_LTDC_MspInit+0x78>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN LTDC_MspInit 1 */

		/* USER CODE END LTDC_MspInit 1 */
	}
}
 8001152:	bf00      	nop
 8001154:	37a0      	adds	r7, #160	; 0xa0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40016800 	.word	0x40016800
 8001160:	40023800 	.word	0x40023800

08001164 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001168:	f3bf 8f4f 	dsb	sy
}
 800116c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800116e:	f3bf 8f6f 	isb	sy
}
 8001172:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <SCB_EnableICache+0x48>)
 8001176:	2200      	movs	r2, #0
 8001178:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800117c:	f3bf 8f4f 	dsb	sy
}
 8001180:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001182:	f3bf 8f6f 	isb	sy
}
 8001186:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <SCB_EnableICache+0x48>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <SCB_EnableICache+0x48>)
 800118e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001192:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001194:	f3bf 8f4f 	dsb	sy
}
 8001198:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800119a:	f3bf 8f6f 	isb	sy
}
 800119e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <SCB_EnableDCache+0x84>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <SCB_EnableDCache+0x84>)
 80011c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ca:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0b5b      	lsrs	r3, r3, #13
 80011d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011d4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011de:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80011e8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011ee:	4911      	ldr	r1, [pc, #68]	; (8001234 <SCB_EnableDCache+0x84>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	60ba      	str	r2, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ef      	bne.n	80011e0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	60fa      	str	r2, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1e5      	bne.n	80011d6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <SCB_EnableDCache+0x84>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <SCB_EnableDCache+0x84>)
 8001216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800121c:	f3bf 8f4f 	dsb	sy
}
 8001220:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001222:	f3bf 8f6f 	isb	sy
}
 8001226:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <DSI_IO_WriteCmd>:
uint8_t wdata[] =
{ 0x1, 0x2, 0x3, 0x4, 0x5 };
uint8_t rdata[10];

void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	if (NbrParams <= 1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d80d      	bhi.n	8001264 <DSI_IO_WriteCmd+0x2c>
	{
		HAL_DSI_ShortWrite(&hdsi, 0,
		DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	781b      	ldrb	r3, [r3, #0]
		HAL_DSI_ShortWrite(&hdsi, 0,
 800124c:	461a      	mov	r2, r3
		DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	781b      	ldrb	r3, [r3, #0]
		HAL_DSI_ShortWrite(&hdsi, 0,
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	2215      	movs	r2, #21
 800125a:	2100      	movs	r1, #0
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <DSI_IO_WriteCmd+0x50>)
 800125e:	f001 f89b 	bl	8002398 <HAL_DSI_ShortWrite>
	else
	{
		HAL_DSI_LongWrite(&hdsi, 0,
		DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
	}
}
 8001262:	e00d      	b.n	8001280 <DSI_IO_WriteCmd+0x48>
		DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
		HAL_DSI_LongWrite(&hdsi, 0,
 800126c:	461a      	mov	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2239      	movs	r2, #57	; 0x39
 8001278:	2100      	movs	r1, #0
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <DSI_IO_WriteCmd+0x50>)
 800127c:	f001 f8ae 	bl	80023dc <HAL_DSI_LongWrite>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000460 	.word	0x20000460

0800128c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8001290:	f7ff ff68 	bl	8001164 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8001294:	f7ff ff8c 	bl	80011b0 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001298:	f000 f961 	bl	800155e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800129c:	f000 f860 	bl	8001360 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012a0:	f7ff fe00 	bl	8000ea4 <MX_GPIO_Init>
	MX_FMC_Init();
 80012a4:	f7ff fcba 	bl	8000c1c <MX_FMC_Init>
	MX_LTDC_Init();
 80012a8:	f7ff fe9c 	bl	8000fe4 <MX_LTDC_Init>
	MX_DSIHOST_DSI_Init();
 80012ac:	f7ff fbaa 	bl	8000a04 <MX_DSIHOST_DSI_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b6:	4822      	ldr	r0, [pc, #136]	; (8001340 <main+0xb4>)
 80012b8:	f001 fb02 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 f9ab 	bl	8001618 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c8:	481d      	ldr	r0, [pc, #116]	; (8001340 <main+0xb4>)
 80012ca:	f001 faf9 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80012ce:	2032      	movs	r0, #50	; 0x32
 80012d0:	f000 f9a2 	bl	8001618 <HAL_Delay>
	memcpy((uint32_t*) SDRAM_ADD, wdata, 5);
 80012d4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <main+0xb8>)
 80012da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012de:	6018      	str	r0, [r3, #0]
 80012e0:	3304      	adds	r3, #4
 80012e2:	7019      	strb	r1, [r3, #0]
	memcpy(rdata, (uint32_t*) SDRAM_ADD, 5);
 80012e4:	2205      	movs	r2, #5
 80012e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80012ea:	4817      	ldr	r0, [pc, #92]	; (8001348 <main+0xbc>)
 80012ec:	f003 f870 	bl	80043d0 <memcpy>
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <main+0xc0>)
 80012f8:	f001 fae2 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_DSI_Start(&hdsi);
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <main+0xc4>)
 80012fe:	f001 f80f 	bl	8002320 <HAL_DSI_Start>
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, 1);
 8001302:	2101      	movs	r1, #1
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff f919 	bl	800053c <OTM8009A_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t) &image_320x240_argb8888,
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <main+0xc8>)
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <main+0xcc>)
 8001312:	f001 fbfd 	bl	8002b10 <HAL_LTDC_SetAddress>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_LTDC_SetAddress(&hltdc, (uint32_t) &image_320x240_argb8888,
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <main+0xc8>)
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <main+0xcc>)
 800131e:	f001 fbf7 	bl	8002b10 <HAL_LTDC_SetAddress>
		LTDC_LAYER_1);
		HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001326:	f000 f977 	bl	8001618 <HAL_Delay>
		HAL_LTDC_SetAddress(&hltdc, (uint32_t) &life_augmented_argb8888,
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <main+0xd0>)
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <main+0xcc>)
 8001332:	f001 fbed 	bl	8002b10 <HAL_LTDC_SetAddress>
		LTDC_LAYER_1);
		HAL_Delay(1000);
 8001336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133a:	f000 f96d 	bl	8001618 <HAL_Delay>
		HAL_LTDC_SetAddress(&hltdc, (uint32_t) &image_320x240_argb8888,
 800133e:	e7ea      	b.n	8001316 <main+0x8a>
 8001340:	40022400 	.word	0x40022400
 8001344:	20000000 	.word	0x20000000
 8001348:	2000056c 	.word	0x2000056c
 800134c:	40022000 	.word	0x40022000
 8001350:	20000460 	.word	0x20000460
 8001354:	0804f6f8 	.word	0x0804f6f8
 8001358:	200004c4 	.word	0x200004c4
 800135c:	080046f8 	.word	0x080046f8

08001360 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2234      	movs	r2, #52	; 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f83c 	bl	80043ec <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <SystemClock_Config+0xd8>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <SystemClock_Config+0xd8>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <SystemClock_Config+0xd8>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <SystemClock_Config+0xdc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <SystemClock_Config+0xdc>)
 80013a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <SystemClock_Config+0xdc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013c8:	2319      	movs	r3, #25
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 432;
 80013cc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80013d0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80013da:	2302      	movs	r3, #2
 80013dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fdb4 	bl	8002f50 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80013ee:	f000 f827 	bl	8001440 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013f2:	f001 fd5d 	bl	8002eb0 <HAL_PWREx_EnableOverDrive>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 80013fc:	f000 f820 	bl	8001440 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2302      	movs	r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001410:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	2107      	movs	r1, #7
 800141e:	4618      	mov	r0, r3
 8001420:	f002 f844 	bl	80034ac <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xce>
	{
		Error_Handler();
 800142a:	f000 f809 	bl	8001440 <Error_Handler>
	}
}
 800142e:	bf00      	nop
 8001430:	3750      	adds	r7, #80	; 0x50
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_MspInit+0x44>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_MspInit+0x44>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x44>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x44>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x44>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 f87a 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <SystemInit>:
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f002 ff25 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff fea5 	bl	800128c <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8001550:	0809a720 	.word	0x0809a720
  ldr r2, =_sbss
 8001554:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8001558:	20000580 	.word	0x20000580

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>

0800155e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001562:	2003      	movs	r0, #3
 8001564:	f000 f92e 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001568:	200f      	movs	r0, #15
 800156a:	f000 f805 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156e:	f7ff ff6d 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f93b 	bl	8001812 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f911 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000010 	.word	0x20000010
 80015d4:	2000000c 	.word	0x2000000c

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000010 	.word	0x20000010
 80015fc:	20000578 	.word	0x20000578

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000578 	.word	0x20000578

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000010 	.word	0x20000010

08001660 <__NVIC_SetPriorityGrouping>:
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_SetPriority>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff47 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff5c 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffb0 	bl	8001780 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	019a      	lsls	r2, r3, #6
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	431a      	orrs	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	431a      	orrs	r2, r3
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	431a      	orrs	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800186a:	f7ff fec9 	bl	8001600 <HAL_GetTick>
 800186e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001870:	e009      	b.n	8001886 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001872:	f7ff fec5 	bl	8001600 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001880:	d901      	bls.n	8001886 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e015      	b.n	80018b2 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ee      	beq.n	8001872 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	019a      	lsls	r2, r3, #6
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	431a      	orrs	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	ea42 0103 	orr.w	r1, r2, r3
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	041a      	lsls	r2, r3, #16
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e109      	b.n	8001ae4 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7c5b      	ldrb	r3, [r3, #17]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff f97e 	bl	8000bdc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018fa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190e:	f7ff fe77 	bl	8001600 <HAL_GetTick>
 8001912:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8001914:	e009      	b.n	800192a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001916:	f7ff fe73 	bl	8001600 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001924:	d901      	bls.n	800192a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0dc      	b.n	8001ae4 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0ed      	beq.n	8001916 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b69      	ldr	r3, [pc, #420]	; (8001aec <HAL_DSI_Init+0x230>)
 8001948:	400b      	ands	r3, r1
 800194a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8001962:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800196a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fe3a 	bl	8001618 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a4:	f7ff fe2c 	bl	8001600 <HAL_GetTick>
 80019a8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80019aa:	e009      	b.n	80019c0 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80019ac:	f7ff fe28 	bl	8001600 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ba:	d901      	bls.n	80019c0 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e091      	b.n	8001ae4 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ed      	beq.n	80019ac <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0206 	orr.w	r2, r2, #6
 80019e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0203 	bic.w	r2, r2, #3
 80019f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0203 	bic.w	r2, r2, #3
 8001a22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a4a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_DSI_Init+0x1b0>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	e000      	b.n	8001a6e <HAL_DSI_Init+0x1b2>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <HAL_DSI_Init+0x234>)
 8001a74:	fb03 f202 	mul.w	r2, r3, r2
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	409a      	lsls	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001aa4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	fffc8603 	.word	0xfffc8603
 8001af0:	003d0900 	.word	0x003d0900

08001af4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7c1b      	ldrb	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_DSI_ConfigErrorMonitor+0x16>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e0aa      	b.n	8001c60 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00a      	beq.n	8001b4a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b44:	430b      	orrs	r3, r1
 8001b46:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d009      	beq.n	8001b68 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8001b64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0202 	orr.w	r2, r2, #2
 8001ba0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 020c 	orr.w	r2, r2, #12
 8001bbe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0210 	orr.w	r2, r2, #16
 8001bdc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d009      	beq.n	8001c1c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8001c54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7c1b      	ldrb	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_DSI_SetGenericVCID+0x16>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e016      	b.n	8001cb0 <HAL_DSI_SetGenericVCID+0x44>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0203 	bic.w	r2, r2, #3
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7c1b      	ldrb	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DSI_ConfigVideoMode+0x16>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e1ee      	b.n	80020b0 <HAL_DSI_ConfigVideoMode+0x3f4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0203 	bic.w	r2, r2, #3
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <HAL_DSI_ConfigVideoMode+0x29c>)
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b84      	ldr	r3, [pc, #528]	; (8001f5c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8001d6e:	400b      	ands	r3, r1
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0203 	bic.w	r2, r2, #3
 8001d92:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68d9      	ldr	r1, [r3, #12]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0207 	bic.w	r2, r2, #7
 8001db4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6959      	ldr	r1, [r3, #20]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020f 	bic.w	r2, r2, #15
 8001de2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020e 	bic.w	r2, r2, #14
 8001e06:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005a      	lsls	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d110      	bne.n	8001e4c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e38:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6919      	ldr	r1, [r3, #16]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8001e58:	400b      	ands	r3, r1
 8001e5a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8001ebe:	400b      	ands	r3, r1
 8001ec0:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8001f02:	400b      	ands	r3, r1
 8001f04:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_DSI_ConfigVideoMode+0x29c>)
 8001f24:	400b      	ands	r3, r1
 8001f26:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f54:	e00a      	b.n	8001f6c <HAL_DSI_ConfigVideoMode+0x2b0>
 8001f56:	bf00      	nop
 8001f58:	ffffc000 	.word	0xffffc000
 8001f5c:	ffffe000 	.word	0xffffe000
 8001f60:	fffff000 	.word	0xfffff000
 8001f64:	ffff8000 	.word	0xffff8000
 8001f68:	fffffc00 	.word	0xfffffc00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001f82:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6999      	ldr	r1, [r3, #24]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7c1b      	ldrb	r3, [r3, #16]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_DSI_ConfigPhyTimer+0x16>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e058      	b.n	8002184 <HAL_DSI_ConfigPhyTimer+0xc8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf38      	it	cc
 80020e4:	4613      	movcc	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80020f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	041a      	lsls	r2, r3, #16
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002126:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002160:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	021a      	lsls	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c1b      	ldrb	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e0b4      	b.n	8002310 <HAL_DSI_ConfigHostTimeouts+0x180>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021ba:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b292      	uxth	r2, r2
 80021dc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80021fe:	400b      	ands	r3, r1
 8002200:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8002220:	400b      	ands	r3, r1
 8002222:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8002244:	400b      	ands	r3, r1
 8002246:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800226e:	400b      	ands	r3, r1
 8002270:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800229a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80022c2:	400b      	ands	r3, r1
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80022ec:	400b      	ands	r3, r1
 80022ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6a1a      	ldr	r2, [r3, #32]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	ffff0000 	.word	0xffff0000

08002320 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7c1b      	ldrb	r3, [r3, #16]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_DSI_Start+0x14>
 8002330:	2302      	movs	r3, #2
 8002332:	e02b      	b.n	800238c <HAL_DSI_Start+0x6c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0208 	orr.w	r2, r2, #8
 8002370:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	7c1b      	ldrb	r3, [r3, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_DSI_ShortWrite+0x1a>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e010      	b.n	80023d4 <HAL_DSI_ShortWrite+0x3c>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff fa4a 	bl	800185c <DSI_ShortWrite>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	741a      	strb	r2, [r3, #16]

  return status;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	7c1b      	ldrb	r3, [r3, #16]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_DSI_LongWrite+0x1e>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e084      	b.n	8002504 <HAL_DSI_LongWrite+0x128>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002400:	f7ff f8fe 	bl	8001600 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002406:	e00c      	b.n	8002422 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002408:	f7ff f8fa 	bl	8001600 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002416:	d904      	bls.n	8002422 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e070      	b.n	8002504 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0eb      	beq.n	8002408 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b03      	cmp	r3, #3
 8002438:	bf28      	it	cs
 800243a:	2303      	movcs	r3, #3
 800243c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	e00f      	b.n	8002464 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	3301      	adds	r3, #1
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	4313      	orrs	r3, r2
 800245c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	3301      	adds	r3, #1
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3eb      	bcc.n	8002444 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002484:	e028      	b.n	80024d8 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2b04      	cmp	r3, #4
 800248a:	bf28      	it	cs
 800248c:	2304      	movcs	r3, #4
 800248e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	e00e      	b.n	80024b8 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	3301      	adds	r3, #1
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3ec      	bcc.n	800249a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80024c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1d3      	bne.n	8002486 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80024e6:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	f7ff f997 	bl	800182a <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7c1b      	ldrb	r3, [r3, #16]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800251e:	2302      	movs	r3, #2
 8002520:	e01b      	b.n	800255a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002538:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	065a      	lsls	r2, r3, #25
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e175      	b.n	8002874 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 8164 	bne.w	800286e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <HAL_GPIO_Init+0x56>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d130      	bne.n	8002620 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d017      	beq.n	800265c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d123      	bne.n	80026b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80be 	beq.w	800286e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_GPIO_Init+0x324>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a65      	ldr	r2, [pc, #404]	; (800288c <HAL_GPIO_Init+0x324>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_GPIO_Init+0x324>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800270a:	4a61      	ldr	r2, [pc, #388]	; (8002890 <HAL_GPIO_Init+0x328>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_GPIO_Init+0x32c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d037      	beq.n	80027a6 <HAL_GPIO_Init+0x23e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_GPIO_Init+0x330>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d031      	beq.n	80027a2 <HAL_GPIO_Init+0x23a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a56      	ldr	r2, [pc, #344]	; (800289c <HAL_GPIO_Init+0x334>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <HAL_GPIO_Init+0x236>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_GPIO_Init+0x338>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d025      	beq.n	800279a <HAL_GPIO_Init+0x232>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a54      	ldr	r2, [pc, #336]	; (80028a4 <HAL_GPIO_Init+0x33c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <HAL_GPIO_Init+0x22e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <HAL_GPIO_Init+0x340>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x22a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_GPIO_Init+0x344>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x226>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_GPIO_Init+0x348>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x222>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_GPIO_Init+0x34c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4f      	ldr	r2, [pc, #316]	; (80028b8 <HAL_GPIO_Init+0x350>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x21a>
 800277e:	2309      	movs	r3, #9
 8002780:	e012      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002782:	230a      	movs	r3, #10
 8002784:	e010      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002786:	2308      	movs	r3, #8
 8002788:	e00e      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800278a:	2307      	movs	r3, #7
 800278c:	e00c      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800278e:	2306      	movs	r3, #6
 8002790:	e00a      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002792:	2305      	movs	r3, #5
 8002794:	e008      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002796:	2304      	movs	r3, #4
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800279a:	2303      	movs	r3, #3
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 80027a6:	2300      	movs	r3, #0
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4093      	lsls	r3, r2
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027b8:	4935      	ldr	r1, [pc, #212]	; (8002890 <HAL_GPIO_Init+0x328>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_GPIO_Init+0x354>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ea:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_GPIO_Init+0x354>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_GPIO_Init+0x354>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002814:	4a29      	ldr	r2, [pc, #164]	; (80028bc <HAL_GPIO_Init+0x354>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_GPIO_Init+0x354>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_GPIO_Init+0x354>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_GPIO_Init+0x354>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_GPIO_Init+0x354>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f ae86 	bls.w	8002588 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40013800 	.word	0x40013800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021800 	.word	0x40021800
 80028b0:	40021c00 	.word	0x40021c00
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40022400 	.word	0x40022400
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0bf      	b.n	8002a86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fbe4 	bl	80010e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002936:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6999      	ldr	r1, [r3, #24]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800294c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_LTDC_Init+0x19c>)
 8002968:	400b      	ands	r3, r1
 800296a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_LTDC_Init+0x19c>)
 8002996:	400b      	ands	r3, r1
 8002998:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68d9      	ldr	r1, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_LTDC_Init+0x19c>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6959      	ldr	r1, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_LTDC_Init+0x19c>)
 80029f2:	400b      	ands	r3, r1
 80029f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6959      	ldr	r1, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0206 	orr.w	r2, r2, #6
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	f000f800 	.word	0xf000f800

08002a94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a94:	b5b0      	push	{r4, r5, r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_LTDC_ConfigLayer+0x1a>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e02c      	b.n	8002b08 <HAL_LTDC_ConfigLayer+0x74>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2134      	movs	r1, #52	; 0x34
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	461d      	mov	r5, r3
 8002ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f847 	bl	8002b7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bdb0      	pop	{r4, r5, r7, pc}

08002b10 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_LTDC_SetAddress+0x1a>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e024      	b.n	8002b74 <HAL_LTDC_SetAddress+0x64>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2234      	movs	r2, #52	; 0x34
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	3338      	adds	r3, #56	; 0x38
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f811 	bl	8002b7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	4413      	add	r3, r2
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	01db      	lsls	r3, r3, #7
 8002ba8:	4413      	add	r3, r2
 8002baa:	3384      	adds	r3, #132	; 0x84
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	01d2      	lsls	r2, r2, #7
 8002bb8:	440a      	add	r2, r1
 8002bba:	3284      	adds	r2, #132	; 0x84
 8002bbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002bc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bd2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002bd4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	01db      	lsls	r3, r3, #7
 8002be0:	440b      	add	r3, r1
 8002be2:	3384      	adds	r3, #132	; 0x84
 8002be4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfa:	4413      	add	r3, r2
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3384      	adds	r3, #132	; 0x84
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4611      	mov	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	01d2      	lsls	r2, r2, #7
 8002c1a:	440a      	add	r2, r1
 8002c1c:	3284      	adds	r2, #132	; 0x84
 8002c1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c32:	4413      	add	r3, r2
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	440b      	add	r3, r1
 8002c42:	3384      	adds	r3, #132	; 0x84
 8002c44:	4619      	mov	r1, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	01db      	lsls	r3, r3, #7
 8002c56:	4413      	add	r3, r2
 8002c58:	3384      	adds	r3, #132	; 0x84
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4611      	mov	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	01d2      	lsls	r2, r2, #7
 8002c66:	440a      	add	r2, r1
 8002c68:	3284      	adds	r2, #132	; 0x84
 8002c6a:	f023 0307 	bic.w	r3, r3, #7
 8002c6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3384      	adds	r3, #132	; 0x84
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	061b      	lsls	r3, r3, #24
 8002ca0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	4413      	add	r3, r2
 8002cae:	3384      	adds	r3, #132	; 0x84
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	01db      	lsls	r3, r3, #7
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3384      	adds	r3, #132	; 0x84
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ccc:	461a      	mov	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3384      	adds	r3, #132	; 0x84
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	01db      	lsls	r3, r3, #7
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3384      	adds	r3, #132	; 0x84
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	4611      	mov	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	01d2      	lsls	r2, r2, #7
 8002d06:	440a      	add	r2, r1
 8002d08:	3284      	adds	r2, #132	; 0x84
 8002d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	01db      	lsls	r3, r3, #7
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3384      	adds	r3, #132	; 0x84
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	01db      	lsls	r3, r3, #7
 8002d30:	4413      	add	r3, r2
 8002d32:	3384      	adds	r3, #132	; 0x84
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	01db      	lsls	r3, r3, #7
 8002d40:	440b      	add	r3, r1
 8002d42:	3384      	adds	r3, #132	; 0x84
 8002d44:	4619      	mov	r1, r3
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <LTDC_SetConfig+0x32c>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	01c9      	lsls	r1, r1, #7
 8002d5e:	4401      	add	r1, r0
 8002d60:	3184      	adds	r1, #132	; 0x84
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	01db      	lsls	r3, r3, #7
 8002d70:	4413      	add	r3, r2
 8002d72:	3384      	adds	r3, #132	; 0x84
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	01db      	lsls	r3, r3, #7
 8002d80:	4413      	add	r3, r2
 8002d82:	3384      	adds	r3, #132	; 0x84
 8002d84:	461a      	mov	r2, r3
 8002d86:	2300      	movs	r3, #0
 8002d88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4413      	add	r3, r2
 8002d96:	3384      	adds	r3, #132	; 0x84
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002da8:	2304      	movs	r3, #4
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	e01b      	b.n	8002de6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002db6:	2303      	movs	r3, #3
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e014      	b.n	8002de6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d00b      	beq.n	8002ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d007      	beq.n	8002ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d003      	beq.n	8002ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002dd8:	2b07      	cmp	r3, #7
 8002dda:	d102      	bne.n	8002de2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e001      	b.n	8002de6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	01db      	lsls	r3, r3, #7
 8002df0:	4413      	add	r3, r2
 8002df2:	3384      	adds	r3, #132	; 0x84
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	01d2      	lsls	r2, r2, #7
 8002e00:	440a      	add	r2, r1
 8002e02:	3284      	adds	r2, #132	; 0x84
 8002e04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002e08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	1acb      	subs	r3, r1, r3
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	6809      	ldr	r1, [r1, #0]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	01c9      	lsls	r1, r1, #7
 8002e32:	4401      	add	r1, r0
 8002e34:	3184      	adds	r1, #132	; 0x84
 8002e36:	4313      	orrs	r3, r2
 8002e38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	01db      	lsls	r3, r3, #7
 8002e44:	4413      	add	r3, r2
 8002e46:	3384      	adds	r3, #132	; 0x84
 8002e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	440b      	add	r3, r1
 8002e56:	3384      	adds	r3, #132	; 0x84
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <LTDC_SetConfig+0x330>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3384      	adds	r3, #132	; 0x84
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	4413      	add	r3, r2
 8002e82:	3384      	adds	r3, #132	; 0x84
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	01d2      	lsls	r2, r2, #7
 8002e90:	440a      	add	r2, r1
 8002e92:	3284      	adds	r2, #132	; 0x84
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	fffff8f8 	.word	0xfffff8f8
 8002eac:	fffff800 	.word	0xfffff800

08002eb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ede:	f7fe fb8f 	bl	8001600 <HAL_GetTick>
 8002ee2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ee4:	e009      	b.n	8002efa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ee6:	f7fe fb8b 	bl	8001600 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef4:	d901      	bls.n	8002efa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e022      	b.n	8002f40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f14:	f7fe fb74 	bl	8001600 <HAL_GetTick>
 8002f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f1a:	e009      	b.n	8002f30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f1c:	f7fe fb70 	bl	8001600 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f2a:	d901      	bls.n	8002f30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e007      	b.n	8002f40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3c:	d1ee      	bne.n	8002f1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e29b      	b.n	800349e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8087 	beq.w	8003082 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	4b96      	ldr	r3, [pc, #600]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d00c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f80:	4b93      	ldr	r3, [pc, #588]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d112      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
 8002f8c:	4b90      	ldr	r3, [pc, #576]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b8d      	ldr	r3, [pc, #564]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d06c      	beq.n	8003080 <HAL_RCC_OscConfig+0x130>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d168      	bne.n	8003080 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e275      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x7a>
 8002fbc:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a83      	ldr	r2, [pc, #524]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0xd8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x9c>
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7e      	ldr	r2, [pc, #504]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7b      	ldr	r2, [pc, #492]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xd8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b73      	ldr	r3, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a72      	ldr	r2, [pc, #456]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xd8>
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6b      	ldr	r2, [pc, #428]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fae6 	bl	8001600 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fae2 	bl	8001600 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e229      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xe8>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fad2 	bl	8001600 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe face 	bl	8001600 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e215      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x110>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d069      	beq.n	8003162 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308e:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309a:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x190>
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x17a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1e9      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	493d      	ldr	r1, [pc, #244]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e040      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fa84 	bl	8001600 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fa80 	bl	8001600 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1c7      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4929      	ldr	r1, [pc, #164]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
 800312e:	e018      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fa60 	bl	8001600 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe fa5c 	bl	8001600 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1a3      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d038      	beq.n	80031e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe fa3d 	bl	8001600 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318a:	f7fe fa39 	bl	8001600 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e180      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 800319e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x23a>
 80031a8:	e01a      	b.n	80031e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x280>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe fa23 	bl	8001600 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe fa1f 	bl	8001600 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d903      	bls.n	80031d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e166      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
 80031d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b92      	ldr	r3, [pc, #584]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ee      	bne.n	80031be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80a4 	beq.w	8003336 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b8c      	ldr	r3, [pc, #560]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b89      	ldr	r3, [pc, #548]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a88      	ldr	r2, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b86      	ldr	r3, [pc, #536]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003216:	4b83      	ldr	r3, [pc, #524]	; (8003424 <HAL_RCC_OscConfig+0x4d4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003222:	4b80      	ldr	r3, [pc, #512]	; (8003424 <HAL_RCC_OscConfig+0x4d4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7f      	ldr	r2, [pc, #508]	; (8003424 <HAL_RCC_OscConfig+0x4d4>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe f9e7 	bl	8001600 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fe f9e3 	bl	8001600 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	; 0x64
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e12a      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <HAL_RCC_OscConfig+0x4d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x31a>
 800325c:	4b70      	ldr	r3, [pc, #448]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a6f      	ldr	r2, [pc, #444]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	e02d      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x33c>
 8003272:	4b6b      	ldr	r3, [pc, #428]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a6a      	ldr	r2, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	; 0x70
 800327e:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	e01c      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x35e>
 8003294:	4b62      	ldr	r3, [pc, #392]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a61      	ldr	r2, [pc, #388]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe f997 	bl	8001600 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe f993 	bl	8001600 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0d8      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b4c      	ldr	r3, [pc, #304]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCC_OscConfig+0x386>
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe f981 	bl	8001600 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe f97d 	bl	8001600 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0c2      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80ae 	beq.w	800349c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003340:	4b37      	ldr	r3, [pc, #220]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d06d      	beq.n	8003428 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d14b      	bne.n	80033ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a31      	ldr	r2, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe f94e 	bl	8001600 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe f94a 	bl	8001600 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e091      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	491b      	ldr	r1, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe f91c 	bl	8001600 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe f918 	bl	8001600 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e05f      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x47c>
 80033ea:	e057      	b.n	800349c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f902 	bl	8001600 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe f8fe 	bl	8001600 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e045      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x4b0>
 800341e:	e03d      	b.n	800349c <HAL_RCC_OscConfig+0x54c>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_RCC_OscConfig+0x558>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d030      	beq.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d129      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d122      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d119      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d10f      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0d0      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	4965      	ldr	r1, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d040      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e073      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06b      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4936      	ldr	r1, [pc, #216]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe f82e 	bl	8001600 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe f82a 	bl	8001600 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e053      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d210      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 020f 	bic.w	r2, r3, #15
 80035e6:	4922      	ldr	r1, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1cc>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1d0>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1d4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd ff8a 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	0809a6f8 	.word	0x0809a6f8
 800367c:	20000008 	.word	0x20000008
 8003680:	2000000c 	.word	0x2000000c

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b090      	sub	sp, #64	; 0x40
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80a1 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e09b      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036bc:	e09b      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c2:	e098      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ce:	4b4d      	ldr	r3, [pc, #308]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d028      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	627a      	str	r2, [r7, #36]	; 0x24
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036ec:	2100      	movs	r1, #0
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036f0:	fb03 f201 	mul.w	r2, r3, r1
 80036f4:	2300      	movs	r3, #0
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	4a43      	ldr	r2, [pc, #268]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036fe:	fba0 1202 	umull	r1, r2, r0, r2
 8003702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003704:	460a      	mov	r2, r1
 8003706:	62ba      	str	r2, [r7, #40]	; 0x28
 8003708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370a:	4413      	add	r3, r2
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2200      	movs	r2, #0
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	61fa      	str	r2, [r7, #28]
 8003716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800371e:	f7fc fd8b 	bl	8000238 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4613      	mov	r3, r2
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800372a:	e053      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	2200      	movs	r2, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	617a      	str	r2, [r7, #20]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	4652      	mov	r2, sl
 8003744:	465b      	mov	r3, fp
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	0159      	lsls	r1, r3, #5
 8003750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003754:	0150      	lsls	r0, r2, #5
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ebb2 080a 	subs.w	r8, r2, sl
 800375e:	eb63 090b 	sbc.w	r9, r3, fp
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800376e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003772:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003776:	ebb2 0408 	subs.w	r4, r2, r8
 800377a:	eb63 0509 	sbc.w	r5, r3, r9
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	00eb      	lsls	r3, r5, #3
 8003788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378c:	00e2      	lsls	r2, r4, #3
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	eb14 030a 	adds.w	r3, r4, sl
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	eb45 030b 	adc.w	r3, r5, fp
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037aa:	4629      	mov	r1, r5
 80037ac:	028b      	lsls	r3, r1, #10
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b4:	4621      	mov	r1, r4
 80037b6:	028a      	lsls	r2, r1, #10
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	2200      	movs	r2, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c8:	f7fc fd36 	bl	8000238 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80037e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3740      	adds	r7, #64	; 0x40
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	017d7840 	.word	0x017d7840

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003838:	4b69      	ldr	r3, [pc, #420]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a68      	ldr	r2, [pc, #416]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003842:	6093      	str	r3, [r2, #8]
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	4964      	ldr	r1, [pc, #400]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d017      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800386a:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	4959      	ldr	r1, [pc, #356]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d017      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	494a      	ldr	r1, [pc, #296]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c4:	d101      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 808b 	beq.w	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd fe72 	bl	8001600 <HAL_GetTick>
 800391c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fd fe6e 	bl	8001600 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e38f      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003932:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d035      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d02e      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d114      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd fe36 	bl	8001600 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fd fe32 	bl	8001600 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e351      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ee      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c6:	d111      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039d6:	400b      	ands	r3, r1
 80039d8:	4901      	ldr	r1, [pc, #4]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
 80039de:	e00b      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	0ffffcff 	.word	0x0ffffcff
 80039ec:	4bac      	ldr	r3, [pc, #688]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4aab      	ldr	r2, [pc, #684]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039f6:	6093      	str	r3, [r2, #8]
 80039f8:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	49a6      	ldr	r1, [pc, #664]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a16:	4ba2      	ldr	r3, [pc, #648]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1c:	4aa0      	ldr	r2, [pc, #640]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a26:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	499b      	ldr	r1, [pc, #620]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a44:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a52:	4993      	ldr	r1, [pc, #588]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a66:	4b8e      	ldr	r3, [pc, #568]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a74:	498a      	ldr	r1, [pc, #552]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a88:	4b85      	ldr	r3, [pc, #532]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a96:	4982      	ldr	r1, [pc, #520]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4979      	ldr	r1, [pc, #484]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003acc:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4971      	ldr	r1, [pc, #452]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f023 020c 	bic.w	r2, r3, #12
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	4968      	ldr	r1, [pc, #416]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b10:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	4960      	ldr	r1, [pc, #384]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b32:	4b5b      	ldr	r3, [pc, #364]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	4957      	ldr	r1, [pc, #348]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b54:	4b52      	ldr	r3, [pc, #328]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	494f      	ldr	r1, [pc, #316]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4946      	ldr	r1, [pc, #280]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	493e      	ldr	r1, [pc, #248]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	4935      	ldr	r1, [pc, #212]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bea:	492d      	ldr	r1, [pc, #180]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bfe:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0c:	4924      	ldr	r1, [pc, #144]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	4914      	ldr	r1, [pc, #80]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c70:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	4902      	ldr	r1, [pc, #8]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cb0:	4b8a      	ldr	r3, [pc, #552]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	4986      	ldr	r1, [pc, #536]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cd4:	4b81      	ldr	r3, [pc, #516]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce4:	497d      	ldr	r1, [pc, #500]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d006      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80d6 	beq.w	8003eac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a75      	ldr	r2, [pc, #468]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fc78 	bl	8001600 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d14:	f7fd fc74 	bl	8001600 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e195      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d26:	4b6d      	ldr	r3, [pc, #436]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d021      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11d      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d46:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d54:	4b61      	ldr	r3, [pc, #388]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5a:	0e1b      	lsrs	r3, r3, #24
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	019a      	lsls	r2, r3, #6
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	4958      	ldr	r1, [pc, #352]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02e      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dac:	d129      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dae:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	0f1b      	lsrs	r3, r3, #28
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	019a      	lsls	r2, r3, #6
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	493e      	ldr	r1, [pc, #248]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dea:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df0:	f023 021f 	bic.w	r2, r3, #31
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	4938      	ldr	r1, [pc, #224]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01d      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e22:	0f1b      	lsrs	r3, r3, #28
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	019a      	lsls	r2, r3, #6
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	4926      	ldr	r1, [pc, #152]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d011      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	019a      	lsls	r2, r3, #6
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	491a      	ldr	r1, [pc, #104]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e86:	f7fd fbbb 	bl	8001600 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e8e:	f7fd fbb7 	bl	8001600 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	; 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0d8      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 80ce 	bne.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fb9e 	bl	8001600 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ec8:	f7fd fb9a 	bl	8001600 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d904      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0bb      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ee0:	4b5e      	ldr	r3, [pc, #376]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eec:	d0ec      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02e      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d12a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	0f1b      	lsrs	r3, r3, #28
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	019a      	lsls	r2, r3, #6
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	4944      	ldr	r1, [pc, #272]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f52:	4b42      	ldr	r3, [pc, #264]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	493d      	ldr	r1, [pc, #244]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f80:	d11d      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	0e1b      	lsrs	r3, r3, #24
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f90:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	0f1b      	lsrs	r3, r3, #28
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	019a      	lsls	r2, r3, #6
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	431a      	orrs	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	071b      	lsls	r3, r3, #28
 8003fb6:	4929      	ldr	r1, [pc, #164]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d028      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	0e1b      	lsrs	r3, r3, #24
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fd8:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	019a      	lsls	r2, r3, #6
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	071b      	lsls	r3, r3, #28
 8003ffe:	4917      	ldr	r1, [pc, #92]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800400c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4911      	ldr	r1, [pc, #68]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd faea 	bl	8001600 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004030:	f7fd fae6 	bl	8001600 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e007      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404e:	d1ef      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e025      	b.n	80040c0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fc ff01 	bl	8000e90 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 f86f 	bl	8004184 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	461a      	mov	r2, r3
 80040b0:	6839      	ldr	r1, [r7, #0]
 80040b2:	f000 f8c3 	bl	800423c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040da:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d101      	bne.n	80040e6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
 80040e4:	e021      	b.n	800412a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d002      	beq.n	80040f2 <HAL_SDRAM_SendCommand+0x2a>
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d118      	bne.n	8004124 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f904 	bl	8004310 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d104      	bne.n	800411a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2205      	movs	r2, #5
 8004114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004118:	e006      	b.n	8004128 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004122:	e001      	b.n	8004128 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d101      	bne.n	800414c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	e016      	b.n	800417a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10f      	bne.n	8004178 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f8f6 	bl	8004358 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d121      	bne.n	80041da <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b27      	ldr	r3, [pc, #156]	; (8004238 <FMC_SDRAM_Init+0xb4>)
 800419c:	4013      	ands	r3, r2
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6851      	ldr	r1, [r2, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	6892      	ldr	r2, [r2, #8]
 80041a6:	4311      	orrs	r1, r2
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	68d2      	ldr	r2, [r2, #12]
 80041ac:	4311      	orrs	r1, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	6912      	ldr	r2, [r2, #16]
 80041b2:	4311      	orrs	r1, r2
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	6952      	ldr	r2, [r2, #20]
 80041b8:	4311      	orrs	r1, r2
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	6992      	ldr	r2, [r2, #24]
 80041be:	4311      	orrs	r1, r2
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	69d2      	ldr	r2, [r2, #28]
 80041c4:	4311      	orrs	r1, r2
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	6a12      	ldr	r2, [r2, #32]
 80041ca:	4311      	orrs	r1, r2
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d0:	430a      	orrs	r2, r1
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e026      	b.n	8004228 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	69d9      	ldr	r1, [r3, #28]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4319      	orrs	r1, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	430b      	orrs	r3, r1
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <FMC_SDRAM_Init+0xb4>)
 80041fe:	4013      	ands	r3, r2
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	6851      	ldr	r1, [r2, #4]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	4311      	orrs	r1, r2
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	4311      	orrs	r1, r2
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	6912      	ldr	r2, [r2, #16]
 8004214:	4311      	orrs	r1, r2
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	6952      	ldr	r2, [r2, #20]
 800421a:	4311      	orrs	r1, r2
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	6992      	ldr	r2, [r2, #24]
 8004220:	430a      	orrs	r2, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	ffff8000 	.word	0xffff8000

0800423c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d128      	bne.n	80042a0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	1e59      	subs	r1, r3, #1
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	3b01      	subs	r3, #1
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	4319      	orrs	r1, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	4319      	orrs	r1, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	3b01      	subs	r3, #1
 8004276:	031b      	lsls	r3, r3, #12
 8004278:	4319      	orrs	r1, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	4319      	orrs	r1, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	3b01      	subs	r3, #1
 800428a:	051b      	lsls	r3, r3, #20
 800428c:	4319      	orrs	r1, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	3b01      	subs	r3, #1
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	430b      	orrs	r3, r1
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	e02d      	b.n	80042fc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <FMC_SDRAM_Timing_Init+0xd0>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	68d2      	ldr	r2, [r2, #12]
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0311      	lsls	r1, r2, #12
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	6952      	ldr	r2, [r2, #20]
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0512      	lsls	r2, r2, #20
 80042b8:	430a      	orrs	r2, r1
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1e59      	subs	r1, r3, #1
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4319      	orrs	r1, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	4319      	orrs	r1, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	4319      	orrs	r1, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	430b      	orrs	r3, r1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	ff0f0fff 	.word	0xff0f0fff

08004310 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <FMC_SDRAM_SendCommand+0x44>)
 8004322:	4013      	ands	r3, r2
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	6811      	ldr	r1, [r2, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	6852      	ldr	r2, [r2, #4]
 800432c:	4311      	orrs	r1, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	3a01      	subs	r2, #1
 8004334:	0152      	lsls	r2, r2, #5
 8004336:	4311      	orrs	r1, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	68d2      	ldr	r2, [r2, #12]
 800433c:	0252      	lsls	r2, r2, #9
 800433e:	430a      	orrs	r2, r1
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	ffc00000 	.word	0xffc00000

08004358 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8004368:	4013      	ands	r3, r2
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	0052      	lsls	r2, r2, #1
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	ffffc001 	.word	0xffffc001

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4d0d      	ldr	r5, [pc, #52]	; (80043c0 <__libc_init_array+0x38>)
 800438c:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	2600      	movs	r6, #0
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	4d0b      	ldr	r5, [pc, #44]	; (80043c8 <__libc_init_array+0x40>)
 800439a:	4c0c      	ldr	r4, [pc, #48]	; (80043cc <__libc_init_array+0x44>)
 800439c:	f000 f896 	bl	80044cc <_init>
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	2600      	movs	r6, #0
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	0809a714 	.word	0x0809a714
 80043c4:	0809a714 	.word	0x0809a714
 80043c8:	0809a714 	.word	0x0809a714
 80043cc:	0809a71c 	.word	0x0809a71c

080043d0 <memcpy>:
 80043d0:	440a      	add	r2, r1
 80043d2:	4291      	cmp	r1, r2
 80043d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043d8:	d100      	bne.n	80043dc <memcpy+0xc>
 80043da:	4770      	bx	lr
 80043dc:	b510      	push	{r4, lr}
 80043de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043e6:	4291      	cmp	r1, r2
 80043e8:	d1f9      	bne.n	80043de <memcpy+0xe>
 80043ea:	bd10      	pop	{r4, pc}

080043ec <memset>:
 80043ec:	4402      	add	r2, r0
 80043ee:	4603      	mov	r3, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>

080043fc <register_fini>:
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <register_fini+0xc>)
 80043fe:	b113      	cbz	r3, 8004406 <register_fini+0xa>
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <register_fini+0x10>)
 8004402:	f000 b805 	b.w	8004410 <atexit>
 8004406:	4770      	bx	lr
 8004408:	00000000 	.word	0x00000000
 800440c:	0800441d 	.word	0x0800441d

08004410 <atexit>:
 8004410:	2300      	movs	r3, #0
 8004412:	4601      	mov	r1, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4618      	mov	r0, r3
 8004418:	f000 b816 	b.w	8004448 <__register_exitproc>

0800441c <__libc_fini_array>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d07      	ldr	r5, [pc, #28]	; (800443c <__libc_fini_array+0x20>)
 8004420:	4c07      	ldr	r4, [pc, #28]	; (8004440 <__libc_fini_array+0x24>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	b91c      	cbnz	r4, 8004430 <__libc_fini_array+0x14>
 8004428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800442c:	f000 b854 	b.w	80044d8 <_fini>
 8004430:	3c01      	subs	r4, #1
 8004432:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004436:	4798      	blx	r3
 8004438:	e7f5      	b.n	8004426 <__libc_fini_array+0xa>
 800443a:	bf00      	nop
 800443c:	0809a71c 	.word	0x0809a71c
 8004440:	0809a720 	.word	0x0809a720

08004444 <__retarget_lock_acquire_recursive>:
 8004444:	4770      	bx	lr

08004446 <__retarget_lock_release_recursive>:
 8004446:	4770      	bx	lr

08004448 <__register_exitproc>:
 8004448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800444c:	f8df a078 	ldr.w	sl, [pc, #120]	; 80044c8 <__register_exitproc+0x80>
 8004450:	4606      	mov	r6, r0
 8004452:	f8da 0000 	ldr.w	r0, [sl]
 8004456:	4698      	mov	r8, r3
 8004458:	460f      	mov	r7, r1
 800445a:	4691      	mov	r9, r2
 800445c:	f7ff fff2 	bl	8004444 <__retarget_lock_acquire_recursive>
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <__register_exitproc+0x7c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8004468:	b91c      	cbnz	r4, 8004472 <__register_exitproc+0x2a>
 800446a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800446e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8004472:	6865      	ldr	r5, [r4, #4]
 8004474:	f8da 0000 	ldr.w	r0, [sl]
 8004478:	2d1f      	cmp	r5, #31
 800447a:	dd05      	ble.n	8004488 <__register_exitproc+0x40>
 800447c:	f7ff ffe3 	bl	8004446 <__retarget_lock_release_recursive>
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004488:	b19e      	cbz	r6, 80044b2 <__register_exitproc+0x6a>
 800448a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800448e:	2201      	movs	r2, #1
 8004490:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8004494:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8004498:	40aa      	lsls	r2, r5
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80044a0:	2e02      	cmp	r6, #2
 80044a2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80044a6:	bf02      	ittt	eq
 80044a8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80044ac:	4313      	orreq	r3, r2
 80044ae:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80044b2:	1c6b      	adds	r3, r5, #1
 80044b4:	3502      	adds	r5, #2
 80044b6:	6063      	str	r3, [r4, #4]
 80044b8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80044bc:	f7ff ffc3 	bl	8004446 <__retarget_lock_release_recursive>
 80044c0:	2000      	movs	r0, #0
 80044c2:	e7df      	b.n	8004484 <__register_exitproc+0x3c>
 80044c4:	0809a708 	.word	0x0809a708
 80044c8:	20000440 	.word	0x20000440

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
