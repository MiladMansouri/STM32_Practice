
STM32F769_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800e8a0  0800e8a0  0001e8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e8  0800e8e8  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8e8  0800e8e8  0001e8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8f0  0800e8f0  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f4  0800e8f4  0001e8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800e8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  0800e908  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  0800e9a8  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009578  20000150  0800ea48  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200096c8  0800ea48  000296c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c9a8  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000085c4  00000000  00000000  0005cb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003000  00000000  00000000  000650f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002c20  00000000  00000000  000680f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e505  00000000  00000000  0006ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045c4f  00000000  00000000  000a9215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00153f8f  00000000  00000000  000eee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00242df3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c81c  00000000  00000000  00242e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e888 	.word	0x0800e888

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	0800e888 	.word	0x0800e888

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_ADC1_Init+0x98>)
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <MX_ADC1_Init+0x9c>)
 800055a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_ADC1_Init+0x98>)
 800055e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000562:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_ADC1_Init+0x98>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_ADC1_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_ADC1_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_ADC1_Init+0x98>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_ADC1_Init+0x98>)
 8000586:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <MX_ADC1_Init+0xa0>)
 8000588:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_ADC1_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_ADC1_Init+0x98>)
 8000592:	2201      	movs	r2, #1
 8000594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_ADC1_Init+0x98>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_ADC1_Init+0x98>)
 80005a6:	f002 fe87 	bl	80032b8 <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005b0:	f001 fa0e 	bl	80019d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005b4:	230c      	movs	r3, #12
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_ADC1_Init+0x98>)
 80005c6:	f002 febb 	bl	8003340 <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005d0:	f001 f9fe 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000016c 	.word	0x2000016c
 80005e0:	40012000 	.word	0x40012000
 80005e4:	0f000001 	.word	0x0f000001

080005e8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC3_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC3_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC3_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC3_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC3_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC3_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC3_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC3_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC3_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC3_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC3_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC3_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC3_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC3_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC3_Init+0x98>)
 800064a:	f002 fe35 	bl	80032b8 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000654:	f001 f9bc 	bl	80019d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000658:	2306      	movs	r3, #6
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC3_Init+0x98>)
 800066a:	f002 fe69 	bl	8003340 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000674:	f001 f9ac 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200001b4 	.word	0x200001b4
 8000684:	40012200 	.word	0x40012200
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a36      	ldr	r2, [pc, #216]	; (8000784 <HAL_ADC_MspInit+0xf8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d13c      	bne.n	8000728 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a35      	ldr	r2, [pc, #212]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2f      	ldr	r2, [pc, #188]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a29      	ldr	r2, [pc, #164]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 80006f6:	2304      	movs	r3, #4
 80006f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <HAL_ADC_MspInit+0x100>)
 800070a:	f004 fe67 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 800070e:	2350      	movs	r3, #80	; 0x50
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	481b      	ldr	r0, [pc, #108]	; (8000790 <HAL_ADC_MspInit+0x104>)
 8000722:	f004 fe5b 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000726:	e029      	b.n	800077c <HAL_ADC_MspInit+0xf0>
  else if(adcHandle->Instance==ADC3)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_ADC_MspInit+0x108>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d124      	bne.n	800077c <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 8000738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_ADC_MspInit+0xfc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000762:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000768:	2303      	movs	r3, #3
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <HAL_ADC_MspInit+0x10c>)
 8000778:	f004 fe30 	bl	80053dc <HAL_GPIO_Init>
}
 800077c:	bf00      	nop
 800077e:	3730      	adds	r7, #48	; 0x30
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40012000 	.word	0x40012000
 8000788:	40023800 	.word	0x40023800
 800078c:	40020800 	.word	0x40020800
 8000790:	40020000 	.word	0x40020000
 8000794:	40012200 	.word	0x40012200
 8000798:	40021400 	.word	0x40021400

0800079c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MX_CRC_Init+0x40>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c6:	f003 fa49 	bl	8003c5c <HAL_CRC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d0:	f001 f8fe 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200001fc 	.word	0x200001fc
 80007dc:	40023000 	.word	0x40023000

080007e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_CRC_MspInit+0x38>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_CRC_MspInit+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023000 	.word	0x40023000
 800081c:	40023800 	.word	0x40023800

08000820 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <MX_DMA2D_Init+0x6c>)
 8000828:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_DMA2D_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_DMA2D_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_DMA2D_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_DMA2D_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000862:	f003 fae5 	bl	8003e30 <HAL_DMA2D_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800086c:	f001 f8b0 	bl	80019d0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000870:	2101      	movs	r1, #1
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_DMA2D_Init+0x68>)
 8000874:	f003 fc46 	bl	8004104 <HAL_DMA2D_ConfigLayer>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800087e:	f001 f8a7 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000220 	.word	0x20000220
 800088c:	4002b000 	.word	0x4002b000

08000890 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <HAL_DMA2D_MspInit+0x44>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d113      	bne.n	80008ca <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_DMA2D_MspInit+0x48>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_DMA2D_MspInit+0x48>)
 80008a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_DMA2D_MspInit+0x48>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	205a      	movs	r0, #90	; 0x5a
 80008c0:	f003 f9a2 	bl	8003c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80008c4:	205a      	movs	r0, #90	; 0x5a
 80008c6:	f003 f9bb 	bl	8003c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	4002b000 	.word	0x4002b000
 80008d8:	40023800 	.word	0x40023800

080008dc <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0aa      	sub	sp, #168	; 0xa8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008f2:	2224      	movs	r2, #36	; 0x24
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00d ffbe 	bl	800e878 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800090e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f00d ffae 	bl	800e878 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	222c      	movs	r2, #44	; 0x2c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f00d ffa8 	bl	800e878 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000928:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800092a:	4a6b      	ldr	r2, [pc, #428]	; (8000ad8 <MX_DSIHOST_DSI_Init+0x1fc>)
 800092c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800092e:	4b69      	ldr	r3, [pc, #420]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000934:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000936:	2204      	movs	r2, #4
 8000938:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800093a:	4b66      	ldr	r3, [pc, #408]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000940:	2314      	movs	r3, #20
 8000942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000946:	2301      	movs	r3, #1
 8000948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000952:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000956:	4619      	mov	r1, r3
 8000958:	485e      	ldr	r0, [pc, #376]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800095a:	f003 fc71 	bl	8004240 <HAL_DSI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000964:	f001 f834 	bl	80019d0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800099a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800099e:	4619      	mov	r1, r3
 80009a0:	484c      	ldr	r0, [pc, #304]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009a2:	f004 f8ff 	bl	8004ba4 <HAL_DSI_ConfigHostTimeouts>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80009ac:	f001 f810 	bl	80019d0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80009b0:	231c      	movs	r3, #28
 80009b2:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009b4:	2321      	movs	r3, #33	; 0x21
 80009b6:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80009b8:	230f      	movs	r3, #15
 80009ba:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80009bc:	2319      	movs	r3, #25
 80009be:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 80009c4:	230a      	movs	r3, #10
 80009c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009cc:	4619      	mov	r1, r3
 80009ce:	4841      	ldr	r0, [pc, #260]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009d0:	f004 f87e 	bl	8004ad0 <HAL_DSI_ConfigPhyTimer>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80009da:	f000 fff9 	bl	80019d0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80009de:	2104      	movs	r1, #4
 80009e0:	483c      	ldr	r0, [pc, #240]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009e2:	f004 f84d 	bl	8004a80 <HAL_DSI_ConfigFlowControl>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80009ec:	f000 fff0 	bl	80019d0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80009f4:	4837      	ldr	r0, [pc, #220]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009f6:	f004 f99d 	bl	8004d34 <HAL_DSI_SetLowPowerRXFilter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000a00:	f000 ffe6 	bl	80019d0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4833      	ldr	r0, [pc, #204]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a08:	f003 fd36 	bl	8004478 <HAL_DSI_ConfigErrorMonitor>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a12:	f000 ffdd 	bl	80019d0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000a3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a50:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a6a:	f003 ffab 	bl	80049c4 <HAL_DSI_ConfigCommand>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000a74:	f000 ffac 	bl	80019d0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000a80:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a84:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a86:	2310      	movs	r3, #16
 8000a88:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000a9e:	2340      	movs	r3, #64	; 0x40
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aac:	f003 feb0 	bl	8004810 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000ab6:	f000 ff8b 	bl	80019d0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000abe:	f003 fe7e 	bl	80047be <HAL_DSI_SetGenericVCID>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000ac8:	f000 ff82 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	37a8      	adds	r7, #168	; 0xa8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000278 	.word	0x20000278
 8000ad8:	40016c00 	.word	0x40016c00

08000adc <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_DSI_MspInit+0x8c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12f      	bne.n	8000b5e <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_DSI_MspInit+0x90>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_DSI_MspInit+0x90>)
 8000b04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_DSI_MspInit+0x90>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_DSI_MspInit+0x90>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_DSI_MspInit+0x90>)
 8000b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_DSI_MspInit+0x90>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000b3e:	230d      	movs	r3, #13
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <HAL_DSI_MspInit+0x94>)
 8000b4a:	f004 fc47 	bl	80053dc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	2062      	movs	r0, #98	; 0x62
 8000b54:	f003 f858 	bl	8003c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000b58:	2062      	movs	r0, #98	; 0x62
 8000b5a:	f003 f871 	bl	8003c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40016c00 	.word	0x40016c00
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40022400 	.word	0x40022400

08000b74 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <MX_ETH_Init+0x88>)
 8000b7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000b8c:	22e1      	movs	r2, #225	; 0xe1
 8000b8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <MX_ETH_Init+0x8c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000baa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <MX_ETH_Init+0x90>)
 8000bb4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <MX_ETH_Init+0x94>)
 8000bba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000bbe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bc2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ETH_Init+0x84>)
 8000bc6:	f004 f8e3 	bl	8004d90 <HAL_ETH_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000bd0:	f000 fefe 	bl	80019d0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bd4:	2238      	movs	r2, #56	; 0x38
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_ETH_Init+0x98>)
 8000bda:	f00d fe4d 	bl	800e878 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_ETH_Init+0x98>)
 8000be0:	2221      	movs	r2, #33	; 0x21
 8000be2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_ETH_Init+0x98>)
 8000be6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000bea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <MX_ETH_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002cc 	.word	0x200002cc
 8000bfc:	40028000 	.word	0x40028000
 8000c00:	2000037c 	.word	0x2000037c
 8000c04:	200000b0 	.word	0x200000b0
 8000c08:	20000010 	.word	0x20000010
 8000c0c:	20000294 	.word	0x20000294

08000c10 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	; 0x38
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a3f      	ldr	r2, [pc, #252]	; (8000d2c <HAL_ETH_MspInit+0x11c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d178      	bne.n	8000d24 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c32:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a3e      	ldr	r2, [pc, #248]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a38      	ldr	r2, [pc, #224]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <HAL_ETH_MspInit+0x120>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000cc2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <HAL_ETH_MspInit+0x124>)
 8000ce0:	f004 fb7c 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ce4:	2332      	movs	r3, #50	; 0x32
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_ETH_MspInit+0x128>)
 8000d00:	f004 fb6c 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d04:	2386      	movs	r3, #134	; 0x86
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <HAL_ETH_MspInit+0x12c>)
 8000d20:	f004 fb5c 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40028000 	.word	0x40028000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021800 	.word	0x40021800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d5a:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <MX_FMC_Init+0x9c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d72:	2220      	movs	r2, #32
 8000d74:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d7e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d82:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d90:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000da4:	2307      	movs	r3, #7
 8000da6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000dac:	2307      	movs	r3, #7
 8000dae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000db0:	2303      	movs	r3, #3
 8000db2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_FMC_Init+0x98>)
 8000dc2:	f009 f9db 	bl	800a17c <HAL_SDRAM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000dcc:	f000 fe00 	bl	80019d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000384 	.word	0x20000384
 8000ddc:	a0000140 	.word	0xa0000140

08000de0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000df4:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_FMC_MspInit+0x104>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d16f      	bne.n	8000edc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000dfc:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <HAL_FMC_MspInit+0x104>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_FMC_MspInit+0x108>)
 8000e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e06:	4a38      	ldr	r2, [pc, #224]	; (8000ee8 <HAL_FMC_MspInit+0x108>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6393      	str	r3, [r2, #56]	; 0x38
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <HAL_FMC_MspInit+0x108>)
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000e1a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e1e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <HAL_FMC_MspInit+0x10c>)
 8000e36:	f004 fad1 	bl	80053dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000e3a:	f248 1337 	movw	r3, #33079	; 0x8137
 8000e3e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <HAL_FMC_MspInit+0x110>)
 8000e56:	f004 fac1 	bl	80053dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000e5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e5e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <HAL_FMC_MspInit+0x114>)
 8000e76:	f004 fab1 	bl	80053dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000e7a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000e7e:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <HAL_FMC_MspInit+0x118>)
 8000e96:	f004 faa1 	bl	80053dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e9e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eac:	230c      	movs	r3, #12
 8000eae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <HAL_FMC_MspInit+0x11c>)
 8000eb6:	f004 fa91 	bl	80053dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000eba:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000ebe:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <HAL_FMC_MspInit+0x120>)
 8000ed6:	f004 fa81 	bl	80053dc <HAL_GPIO_Init>
 8000eda:	e000      	b.n	8000ede <HAL_FMC_MspInit+0xfe>
    return;
 8000edc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200003b8 	.word	0x200003b8
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021c00 	.word	0x40021c00

08000f04 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f0c:	f7ff ff68 	bl	8000de0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <vApplicationGetIdleTaskMemory+0x30>)
 8000f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200003c0 	.word	0x200003c0
 8000f7c:	20000418 	.word	0x20000418

08000f80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_FREERTOS_Init+0x30>)
 8000f88:	1d3c      	adds	r4, r7, #4
 8000f8a:	461d      	mov	r5, r3
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00c f9ee 	bl	800d37e <osThreadCreate>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <MX_FREERTOS_Init+0x34>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb0:	0800e8ac 	.word	0x0800e8ac
 8000fb4:	200003bc 	.word	0x200003bc

08000fb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f00c fa28 	bl	800d416 <osDelay>
 8000fc6:	e7fb      	b.n	8000fc0 <StartDefaultTask+0x8>

08000fc8 <MX_GPIO_Init>:
     PC11   ------> S_DATAIN5DFSDM1
     PD3   ------> S_CKOUTDFSDM1
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	; 0x40
 8000fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	4b9a      	ldr	r3, [pc, #616]	; (8001248 <MX_GPIO_Init+0x280>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a99      	ldr	r2, [pc, #612]	; (8001248 <MX_GPIO_Init+0x280>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b97      	ldr	r3, [pc, #604]	; (8001248 <MX_GPIO_Init+0x280>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b94      	ldr	r3, [pc, #592]	; (8001248 <MX_GPIO_Init+0x280>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a93      	ldr	r2, [pc, #588]	; (8001248 <MX_GPIO_Init+0x280>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b91      	ldr	r3, [pc, #580]	; (8001248 <MX_GPIO_Init+0x280>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b8e      	ldr	r3, [pc, #568]	; (8001248 <MX_GPIO_Init+0x280>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a8d      	ldr	r2, [pc, #564]	; (8001248 <MX_GPIO_Init+0x280>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <MX_GPIO_Init+0x280>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <MX_GPIO_Init+0x280>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a87      	ldr	r2, [pc, #540]	; (8001248 <MX_GPIO_Init+0x280>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b85      	ldr	r3, [pc, #532]	; (8001248 <MX_GPIO_Init+0x280>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b82      	ldr	r3, [pc, #520]	; (8001248 <MX_GPIO_Init+0x280>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a81      	ldr	r2, [pc, #516]	; (8001248 <MX_GPIO_Init+0x280>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b7f      	ldr	r3, [pc, #508]	; (8001248 <MX_GPIO_Init+0x280>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b7c      	ldr	r3, [pc, #496]	; (8001248 <MX_GPIO_Init+0x280>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a7b      	ldr	r2, [pc, #492]	; (8001248 <MX_GPIO_Init+0x280>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b79      	ldr	r3, [pc, #484]	; (8001248 <MX_GPIO_Init+0x280>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <MX_GPIO_Init+0x280>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <MX_GPIO_Init+0x280>)
 8001074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b73      	ldr	r3, [pc, #460]	; (8001248 <MX_GPIO_Init+0x280>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001086:	4b70      	ldr	r3, [pc, #448]	; (8001248 <MX_GPIO_Init+0x280>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <MX_GPIO_Init+0x280>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <MX_GPIO_Init+0x280>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800109e:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <MX_GPIO_Init+0x280>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a69      	ldr	r2, [pc, #420]	; (8001248 <MX_GPIO_Init+0x280>)
 80010a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b67      	ldr	r3, [pc, #412]	; (8001248 <MX_GPIO_Init+0x280>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4b64      	ldr	r3, [pc, #400]	; (8001248 <MX_GPIO_Init+0x280>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a63      	ldr	r2, [pc, #396]	; (8001248 <MX_GPIO_Init+0x280>)
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <MX_GPIO_Init+0x280>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <MX_GPIO_Init+0x280>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a5d      	ldr	r2, [pc, #372]	; (8001248 <MX_GPIO_Init+0x280>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <MX_GPIO_Init+0x280>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|DSI_RESET_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f24a 0120 	movw	r1, #40992	; 0xa020
 80010ec:	4857      	ldr	r0, [pc, #348]	; (800124c <MX_GPIO_Init+0x284>)
 80010ee:	f004 fb21 	bl	8005734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|DSI_RESET_Pin|LD_USER2_Pin;
 80010f2:	f24a 0320 	movw	r3, #40992	; 0xa020
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	4850      	ldr	r0, [pc, #320]	; (800124c <MX_GPIO_Init+0x284>)
 800110c:	f004 f966 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin|ARD_D7_Pin
 8001110:	f245 031b 	movw	r3, #20507	; 0x501b
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	4849      	ldr	r0, [pc, #292]	; (800124c <MX_GPIO_Init+0x284>)
 8001126:	f004 f959 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 800112a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800113c:	2303      	movs	r3, #3
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	4842      	ldr	r0, [pc, #264]	; (8001250 <MX_GPIO_Init+0x288>)
 8001148:	f004 f948 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 800114c:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800115a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115e:	4619      	mov	r1, r3
 8001160:	483c      	ldr	r0, [pc, #240]	; (8001254 <MX_GPIO_Init+0x28c>)
 8001162:	f004 f93b 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001166:	23f8      	movs	r3, #248	; 0xf8
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001176:	4619      	mov	r1, r3
 8001178:	4837      	ldr	r0, [pc, #220]	; (8001258 <MX_GPIO_Init+0x290>)
 800117a:	f004 f92f 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 800117e:	2330      	movs	r3, #48	; 0x30
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <MX_GPIO_Init+0x294>)
 8001192:	f004 f923 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001196:	2308      	movs	r3, #8
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80011a6:	2303      	movs	r3, #3
 80011a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ae:	4619      	mov	r1, r3
 80011b0:	482a      	ldr	r0, [pc, #168]	; (800125c <MX_GPIO_Init+0x294>)
 80011b2:	f004 f913 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_GPIO_Init+0x298>)
 80011d4:	f004 f902 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <MX_GPIO_Init+0x28c>)
 80011f0:	f004 f8f4 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 80011f4:	2348      	movs	r3, #72	; 0x48
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <MX_GPIO_Init+0x29c>)
 8001208:	f004 f8e8 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <MX_GPIO_Init+0x298>)
 8001222:	f004 f8db 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001236:	4619      	mov	r1, r3
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <MX_GPIO_Init+0x2a0>)
 800123a:	f004 f8cf 	bl	80053dc <HAL_GPIO_Init>

}
 800123e:	bf00      	nop
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40022400 	.word	0x40022400
 8001250:	40020800 	.word	0x40020800
 8001254:	40022000 	.word	0x40022000
 8001258:	40022800 	.word	0x40022800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40020000 	.word	0x40020000
 8001264:	40021800 	.word	0x40021800
 8001268:	40021c00 	.word	0x40021c00

0800126c <MX_HDMI_CEC_Init>:
CEC_HandleTypeDef hcec;
uint8_t cec_receive_buffer[16];

/* HDMI_CEC init function */
void MX_HDMI_CEC_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <MX_HDMI_CEC_Init+0x60>)
 8001274:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 8001284:	2210      	movs	r2, #16
 8001286:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 80012a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012a6:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <MX_HDMI_CEC_Init+0x64>)
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_HDMI_CEC_Init+0x5c>)
 80012b6:	f002 fa93 	bl	80037e0 <HAL_CEC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 fb86 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000618 	.word	0x20000618
 80012cc:	40006c00 	.word	0x40006c00
 80012d0:	2000065c 	.word	0x2000065c

080012d4 <HAL_CEC_MspInit>:

void HAL_CEC_MspInit(CEC_HandleTypeDef* cecHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0ae      	sub	sp, #184	; 0xb8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2290      	movs	r2, #144	; 0x90
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00d fabf 	bl	800e878 <memset>
  if(cecHandle->Instance==CEC)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_CEC_MspInit+0xc8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d146      	bne.n	8001392 <HAL_CEC_MspInit+0xbe>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8001304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001308:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 800130a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800130e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4618      	mov	r0, r3
 8001318:	f007 fc72 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 8001322:	f000 fb55 	bl	80019d0 <Error_Handler>
    }

    /* CEC clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_CEC_MspInit+0xcc>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_CEC_MspInit+0xcc>)
 800132c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_CEC_MspInit+0xcc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_CEC_MspInit+0xcc>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_CEC_MspInit+0xcc>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_CEC_MspInit+0xcc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PA15     ------> CEC
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 8001356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8001370:	2304      	movs	r3, #4
 8001372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_CEC_MspInit+0xd0>)
 800137e:	f004 f82d 	bl	80053dc <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	205e      	movs	r0, #94	; 0x5e
 8001388:	f002 fc3e 	bl	8003c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 800138c:	205e      	movs	r0, #94	; 0x5e
 800138e:	f002 fc57 	bl	8003c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }
}
 8001392:	bf00      	nop
 8001394:	37b8      	adds	r7, #184	; 0xb8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40006c00 	.word	0x40006c00
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_I2C1_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_I2C1_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_I2C1_Init+0x74>)
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <MX_I2C1_Init+0x7c>)
 80013b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_I2C1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_I2C1_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_I2C1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_I2C1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_I2C1_Init+0x74>)
 80013e4:	f004 f9c0 	bl	8005768 <HAL_I2C_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ee:	f000 faef 	bl	80019d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <MX_I2C1_Init+0x74>)
 80013f6:	f004 fa47 	bl	8005888 <HAL_I2CEx_ConfigAnalogFilter>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001400:	f000 fae6 	bl	80019d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_I2C1_Init+0x74>)
 8001408:	f004 fa89 	bl	800591e <HAL_I2CEx_ConfigDigitalFilter>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001412:	f000 fadd 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000066c 	.word	0x2000066c
 8001420:	40005400 	.word	0x40005400
 8001424:	20404768 	.word	0x20404768

08001428 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_I2C4_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_I2C4_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_I2C4_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <MX_I2C4_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_I2C4_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_I2C4_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_I2C4_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_I2C4_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_I2C4_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C4_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_I2C4_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_I2C4_Init+0x74>)
 8001464:	f004 f980 	bl	8005768 <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800146e:	f000 faaf 	bl	80019d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <MX_I2C4_Init+0x74>)
 8001476:	f004 fa07 	bl	8005888 <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 faa6 	bl	80019d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_I2C4_Init+0x74>)
 8001488:	f004 fa49 	bl	800591e <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 fa9d 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200006c0 	.word	0x200006c0
 80014a0:	40006000 	.word	0x40006000
 80014a4:	20404768 	.word	0x20404768

080014a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0b0      	sub	sp, #192	; 0xc0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2290      	movs	r2, #144	; 0x90
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00d f9d5 	bl	800e878 <memset>
  if(i2cHandle->Instance==I2C1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a55      	ldr	r2, [pc, #340]	; (8001628 <HAL_I2C_MspInit+0x180>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d13e      	bne.n	8001556 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 fb89 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80014f4:	f000 fa6c 	bl	80019d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_I2C_MspInit+0x184>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a4b      	ldr	r2, [pc, #300]	; (800162c <HAL_I2C_MspInit+0x184>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_I2C_MspInit+0x184>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001510:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	2301      	movs	r3, #1
 8001520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152a:	2304      	movs	r3, #4
 800152c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001534:	4619      	mov	r1, r3
 8001536:	483e      	ldr	r0, [pc, #248]	; (8001630 <HAL_I2C_MspInit+0x188>)
 8001538:	f003 ff50 	bl	80053dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153c:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_I2C_MspInit+0x184>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a3a      	ldr	r2, [pc, #232]	; (800162c <HAL_I2C_MspInit+0x184>)
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_I2C_MspInit+0x184>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001554:	e063      	b.n	800161e <HAL_I2C_MspInit+0x176>
  else if(i2cHandle->Instance==I2C4)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a36      	ldr	r2, [pc, #216]	; (8001634 <HAL_I2C_MspInit+0x18c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d15e      	bne.n	800161e <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001564:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4618      	mov	r0, r3
 8001572:	f007 fb45 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 800157c:	f000 fa28 	bl	80019d0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_I2C_MspInit+0x184>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a29      	ldr	r2, [pc, #164]	; (800162c <HAL_I2C_MspInit+0x184>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_I2C_MspInit+0x184>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_I2C_MspInit+0x184>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_I2C_MspInit+0x184>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_I2C_MspInit+0x184>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b6:	2312      	movs	r3, #18
 80015b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80015c8:	230b      	movs	r3, #11
 80015ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d2:	4619      	mov	r1, r3
 80015d4:	4816      	ldr	r0, [pc, #88]	; (8001630 <HAL_I2C_MspInit+0x188>)
 80015d6:	f003 ff01 	bl	80053dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e2:	2312      	movs	r3, #18
 80015e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80015f4:	2304      	movs	r3, #4
 80015f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015fe:	4619      	mov	r1, r3
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001602:	f003 feeb 	bl	80053dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_I2C_MspInit+0x184>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_I2C_MspInit+0x184>)
 800160c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_I2C_MspInit+0x184>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
}
 800161e:	bf00      	nop
 8001620:	37c0      	adds	r7, #192	; 0xc0
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40005400 	.word	0x40005400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020400 	.word	0x40020400
 8001634:	40006000 	.word	0x40006000
 8001638:	40020c00 	.word	0x40020c00

0800163c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_IWDG_Init+0x34>)
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <MX_IWDG_Init+0x38>)
 8001644:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_IWDG_Init+0x34>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_IWDG_Init+0x34>)
 800164e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001652:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_IWDG_Init+0x34>)
 8001656:	f640 72ff 	movw	r2, #4095	; 0xfff
 800165a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_IWDG_Init+0x34>)
 800165e:	f004 f9aa 	bl	80059b6 <HAL_IWDG_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001668:	f000 f9b2 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000714 	.word	0x20000714
 8001674:	40003000 	.word	0x40003000

08001678 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2234      	movs	r2, #52	; 0x34
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f00d f8f7 	bl	800e878 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <MX_LTDC_Init+0xf4>)
 800168c:	4a38      	ldr	r2, [pc, #224]	; (8001770 <MX_LTDC_Init+0xf8>)
 800168e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <MX_LTDC_Init+0xf4>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_LTDC_Init+0xf4>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <MX_LTDC_Init+0xf4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_LTDC_Init+0xf4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <MX_LTDC_Init+0xf4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_LTDC_Init+0xf4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <MX_LTDC_Init+0xf4>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_LTDC_Init+0xf4>)
 80016bc:	2201      	movs	r2, #1
 80016be:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_LTDC_Init+0xf4>)
 80016c2:	22c9      	movs	r2, #201	; 0xc9
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_LTDC_Init+0xf4>)
 80016c8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_LTDC_Init+0xf4>)
 80016d0:	22ca      	movs	r2, #202	; 0xca
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_LTDC_Init+0xf4>)
 80016d6:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_LTDC_Init+0xf4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_LTDC_Init+0xf4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_LTDC_Init+0xf4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016f4:	481d      	ldr	r0, [pc, #116]	; (800176c <MX_LTDC_Init+0xf4>)
 80016f6:	f004 f9ad 	bl	8005a54 <HAL_LTDC_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 f966 	bl	80019d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001708:	23c8      	movs	r3, #200	; 0xc8
 800170a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001710:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001714:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001716:	2302      	movs	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001726:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001728:	2307      	movs	r3, #7
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800172c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8001732:	23c8      	movs	r3, #200	; 0xc8
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001736:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_LTDC_Init+0xf4>)
 8001756:	f004 fb0f 	bl	8005d78 <HAL_LTDC_ConfigLayer>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001760:	f000 f936 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3738      	adds	r7, #56	; 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000724 	.word	0x20000724
 8001770:	40016800 	.word	0x40016800

08001774 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_LTDC_MspInit+0x44>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d113      	bne.n	80017ae <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_LTDC_MspInit+0x48>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_LTDC_MspInit+0x48>)
 800178c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_LTDC_MspInit+0x48>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	2058      	movs	r0, #88	; 0x58
 80017a4:	f002 fa30 	bl	8003c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017a8:	2058      	movs	r0, #88	; 0x58
 80017aa:	f002 fa49 	bl	8003c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40016800 	.word	0x40016800
 80017bc:	40023800 	.word	0x40023800

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c4:	f001 fd27 	bl	8003216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c8:	f000 f844 	bl	8001854 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017cc:	f000 f8be 	bl	800194c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d0:	f7ff fbfa 	bl	8000fc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80017d4:	f7fe feb6 	bl	8000544 <MX_ADC1_Init>
  MX_ADC3_Init();
 80017d8:	f7fe ff06 	bl	80005e8 <MX_ADC3_Init>
  MX_CRC_Init();
 80017dc:	f7fe ffde 	bl	800079c <MX_CRC_Init>
  MX_DMA2D_Init();
 80017e0:	f7ff f81e 	bl	8000820 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80017e4:	f7ff f87a 	bl	80008dc <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 80017e8:	f7ff f9c4 	bl	8000b74 <MX_ETH_Init>
  MX_FMC_Init();
 80017ec:	f7ff faa8 	bl	8000d40 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 80017f0:	f7ff fd3c 	bl	800126c <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 80017f4:	f7ff fdd8 	bl	80013a8 <MX_I2C1_Init>
  MX_I2C4_Init();
 80017f8:	f7ff fe16 	bl	8001428 <MX_I2C4_Init>
  MX_IWDG_Init();
 80017fc:	f7ff ff1e 	bl	800163c <MX_IWDG_Init>
  MX_LTDC_Init();
 8001800:	f7ff ff3a 	bl	8001678 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001804:	f000 f8ea 	bl	80019dc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001808:	f000 f9c4 	bl	8001b94 <MX_RTC_Init>
  MX_SAI1_Init();
 800180c:	f000 fab4 	bl	8001d78 <MX_SAI1_Init>
  MX_SAI2_Init();
 8001810:	f000 fb5a 	bl	8001ec8 <MX_SAI2_Init>
  MX_SDMMC2_MMC_Init();
 8001814:	f000 fc2e 	bl	8002074 <MX_SDMMC2_MMC_Init>
  MX_SPDIFRX_Init();
 8001818:	f000 fcdc 	bl	80021d4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800181c:	f000 fd72 	bl	8002304 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001820:	f000 ff26 	bl	8002670 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001824:	f000 ff78 	bl	8002718 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001828:	f000 ffd0 	bl	80027cc <MX_TIM10_Init>
  MX_TIM11_Init();
 800182c:	f001 f81c 	bl	8002868 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001830:	f001 f868 	bl	8002904 <MX_TIM12_Init>
  MX_UART5_Init();
 8001834:	f001 f9d0 	bl	8002bd8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001838:	f001 f9fe 	bl	8002c38 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800183c:	f001 fa2c 	bl	8002c98 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001840:	f001 fb7c 	bl	8002f3c <MX_USB_OTG_HS_PCD_Init>
  MX_WWDG_Init();
 8001844:	f001 fc7e 	bl	8003144 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001848:	f7ff fb9a 	bl	8000f80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800184c:	f00b fd90 	bl	800d370 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001850:	e7fe      	b.n	8001850 <main+0x90>
	...

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	; 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2234      	movs	r2, #52	; 0x34
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f00d f808 	bl	800e878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001878:	f006 fb76 	bl	8007f68 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <SystemClock_Config+0xf0>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a30      	ldr	r2, [pc, #192]	; (8001944 <SystemClock_Config+0xf0>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <SystemClock_Config+0xf0>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <SystemClock_Config+0xf4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <SystemClock_Config+0xf4>)
 800189a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <SystemClock_Config+0xf4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80018ac:	230b      	movs	r3, #11
 80018ae:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b6:	2301      	movs	r3, #1
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ba:	2310      	movs	r3, #16
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018be:	2301      	movs	r3, #1
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c2:	2302      	movs	r3, #2
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018cc:	2319      	movs	r3, #25
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80018d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80018d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018de:	2302      	movs	r3, #2
 80018e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4618      	mov	r0, r3
 80018e8:	f006 fc60 	bl	80081ac <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018f2:	f000 f86d 	bl	80019d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018f6:	f006 fb47 	bl	8007f88 <HAL_PWREx_EnableOverDrive>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001900:	f000 f866 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2302      	movs	r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	2107      	movs	r1, #7
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fef0 	bl	8008708 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800192e:	f000 f84f 	bl	80019d0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2000      	movs	r0, #0
 8001938:	f006 ffd2 	bl	80088e0 <HAL_RCC_MCOConfig>
}
 800193c:	bf00      	nop
 800193e:	3750      	adds	r7, #80	; 0x50
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0a4      	sub	sp, #144	; 0x90
 8001950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	2290      	movs	r2, #144	; 0x90
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f00c ff8d 	bl	800e878 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <PeriphCommonClock_Config+0x5c>)
 8001960:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001966:	2302      	movs	r3, #2
 8001968:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800196a:	2303      	movs	r3, #3
 800196c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800197a:	2300      	movs	r3, #0
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800197e:	2300      	movs	r3, #0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001986:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4618      	mov	r0, r3
 8001992:	f007 f935 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800199c:	f000 f818 	bl	80019d0 <Error_Handler>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3790      	adds	r7, #144	; 0x90
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	04380008 	.word	0x04380008

080019ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019be:	f001 fc37 	bl	8003230 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40001000 	.word	0x40001000

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>
	...

080019dc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 80019e2:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <MX_QUADSPI_Init+0x54>)
 80019e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 80019ee:	2210      	movs	r2, #16
 80019f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 80019f4:	2210      	movs	r2, #16
 80019f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 80019fa:	221a      	movs	r2, #26
 80019fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 8001a00:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a04:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_QUADSPI_Init+0x50>)
 8001a1a:	f006 fb05 	bl	8008028 <HAL_QSPI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001a24:	f7ff ffd4 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200007cc 	.word	0x200007cc
 8001a30:	a0001000 	.word	0xa0001000

08001a34 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <HAL_QSPI_MspInit+0x148>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 808e 	bne.w	8001b74 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	6393      	str	r3, [r2, #56]	; 0x38
 8001a64:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a70:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_QSPI_MspInit+0x14c>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4826      	ldr	r0, [pc, #152]	; (8001b84 <HAL_QSPI_MspInit+0x150>)
 8001aec:	f003 fc76 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001af0:	2340      	movs	r3, #64	; 0x40
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b00:	230a      	movs	r3, #10
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481f      	ldr	r0, [pc, #124]	; (8001b88 <HAL_QSPI_MspInit+0x154>)
 8001b0c:	f003 fc66 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001b10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b22:	2309      	movs	r3, #9
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4817      	ldr	r0, [pc, #92]	; (8001b8c <HAL_QSPI_MspInit+0x158>)
 8001b2e:	f003 fc55 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b32:	2304      	movs	r3, #4
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b42:	2309      	movs	r3, #9
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480e      	ldr	r0, [pc, #56]	; (8001b88 <HAL_QSPI_MspInit+0x154>)
 8001b4e:	f003 fc45 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b64:	2309      	movs	r3, #9
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <HAL_QSPI_MspInit+0x15c>)
 8001b70:	f003 fc34 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b74:	bf00      	nop
 8001b76:	3730      	adds	r7, #48	; 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	a0001000 	.word	0xa0001000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00

08001b94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2228      	movs	r2, #40	; 0x28
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00c fe5f 	bl	800e878 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001bbc:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <MX_RTC_Init+0x134>)
 8001bbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001bc8:	227f      	movs	r2, #127	; 0x7f
 8001bca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001bce:	22ff      	movs	r2, #255	; 0xff
 8001bd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001bd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bd8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001be0:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be6:	4837      	ldr	r0, [pc, #220]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001be8:	f007 fda4 	bl	8009734 <HAL_RTC_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001bf2:	f7ff feed 	bl	80019d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	482a      	ldr	r0, [pc, #168]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001c1a:	f007 fe0f 	bl	800983c <HAL_RTC_SetTime>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c24:	f7ff fed4 	bl	80019d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c44:	2201      	movs	r2, #1
 8001c46:	4619      	mov	r1, r3
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001c4a:	f007 fe91 	bl	8009970 <HAL_RTC_SetDate>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001c54:	f7ff febc 	bl	80019d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001c90:	f007 fef2 	bl	8009a78 <HAL_RTC_SetAlarm>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001c9a:	f7ff fe99 	bl	80019d0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <MX_RTC_Init+0x130>)
 8001cac:	f007 fee4 	bl	8009a78 <HAL_RTC_SetAlarm>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001cb6:	f7ff fe8b 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	3740      	adds	r7, #64	; 0x40
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000818 	.word	0x20000818
 8001cc8:	40002800 	.word	0x40002800

08001ccc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0ac      	sub	sp, #176	; 0xb0
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	2290      	movs	r2, #144	; 0x90
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f00c fdc3 	bl	800e878 <memset>
  if(rtcHandle->Instance==RTC)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_RTC_MspInit+0xa0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d133      	bne.n	8001d64 <HAL_RTC_MspInit+0x98>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 ff78 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 8001d16:	f7ff fe5b 	bl	80019d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_RTC_MspInit+0xa4>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_RTC_MspInit+0xa4>)
 8001d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RTC_MspInit+0xa4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_RTC_MspInit+0xa4>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_RTC_MspInit+0xa4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_RTC_MspInit+0xa8>)
 8001d60:	f003 fb3c 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d64:	bf00      	nop
 8001d66:	37b0      	adds	r7, #176	; 0xb0
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40002800 	.word	0x40002800
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800

08001d78 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockB1;
SAI_HandleTypeDef hsai_BlockA2;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001d7e:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <MX_SAI1_Init+0x140>)
 8001d80:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001d90:	2240      	movs	r2, #64	; 0x40
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001da0:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001dac:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001db8:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <MX_SAI1_Init+0x144>)
 8001dbc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001dd0:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001dd6:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dd8:	2208      	movs	r2, #8
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001e0c:	4829      	ldr	r0, [pc, #164]	; (8001eb4 <MX_SAI1_Init+0x13c>)
 8001e0e:	f007 ffff 	bl	8009e10 <HAL_SAI_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001e18:	f7ff fdda 	bl	80019d0 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e1e:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <MX_SAI1_Init+0x14c>)
 8001e20:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e30:	2240      	movs	r2, #64	; 0x40
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e3a:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_SAI1_Init+0x148>)
 8001ea2:	f007 ffb5 	bl	8009e10 <HAL_SAI_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001eac:	f7ff fd90 	bl	80019d0 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000838 	.word	0x20000838
 8001eb8:	40015804 	.word	0x40015804
 8001ebc:	0002ee00 	.word	0x0002ee00
 8001ec0:	200008bc 	.word	0x200008bc
 8001ec4:	40015824 	.word	0x40015824

08001ec8 <MX_SAI2_Init>:
/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001ece:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <MX_SAI2_Init+0x54>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001ef2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001ef6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_SAI2_Init+0x50>)
 8001f06:	f007 ff83 	bl	8009e10 <HAL_SAI_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 8001f10:	f7ff fd5e 	bl	80019d0 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000940 	.word	0x20000940
 8001f1c:	40015c04 	.word	0x40015c04

08001f20 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_SAI_MspInit+0x130>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d134      	bne.n	8001f9c <HAL_SAI_MspInit+0x7c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_SAI_MspInit+0x134>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10b      	bne.n	8001f52 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8001f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_SAI_MspInit+0x134>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <HAL_SAI_MspInit+0x134>)
 8001f5a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8001f5c:	2370      	movs	r3, #112	; 0x70
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4839      	ldr	r0, [pc, #228]	; (800205c <HAL_SAI_MspInit+0x13c>)
 8001f78:	f003 fa30 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4832      	ldr	r0, [pc, #200]	; (8002060 <HAL_SAI_MspInit+0x140>)
 8001f98:	f003 fa20 	bl	80053dc <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_SAI_MspInit+0x144>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d124      	bne.n	8001ff0 <HAL_SAI_MspInit+0xd0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_SAI_MspInit+0x134>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8001fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_SAI_MspInit+0x134>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <HAL_SAI_MspInit+0x134>)
 8001fce:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001fe0:	2306      	movs	r3, #6
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	481c      	ldr	r0, [pc, #112]	; (800205c <HAL_SAI_MspInit+0x13c>)
 8001fec:	f003 f9f6 	bl	80053dc <HAL_GPIO_Init>

    }
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_SAI_MspInit+0x148>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d125      	bne.n	8002046 <HAL_SAI_MspInit+0x126>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_SAI_MspInit+0x14c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8002008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_SAI_MspInit+0x138>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_SAI_MspInit+0x14c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_SAI_MspInit+0x14c>)
 8002022:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8002024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002036:	230a      	movs	r3, #10
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	480b      	ldr	r0, [pc, #44]	; (8002070 <HAL_SAI_MspInit+0x150>)
 8002042:	f003 f9cb 	bl	80053dc <HAL_GPIO_Init>

    }
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40015804 	.word	0x40015804
 8002054:	200009c4 	.word	0x200009c4
 8002058:	40023800 	.word	0x40023800
 800205c:	40021000 	.word	0x40021000
 8002060:	40021800 	.word	0x40021800
 8002064:	40015824 	.word	0x40015824
 8002068:	40015c04 	.word	0x40015c04
 800206c:	200009c8 	.word	0x200009c8
 8002070:	40020c00 	.word	0x40020c00

08002074 <MX_SDMMC2_MMC_Init>:
MMC_HandleTypeDef hmmc2;

/* SDMMC2 init function */

void MX_SDMMC2_MMC_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <MX_SDMMC2_MMC_Init+0x5c>)
 800207c:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 8002092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002096:	611a      	str	r2, [r3, #16]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  hmmc2.Init.ClockDiv = 0;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 80020a6:	f004 f83f 	bl	8006128 <HAL_MMC_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_SDMMC2_MMC_Init+0x40>
  {
    Error_Handler();
 80020b0:	f7ff fc8e 	bl	80019d0 <Error_Handler>
  }
  if (HAL_MMC_ConfigWideBusOperation(&hmmc2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80020b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_SDMMC2_MMC_Init+0x58>)
 80020ba:	f004 fb95 	bl	80067e8 <HAL_MMC_ConfigWideBusOperation>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_SDMMC2_MMC_Init+0x54>
  {
    Error_Handler();
 80020c4:	f7ff fc84 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200009cc 	.word	0x200009cc
 80020d0:	40011c00 	.word	0x40011c00

080020d4 <HAL_MMC_MspInit>:

void HAL_MMC_MspInit(MMC_HandleTypeDef* mmcHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(mmcHandle->Instance==SDMMC2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <HAL_MMC_MspInit+0xec>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d160      	bne.n	80021b8 <HAL_MMC_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 8002144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_MMC_MspInit+0xf0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8002156:	2318      	movs	r3, #24
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002166:	230a      	movs	r3, #10
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4815      	ldr	r0, [pc, #84]	; (80021c8 <HAL_MMC_MspInit+0xf4>)
 8002172:	f003 f933 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8002176:	23c0      	movs	r3, #192	; 0xc0
 8002178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002186:	230b      	movs	r3, #11
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	480e      	ldr	r0, [pc, #56]	; (80021cc <HAL_MMC_MspInit+0xf8>)
 8002192:	f003 f923 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8002196:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80021a8:	230b      	movs	r3, #11
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <HAL_MMC_MspInit+0xfc>)
 80021b4:	f003 f912 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 80021b8:	bf00      	nop
 80021ba:	3730      	adds	r7, #48	; 0x30
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40011c00 	.word	0x40011c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021800 	.word	0x40021800

080021d4 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 80021da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80021de:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 80021e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e6:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 800221a:	2200      	movs	r2, #0
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_SPDIFRX_Init+0x60>)
 8002220:	f007 ffe0 	bl	800a1e4 <HAL_SPDIFRX_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 800222a:	f7ff fbd1 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000c4c 	.word	0x20000c4c

08002238 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0ae      	sub	sp, #184	; 0xb8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2290      	movs	r2, #144	; 0x90
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f00c fb0d 	bl	800e878 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002266:	d144      	bne.n	80022f2 <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800226c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002272:	2302      	movs	r3, #2
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002276:	2302      	movs	r3, #2
 8002278:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800227a:	2302      	movs	r3, #2
 800227c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4618      	mov	r0, r3
 8002288:	f006 fcba 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002292:	f7ff fb9d 	bl	80019d0 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_SPDIFRX_MspInit+0xc4>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_SPDIFRX_MspInit+0xc4>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_SPDIFRX_MspInit+0xc4>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_SPDIFRX_MspInit+0xc4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_SPDIFRX_MspInit+0xc4>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_SPDIFRX_MspInit+0xc4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80022e0:	2307      	movs	r3, #7
 80022e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022ea:	4619      	mov	r1, r3
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <HAL_SPDIFRX_MspInit+0xc8>)
 80022ee:	f003 f875 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	37b8      	adds	r7, #184	; 0xb8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021800 	.word	0x40021800

08002304 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_SPI2_Init+0x70>)
 800230a:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <MX_SPI2_Init+0x74>)
 800230c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_SPI2_Init+0x70>)
 8002310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002314:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <MX_SPI2_Init+0x70>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_SPI2_Init+0x70>)
 800231e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002322:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_SPI2_Init+0x70>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_SPI2_Init+0x70>)
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_SPI2_Init+0x70>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_SPI2_Init+0x70>)
 8002338:	2200      	movs	r2, #0
 800233a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <MX_SPI2_Init+0x70>)
 800233e:	2200      	movs	r2, #0
 8002340:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_SPI2_Init+0x70>)
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_SPI2_Init+0x70>)
 800234a:	2200      	movs	r2, #0
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_SPI2_Init+0x70>)
 8002350:	2207      	movs	r2, #7
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <MX_SPI2_Init+0x70>)
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_SPI2_Init+0x70>)
 800235c:	2208      	movs	r2, #8
 800235e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_SPI2_Init+0x70>)
 8002362:	f007 ff9b 	bl	800a29c <HAL_SPI_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 800236c:	f7ff fb30 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000c98 	.word	0x20000c98
 8002378:	40003800 	.word	0x40003800

0800237c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2e      	ldr	r2, [pc, #184]	; (8002454 <HAL_SPI_MspInit+0xd8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d156      	bne.n	800244c <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a27      	ldr	r2, [pc, #156]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a21      	ldr	r2, [pc, #132]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_SPI_MspInit+0xdc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80023e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023f8:	2305      	movs	r3, #5
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4816      	ldr	r0, [pc, #88]	; (800245c <HAL_SPI_MspInit+0xe0>)
 8002404:	f002 ffea 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800241a:	2305      	movs	r3, #5
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <HAL_SPI_MspInit+0xe0>)
 8002426:	f002 ffd9 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800242a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243c:	2305      	movs	r3, #5
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_SPI_MspInit+0xe4>)
 8002448:	f002 ffc8 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40003800 	.word	0x40003800
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_MspInit+0x4c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_MspInit+0x4c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	210f      	movs	r1, #15
 800249e:	f06f 0001 	mvn.w	r0, #1
 80024a2:	f001 fbb1 	bl	8003c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <HAL_InitTick+0xe0>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a32      	ldr	r2, [pc, #200]	; (8002594 <HAL_InitTick+0xe0>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_InitTick+0xe0>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024dc:	f107 0210 	add.w	r2, r7, #16
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f006 fb58 	bl	8008b9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024f6:	f006 fb29 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 80024fa:	6378      	str	r0, [r7, #52]	; 0x34
 80024fc:	e004      	b.n	8002508 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024fe:	f006 fb25 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 8002502:	4603      	mov	r3, r0
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_InitTick+0xe4>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	3b01      	subs	r3, #1
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_InitTick+0xe8>)
 8002518:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_InitTick+0xec>)
 800251a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_InitTick+0xe8>)
 800251e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002522:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_InitTick+0xe8>)
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_InitTick+0xe8>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_InitTick+0xe8>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_InitTick+0xe8>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800253c:	4817      	ldr	r0, [pc, #92]	; (800259c <HAL_InitTick+0xe8>)
 800253e:	f007 ff58 	bl	800a3f2 <HAL_TIM_Base_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002548:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11b      	bne.n	8002588 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002550:	4812      	ldr	r0, [pc, #72]	; (800259c <HAL_InitTick+0xe8>)
 8002552:	f007 ffa5 	bl	800a4a0 <HAL_TIM_Base_Start_IT>
 8002556:	4603      	mov	r3, r0
 8002558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800255c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002560:	2b00      	cmp	r3, #0
 8002562:	d111      	bne.n	8002588 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002564:	2036      	movs	r0, #54	; 0x36
 8002566:	f001 fb6b 	bl	8003c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d808      	bhi.n	8002582 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002570:	2200      	movs	r2, #0
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	2036      	movs	r0, #54	; 0x36
 8002576:	f001 fb47 	bl	8003c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <HAL_InitTick+0xf0>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e002      	b.n	8002588 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002588:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800258c:	4618      	mov	r0, r3
 800258e:	3738      	adds	r7, #56	; 0x38
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	431bde83 	.word	0x431bde83
 800259c:	20000cfc 	.word	0x20000cfc
 80025a0:	40001000 	.word	0x40001000
 80025a4:	20000004 	.word	0x20000004

080025a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <NMI_Handler+0x4>

080025ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <HardFault_Handler+0x4>

080025b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <MemManage_Handler+0x4>

080025ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM6_DAC_IRQHandler+0x10>)
 80025da:	f008 f830 	bl	800a63e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000cfc 	.word	0x20000cfc

080025e8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <OTG_HS_IRQHandler+0x10>)
 80025ee:	f004 fd5d 	bl	80070ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000105c 	.word	0x2000105c

080025fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <LTDC_IRQHandler+0x10>)
 8002602:	f003 faf7 	bl	8005bf4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000724 	.word	0x20000724

08002610 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <DMA2D_IRQHandler+0x10>)
 8002616:	f001 fc65 	bl	8003ee4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000220 	.word	0x20000220

08002624 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <CEC_IRQHandler+0x10>)
 800262a:	f001 f93a 	bl	80038a2 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000618 	.word	0x20000618

08002638 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <DSI_IRQHandler+0x10>)
 800263e:	f001 ffd7 	bl	80045f0 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000278 	.word	0x20000278

0800264c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <SystemInit+0x20>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <SystemInit+0x20>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <MX_TIM1_Init+0xa0>)
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <MX_TIM1_Init+0xa4>)
 8002692:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_TIM1_Init+0xa0>)
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM1_Init+0xa0>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026ba:	4815      	ldr	r0, [pc, #84]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026bc:	f007 fe99 	bl	800a3f2 <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80026c6:	f7ff f983 	bl	80019d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4619      	mov	r1, r3
 80026d6:	480e      	ldr	r0, [pc, #56]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026d8:	f008 f9e4 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80026e2:	f7ff f975 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_TIM1_Init+0xa0>)
 80026f8:	f008 fe5e 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002702:	f7ff f965 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000d48 	.word	0x20000d48
 8002714:	40010000 	.word	0x40010000

08002718 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800272a:	463b      	mov	r3, r7
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	615a      	str	r2, [r3, #20]
 800273a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <MX_TIM3_Init+0xac>)
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <MX_TIM3_Init+0xb0>)
 8002740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <MX_TIM3_Init+0xac>)
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <MX_TIM3_Init+0xac>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_TIM3_Init+0xac>)
 8002750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <MX_TIM3_Init+0xac>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_TIM3_Init+0xac>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002762:	4818      	ldr	r0, [pc, #96]	; (80027c4 <MX_TIM3_Init+0xac>)
 8002764:	f007 ff14 	bl	800a590 <HAL_TIM_PWM_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800276e:	f7ff f92f 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4810      	ldr	r0, [pc, #64]	; (80027c4 <MX_TIM3_Init+0xac>)
 8002782:	f008 fe19 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800278c:	f7ff f920 	bl	80019d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002790:	2360      	movs	r3, #96	; 0x60
 8002792:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027a0:	463b      	mov	r3, r7
 80027a2:	2208      	movs	r2, #8
 80027a4:	4619      	mov	r1, r3
 80027a6:	4807      	ldr	r0, [pc, #28]	; (80027c4 <MX_TIM3_Init+0xac>)
 80027a8:	f008 f868 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80027b2:	f7ff f90d 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <MX_TIM3_Init+0xac>)
 80027b8:	f000 f966 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000d94 	.word	0x20000d94
 80027c8:	40000400 	.word	0x40000400

080027cc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
 80027e0:	615a      	str	r2, [r3, #20]
 80027e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <MX_TIM10_Init+0x94>)
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <MX_TIM10_Init+0x98>)
 80027e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM10_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_TIM10_Init+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM10_Init+0x94>)
 80027f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM10_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_TIM10_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800280a:	4815      	ldr	r0, [pc, #84]	; (8002860 <MX_TIM10_Init+0x94>)
 800280c:	f007 fdf1 	bl	800a3f2 <HAL_TIM_Base_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002816:	f7ff f8db 	bl	80019d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800281a:	4811      	ldr	r0, [pc, #68]	; (8002860 <MX_TIM10_Init+0x94>)
 800281c:	f007 feb8 	bl	800a590 <HAL_TIM_PWM_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002826:	f7ff f8d3 	bl	80019d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282a:	2360      	movs	r3, #96	; 0x60
 800282c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	4619      	mov	r1, r3
 8002840:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_TIM10_Init+0x94>)
 8002842:	f008 f81b 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800284c:	f7ff f8c0 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002850:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM10_Init+0x94>)
 8002852:	f000 f919 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 8002856:	bf00      	nop
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000de0 	.word	0x20000de0
 8002864:	40014400 	.word	0x40014400

08002868 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
 800287c:	615a      	str	r2, [r3, #20]
 800287e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <MX_TIM11_Init+0x94>)
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <MX_TIM11_Init+0x98>)
 8002884:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <MX_TIM11_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <MX_TIM11_Init+0x94>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_TIM11_Init+0x94>)
 8002894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002898:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <MX_TIM11_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <MX_TIM11_Init+0x94>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80028a6:	4815      	ldr	r0, [pc, #84]	; (80028fc <MX_TIM11_Init+0x94>)
 80028a8:	f007 fda3 	bl	800a3f2 <HAL_TIM_Base_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80028b2:	f7ff f88d 	bl	80019d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80028b6:	4811      	ldr	r0, [pc, #68]	; (80028fc <MX_TIM11_Init+0x94>)
 80028b8:	f007 fe6a 	bl	800a590 <HAL_TIM_PWM_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80028c2:	f7ff f885 	bl	80019d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c6:	2360      	movs	r3, #96	; 0x60
 80028c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	4619      	mov	r1, r3
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM11_Init+0x94>)
 80028de:	f007 ffcd 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80028e8:	f7ff f872 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM11_Init+0x94>)
 80028ee:	f000 f8cb 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 80028f2:	bf00      	nop
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000e2c 	.word	0x20000e2c
 8002900:	40014800 	.word	0x40014800

08002904 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <MX_TIM12_Init+0x84>)
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <MX_TIM12_Init+0x88>)
 8002920:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <MX_TIM12_Init+0x84>)
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <MX_TIM12_Init+0x84>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <MX_TIM12_Init+0x84>)
 8002930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002934:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_TIM12_Init+0x84>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <MX_TIM12_Init+0x84>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002942:	4811      	ldr	r0, [pc, #68]	; (8002988 <MX_TIM12_Init+0x84>)
 8002944:	f007 fe24 	bl	800a590 <HAL_TIM_PWM_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800294e:	f7ff f83f 	bl	80019d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002952:	2360      	movs	r3, #96	; 0x60
 8002954:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	4619      	mov	r1, r3
 8002968:	4807      	ldr	r0, [pc, #28]	; (8002988 <MX_TIM12_Init+0x84>)
 800296a:	f007 ff87 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002974:	f7ff f82c 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002978:	4803      	ldr	r0, [pc, #12]	; (8002988 <MX_TIM12_Init+0x84>)
 800297a:	f000 f885 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 800297e:	bf00      	nop
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000e78 	.word	0x20000e78
 800298c:	40001800 	.word	0x40001800

08002990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_TIM_Base_MspInit+0x80>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10c      	bne.n	80029bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80029ba:	e022      	b.n	8002a02 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM10)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_TIM_Base_MspInit+0x88>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10c      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
}
 80029de:	e010      	b.n	8002a02 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM11)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_TIM_Base_MspInit+0x8c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10b      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_TIM_Base_MspInit+0x84>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40014400 	.word	0x40014400
 8002a1c:	40014800 	.word	0x40014800

08002a20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10c      	bne.n	8002a4c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_TIM_PWM_MspInit+0x60>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_TIM_PWM_MspInit+0x60>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_TIM_PWM_MspInit+0x60>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002a4a:	e010      	b.n	8002a6e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM12)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_TIM_PWM_MspInit+0x64>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10b      	bne.n	8002a6e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_TIM_PWM_MspInit+0x60>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_TIM_PWM_MspInit+0x60>)
 8002a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_TIM_PWM_MspInit+0x60>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40001800 	.word	0x40001800

08002a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a44      	ldr	r2, [pc, #272]	; (8002bb8 <HAL_TIM_MspPostInit+0x130>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11d      	bne.n	8002ae6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8002ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4838      	ldr	r0, [pc, #224]	; (8002bc0 <HAL_TIM_MspPostInit+0x138>)
 8002ae0:	f002 fc7c 	bl	80053dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ae4:	e064      	b.n	8002bb0 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM10)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a36      	ldr	r2, [pc, #216]	; (8002bc4 <HAL_TIM_MspPostInit+0x13c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d11c      	bne.n	8002b2a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002af6:	f043 0320 	orr.w	r3, r3, #32
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8002b08:	2340      	movs	r3, #64	; 0x40
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	4829      	ldr	r0, [pc, #164]	; (8002bc8 <HAL_TIM_MspPostInit+0x140>)
 8002b24:	f002 fc5a 	bl	80053dc <HAL_GPIO_Init>
}
 8002b28:	e042      	b.n	8002bb0 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM11)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_TIM_MspPostInit+0x144>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d11c      	bne.n	8002b6e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	4818      	ldr	r0, [pc, #96]	; (8002bc8 <HAL_TIM_MspPostInit+0x140>)
 8002b68:	f002 fc38 	bl	80053dc <HAL_GPIO_Init>
}
 8002b6c:	e020      	b.n	8002bb0 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM12)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <HAL_TIM_MspPostInit+0x148>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_TIM_MspPostInit+0x134>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002ba0:	2309      	movs	r3, #9
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <HAL_TIM_MspPostInit+0x14c>)
 8002bac:	f002 fc16 	bl	80053dc <HAL_GPIO_Init>
}
 8002bb0:	bf00      	nop
 8002bb2:	3730      	adds	r7, #48	; 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40021400 	.word	0x40021400
 8002bcc:	40014800 	.word	0x40014800
 8002bd0:	40001800 	.word	0x40001800
 8002bd4:	40021c00 	.word	0x40021c00

08002bd8 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <MX_UART5_Init+0x58>)
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <MX_UART5_Init+0x5c>)
 8002be0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <MX_UART5_Init+0x58>)
 8002be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002be8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_UART5_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <MX_UART5_Init+0x58>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_UART5_Init+0x58>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_UART5_Init+0x58>)
 8002bfe:	220c      	movs	r2, #12
 8002c00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <MX_UART5_Init+0x58>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_UART5_Init+0x58>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <MX_UART5_Init+0x58>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_UART5_Init+0x58>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c1a:	4805      	ldr	r0, [pc, #20]	; (8002c30 <MX_UART5_Init+0x58>)
 8002c1c:	f008 fc78 	bl	800b510 <HAL_UART_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002c26:	f7fe fed3 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000ec4 	.word	0x20000ec4
 8002c34:	40005000 	.word	0x40005000

08002c38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <MX_USART1_UART_Init+0x5c>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_USART1_UART_Init+0x58>)
 8002c7c:	f008 fc48 	bl	800b510 <HAL_UART_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c86:	f7fe fea3 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000f4c 	.word	0x20000f4c
 8002c94:	40011000 	.word	0x40011000

08002c98 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <MX_USART6_UART_Init+0x5c>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ca8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_USART6_UART_Init+0x58>)
 8002cdc:	f008 fc18 	bl	800b510 <HAL_UART_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002ce6:	f7fe fe73 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000fd4 	.word	0x20000fd4
 8002cf4:	40011400 	.word	0x40011400

08002cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0b2      	sub	sp, #200	; 0xc8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	2290      	movs	r2, #144	; 0x90
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00b fdad 	bl	800e878 <memset>
  if(uartHandle->Instance==UART5)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7f      	ldr	r2, [pc, #508]	; (8002f20 <HAL_UART_MspInit+0x228>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d15e      	bne.n	8002de6 <HAL_UART_MspInit+0xee>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f005 ff62 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d42:	f7fe fe45 	bl	80019d0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d46:	4b77      	ldr	r3, [pc, #476]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a76      	ldr	r2, [pc, #472]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5e:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a70      	ldr	r2, [pc, #448]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d76:	4b6b      	ldr	r3, [pc, #428]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002da8:	2308      	movs	r3, #8
 8002daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002dae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002db2:	4619      	mov	r1, r3
 8002db4:	485c      	ldr	r0, [pc, #368]	; (8002f28 <HAL_UART_MspInit+0x230>)
 8002db6:	f002 fb11 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4853      	ldr	r0, [pc, #332]	; (8002f2c <HAL_UART_MspInit+0x234>)
 8002de0:	f002 fafc 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002de4:	e098      	b.n	8002f18 <HAL_UART_MspInit+0x220>
  else if(uartHandle->Instance==USART1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a51      	ldr	r2, [pc, #324]	; (8002f30 <HAL_UART_MspInit+0x238>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d152      	bne.n	8002e96 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002df0:	2340      	movs	r3, #64	; 0x40
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002df4:	2300      	movs	r3, #0
 8002df6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 feff 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002e08:	f7fe fde2 	bl	80019d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	6453      	str	r3, [r2, #68]	; 0x44
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4a3e      	ldr	r2, [pc, #248]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e30:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e56:	2307      	movs	r3, #7
 8002e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4834      	ldr	r0, [pc, #208]	; (8002f34 <HAL_UART_MspInit+0x23c>)
 8002e64:	f002 faba 	bl	80053dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e82:	2307      	movs	r3, #7
 8002e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4829      	ldr	r0, [pc, #164]	; (8002f34 <HAL_UART_MspInit+0x23c>)
 8002e90:	f002 faa4 	bl	80053dc <HAL_GPIO_Init>
}
 8002e94:	e040      	b.n	8002f18 <HAL_UART_MspInit+0x220>
  else if(uartHandle->Instance==USART6)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_UART_MspInit+0x240>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d13b      	bne.n	8002f18 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f005 fea6 	bl	8008c00 <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002eba:	f7fe fd89 	bl	80019d0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_UART_MspInit+0x22c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002eee:	23c0      	movs	r3, #192	; 0xc0
 8002ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f06:	2308      	movs	r3, #8
 8002f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <HAL_UART_MspInit+0x230>)
 8002f14:	f002 fa62 	bl	80053dc <HAL_GPIO_Init>
}
 8002f18:	bf00      	nop
 8002f1a:	37c8      	adds	r7, #200	; 0xc8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40005000 	.word	0x40005000
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40011400 	.word	0x40011400

08002f3c <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <MX_USB_OTG_HS_PCD_Init+0x60>)
 8002f44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f48:	2209      	movs	r2, #9
 8002f4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002f84:	f003 ff6e 	bl	8006e64 <HAL_PCD_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8002f8e:	f7fe fd1f 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000105c 	.word	0x2000105c
 8002f9c:	40040000 	.word	0x40040000

08002fa0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08e      	sub	sp, #56	; 0x38
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <HAL_PCD_MspInit+0x188>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	f040 80ae 	bne.w	8003120 <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd0:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ff4:	4b4d      	ldr	r3, [pc, #308]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4a4c      	ldr	r2, [pc, #304]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8002ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8003000:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800300c:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_PCD_MspInit+0x18c>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4a46      	ldr	r2, [pc, #280]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	6313      	str	r3, [r2, #48]	; 0x30
 8003018:	4b44      	ldr	r3, [pc, #272]	; (800312c <HAL_PCD_MspInit+0x18c>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	4a40      	ldr	r2, [pc, #256]	; (800312c <HAL_PCD_MspInit+0x18c>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6313      	str	r3, [r2, #48]	; 0x30
 8003030:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800303c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800304e:	230a      	movs	r3, #10
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003056:	4619      	mov	r1, r3
 8003058:	4835      	ldr	r0, [pc, #212]	; (8003130 <HAL_PCD_MspInit+0x190>)
 800305a:	f002 f9bf 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800305e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003070:	230a      	movs	r3, #10
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	482e      	ldr	r0, [pc, #184]	; (8003134 <HAL_PCD_MspInit+0x194>)
 800307c:	f002 f9ae 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003080:	2310      	movs	r3, #16
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003090:	230a      	movs	r3, #10
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003098:	4619      	mov	r1, r3
 800309a:	4827      	ldr	r0, [pc, #156]	; (8003138 <HAL_PCD_MspInit+0x198>)
 800309c:	f002 f99e 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80030a0:	2301      	movs	r3, #1
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030b0:	230a      	movs	r3, #10
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80030b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b8:	4619      	mov	r1, r3
 80030ba:	4820      	ldr	r0, [pc, #128]	; (800313c <HAL_PCD_MspInit+0x19c>)
 80030bc:	f002 f98e 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80030c0:	2328      	movs	r3, #40	; 0x28
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030d0:	230a      	movs	r3, #10
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d8:	4619      	mov	r1, r3
 80030da:	4819      	ldr	r0, [pc, #100]	; (8003140 <HAL_PCD_MspInit+0x1a0>)
 80030dc:	f002 f97e 	bl	80053dc <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_PCD_MspInit+0x18c>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4a11      	ldr	r2, [pc, #68]	; (800312c <HAL_PCD_MspInit+0x18c>)
 80030e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030ea:	6313      	str	r3, [r2, #48]	; 0x30
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_PCD_MspInit+0x18c>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_PCD_MspInit+0x18c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a0b      	ldr	r2, [pc, #44]	; (800312c <HAL_PCD_MspInit+0x18c>)
 80030fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_PCD_MspInit+0x18c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2105      	movs	r1, #5
 8003114:	204d      	movs	r0, #77	; 0x4d
 8003116:	f000 fd77 	bl	8003c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800311a:	204d      	movs	r0, #77	; 0x4d
 800311c:	f000 fd90 	bl	8003c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8003120:	bf00      	nop
 8003122:	3738      	adds	r7, #56	; 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40040000 	.word	0x40040000
 800312c:	40023800 	.word	0x40023800
 8003130:	40020400 	.word	0x40020400
 8003134:	40022000 	.word	0x40022000
 8003138:	40021c00 	.word	0x40021c00
 800313c:	40020800 	.word	0x40020800
 8003140:	40020000 	.word	0x40020000

08003144 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <MX_WWDG_Init+0x38>)
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <MX_WWDG_Init+0x3c>)
 800314c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <MX_WWDG_Init+0x38>)
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <MX_WWDG_Init+0x38>)
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 128;
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <MX_WWDG_Init+0x38>)
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <MX_WWDG_Init+0x38>)
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8003166:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_WWDG_Init+0x38>)
 8003168:	f008 fe39 	bl	800bdde <HAL_WWDG_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8003172:	f7fe fc2d 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20001564 	.word	0x20001564
 8003180:	40002c00 	.word	0x40002c00

08003184 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_WWDG_MspInit+0x38>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10b      	bne.n	80031ae <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_WWDG_MspInit+0x3c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_WWDG_MspInit+0x3c>)
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <HAL_WWDG_MspInit+0x3c>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40002c00 	.word	0x40002c00
 80031c0:	40023800 	.word	0x40023800

080031c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ca:	490e      	ldr	r1, [pc, #56]	; (8003204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d0:	e002      	b.n	80031d8 <LoopCopyDataInit>

080031d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031d6:	3304      	adds	r3, #4

080031d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031dc:	d3f9      	bcc.n	80031d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031de:	4a0b      	ldr	r2, [pc, #44]	; (800320c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e0:	4c0b      	ldr	r4, [pc, #44]	; (8003210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e4:	e001      	b.n	80031ea <LoopFillZerobss>

080031e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e8:	3204      	adds	r2, #4

080031ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ec:	d3fb      	bcc.n	80031e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031ee:	f7ff fa2d 	bl	800264c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f2:	f00b fb1d 	bl	800e830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f6:	f7fe fae3 	bl	80017c0 <main>
  bx  lr    
 80031fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003204:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003208:	0800e8f8 	.word	0x0800e8f8
  ldr r2, =_sbss
 800320c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003210:	200096c8 	.word	0x200096c8

08003214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC_IRQHandler>

08003216 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321a:	2003      	movs	r0, #3
 800321c:	f000 fce9 	bl	8003bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff f947 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003226:	f7ff f91d 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_IncTick+0x20>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x24>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4413      	add	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_IncTick+0x24>)
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000008 	.word	0x20000008
 8003254:	20001578 	.word	0x20001578

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20001578 	.word	0x20001578

08003270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff ffee 	bl	8003258 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d005      	beq.n	8003296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_Delay+0x44>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003296:	bf00      	nop
 8003298:	f7ff ffde 	bl	8003258 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d8f7      	bhi.n	8003298 <HAL_Delay+0x28>
  {
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008

080032b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e031      	b.n	8003332 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd f9d8 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_ADC_Init+0x84>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	f043 0202 	orr.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f970 	bl	80035ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
 8003322:	e001      	b.n	8003328 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	ffffeefd 	.word	0xffffeefd

08003340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e136      	b.n	80035ca <HAL_ADC_ConfigChannel+0x28a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d93a      	bls.n	80033e2 <HAL_ADC_ConfigChannel+0xa2>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003374:	d035      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68d9      	ldr	r1, [r3, #12]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	3b1e      	subs	r3, #30
 800338c:	2207      	movs	r2, #7
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	400a      	ands	r2, r1
 800339a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a8d      	ldr	r2, [pc, #564]	; (80035d8 <HAL_ADC_ConfigChannel+0x298>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10a      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	061a      	lsls	r2, r3, #24
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ba:	e035      	b.n	8003428 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68d9      	ldr	r1, [r3, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4403      	add	r3, r0
 80033d4:	3b1e      	subs	r3, #30
 80033d6:	409a      	lsls	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e0:	e022      	b.n	8003428 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6919      	ldr	r1, [r3, #16]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	2207      	movs	r2, #7
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43da      	mvns	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	400a      	ands	r2, r1
 8003404:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6919      	ldr	r1, [r3, #16]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	4618      	mov	r0, r3
 8003418:	4603      	mov	r3, r0
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4403      	add	r3, r0
 800341e:	409a      	lsls	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b06      	cmp	r3, #6
 800342e:	d824      	bhi.n	800347a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b05      	subs	r3, #5
 8003442:	221f      	movs	r2, #31
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43da      	mvns	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	400a      	ands	r2, r1
 8003450:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	4618      	mov	r0, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	3b05      	subs	r3, #5
 800346c:	fa00 f203 	lsl.w	r2, r0, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	635a      	str	r2, [r3, #52]	; 0x34
 8003478:	e04c      	b.n	8003514 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d824      	bhi.n	80034cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	3b23      	subs	r3, #35	; 0x23
 8003494:	221f      	movs	r2, #31
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	400a      	ands	r2, r1
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3b23      	subs	r3, #35	; 0x23
 80034be:	fa00 f203 	lsl.w	r2, r0, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
 80034ca:	e023      	b.n	8003514 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	3b41      	subs	r3, #65	; 0x41
 80034de:	221f      	movs	r2, #31
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43da      	mvns	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	400a      	ands	r2, r1
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b41      	subs	r3, #65	; 0x41
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a30      	ldr	r2, [pc, #192]	; (80035dc <HAL_ADC_ConfigChannel+0x29c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10a      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1f4>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003526:	d105      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800352e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003532:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <HAL_ADC_ConfigChannel+0x29c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10f      	bne.n	800355e <HAL_ADC_ConfigChannel+0x21e>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b12      	cmp	r3, #18
 8003544:	d10b      	bne.n	800355e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800354c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003550:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800355c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_ADC_ConfigChannel+0x29c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d12b      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x280>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <HAL_ADC_ConfigChannel+0x298>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <HAL_ADC_ConfigChannel+0x23a>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b11      	cmp	r3, #17
 8003578:	d122      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003580:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003584:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800358c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003590:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_ADC_ConfigChannel+0x298>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d111      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_ADC_ConfigChannel+0x2a4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a8>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0c9a      	lsrs	r2, r3, #18
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035b2:	e002      	b.n	80035ba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f9      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	10000012 	.word	0x10000012
 80035dc:	40012000 	.word	0x40012000
 80035e0:	40012300 	.word	0x40012300
 80035e4:	20000000 	.word	0x20000000
 80035e8:	431bde83 	.word	0x431bde83

080035ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035f4:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <ADC_Init+0x1ec>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a77      	ldr	r2, [pc, #476]	; (80037d8 <ADC_Init+0x1ec>)
 80035fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80035fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003600:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <ADC_Init+0x1ec>)
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4973      	ldr	r1, [pc, #460]	; (80037d8 <ADC_Init+0x1ec>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	4a58      	ldr	r2, [pc, #352]	; (80037dc <ADC_Init+0x1f0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800368e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e00f      	b.n	80036e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0202 	bic.w	r2, r2, #2
 80036f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	3b01      	subs	r3, #1
 8003740:	035a      	lsls	r2, r3, #13
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e007      	b.n	800375c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	3b01      	subs	r3, #1
 8003778:	051a      	lsls	r2, r3, #20
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800379e:	025a      	lsls	r2, r3, #9
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	029a      	lsls	r2, r3, #10
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012300 	.word	0x40012300
 80037dc:	0f000001 	.word	0x0f000001

080037e0 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_CEC_Init+0x16>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e04f      	b.n	800389a <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fd62 	bl	80012d4 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 800383a:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8003846:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 800384c:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8003860:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8003862:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6959      	ldr	r1, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003872:	430b      	orrs	r3, r1
 8003874:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d0:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2222      	movs	r2, #34	; 0x22
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e6:	3301      	adds	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01e      	beq.n	800395e <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0202 	orr.w	r2, r2, #2
 800392e:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003944:	425b      	negs	r3, r3
 8003946:	441a      	add	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f88b 	bl	8003a6e <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d024      	beq.n	80039b2 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0204 	orr.w	r2, r2, #4
 800398a:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b0:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d014      	beq.n	80039e6 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ca:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f83a 	bl	8003a5a <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f641 437c 	movw	r3, #7292	; 0x1c7c
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d02f      	beq.n	8003a52 <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6919      	ldr	r1, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8003a06:	430b      	orrs	r3, r1
 8003a08:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a30:	e00c      	b.n	8003a4c <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <HAL_CEC_IRQHandler+0x1aa>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f819 	bl	8003a84 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00
 8003adc:	05fa0000 	.word	0x05fa0000

08003ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 0307 	and.w	r3, r3, #7
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0b      	blt.n	8003b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <__NVIC_EnableIRQ+0x38>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	; (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ff4c 	bl	8003a98 <__NVIC_SetPriorityGrouping>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c1a:	f7ff ff61 	bl	8003ae0 <__NVIC_GetPriorityGrouping>
 8003c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	f7ff ffb1 	bl	8003b8c <NVIC_EncodePriority>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff80 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ff54 	bl	8003afc <__NVIC_EnableIRQ>
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e054      	b.n	8003d18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7f5b      	ldrb	r3, [r3, #29]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fc fdae 	bl	80007e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_CRC_Init+0xc4>)
 8003c98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0218 	bic.w	r2, r2, #24
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	e00c      	b.n	8003cc6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f834 	bl	8003d24 <HAL_CRCEx_Polynomial_Set>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e028      	b.n	8003d18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	795b      	ldrb	r3, [r3, #5]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	e004      	b.n	8003ce4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6912      	ldr	r2, [r2, #16]
 8003ce2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	04c11db7 	.word	0x04c11db7

08003d24 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d34:	231f      	movs	r3, #31
 8003d36:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d38:	bf00      	nop
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	613a      	str	r2, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_CRCEx_Polynomial_Set+0x34>
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b18      	cmp	r3, #24
 8003d5c:	d846      	bhi.n	8003dec <HAL_CRCEx_Polynomial_Set+0xc8>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003df3 	.word	0x08003df3
 8003d68:	08003ded 	.word	0x08003ded
 8003d6c:	08003ded 	.word	0x08003ded
 8003d70:	08003ded 	.word	0x08003ded
 8003d74:	08003ded 	.word	0x08003ded
 8003d78:	08003ded 	.word	0x08003ded
 8003d7c:	08003ded 	.word	0x08003ded
 8003d80:	08003ded 	.word	0x08003ded
 8003d84:	08003de1 	.word	0x08003de1
 8003d88:	08003ded 	.word	0x08003ded
 8003d8c:	08003ded 	.word	0x08003ded
 8003d90:	08003ded 	.word	0x08003ded
 8003d94:	08003ded 	.word	0x08003ded
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003ded 	.word	0x08003ded
 8003da0:	08003ded 	.word	0x08003ded
 8003da4:	08003dd5 	.word	0x08003dd5
 8003da8:	08003ded 	.word	0x08003ded
 8003dac:	08003ded 	.word	0x08003ded
 8003db0:	08003ded 	.word	0x08003ded
 8003db4:	08003ded 	.word	0x08003ded
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003ded 	.word	0x08003ded
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003dc9 	.word	0x08003dc9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d913      	bls.n	8003df6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003dd2:	e010      	b.n	8003df6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b07      	cmp	r3, #7
 8003dd8:	d90f      	bls.n	8003dfa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	d90b      	bls.n	8003dfe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003dea:	e008      	b.n	8003dfe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
      break;
 8003df0:	e006      	b.n	8003e00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003dfe:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 0118 	bic.w	r1, r3, #24
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e049      	b.n	8003ed6 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fd1a 	bl	8000890 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	f023 0107 	bic.w	r1, r3, #7
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_DMA2D_Init+0xb0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d1      	ldr	r1, [r2, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	051a      	lsls	r2, r3, #20
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	055b      	lsls	r3, r3, #21
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	ffffc000 	.word	0xffffc000

08003ee4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d026      	beq.n	8003f54 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d021      	beq.n	8003f54 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2204      	movs	r2, #4
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d026      	beq.n	8003fac <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d021      	beq.n	8003fac <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f76:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0202 	orr.w	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d026      	beq.n	8004004 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d021      	beq.n	8004004 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d013      	beq.n	8004036 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2204      	movs	r2, #4
 800402e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f853 	bl	80040dc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d024      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01f      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2202      	movs	r2, #2
 8004060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01f      	beq.n	80040d4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01a      	beq.n	80040d4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f80e 	bl	80040f0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_DMA2D_ConfigLayer+0x20>
 8004120:	2302      	movs	r3, #2
 8004122:	e084      	b.n	800422e <HAL_DMA2D_ConfigLayer+0x12a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	3320      	adds	r3, #32
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004158:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_DMA2D_ConfigLayer+0x138>)
 8004166:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b0a      	cmp	r3, #10
 800416e:	d003      	beq.n	8004178 <HAL_DMA2D_ConfigLayer+0x74>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b09      	cmp	r3, #9
 8004176:	d107      	bne.n	8004188 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e005      	b.n	8004194 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d120      	bne.n	80041dc <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	ea02 0103 	and.w	r1, r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b0a      	cmp	r3, #10
 80041c2:	d003      	beq.n	80041cc <HAL_DMA2D_ConfigLayer+0xc8>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d127      	bne.n	800421c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
 80041da:	e01f      	b.n	800421c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	ea02 0103 	and.w	r1, r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b0a      	cmp	r3, #10
 8004204:	d003      	beq.n	800420e <HAL_DMA2D_ConfigLayer+0x10a>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b09      	cmp	r3, #9
 800420c:	d106      	bne.n	800421c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800421a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	ff33000f 	.word	0xff33000f

08004240 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e109      	b.n	8004468 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	7c5b      	ldrb	r3, [r3, #17]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fc3c 	bl	8000adc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2203      	movs	r2, #3
 8004268:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800427e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800428a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004292:	f7fe ffe1 	bl	8003258 <HAL_GetTick>
 8004296:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004298:	e009      	b.n	80042ae <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800429a:	f7fe ffdd 	bl	8003258 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a8:	d901      	bls.n	80042ae <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0dc      	b.n	8004468 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80042b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ed      	beq.n	800429a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b69      	ldr	r3, [pc, #420]	; (8004470 <HAL_DSI_Init+0x230>)
 80042cc:	400b      	ands	r3, r1
 80042ce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042e6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80042ee:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004322:	2001      	movs	r0, #1
 8004324:	f7fe ffa4 	bl	8003270 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004328:	f7fe ff96 	bl	8003258 <HAL_GetTick>
 800432c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800432e:	e009      	b.n	8004344 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004330:	f7fe ff92 	bl	8003258 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800433e:	d901      	bls.n	8004344 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e091      	b.n	8004468 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ed      	beq.n	8004330 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0206 	orr.w	r2, r2, #6
 8004364:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0203 	bic.w	r2, r2, #3
 8004378:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0203 	bic.w	r2, r2, #3
 80043a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ce:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6899      	ldr	r1, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_DSI_Init+0x1b0>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	e000      	b.n	80043f2 <HAL_DSI_Init+0x1b2>
 80043f0:	2301      	movs	r3, #1
 80043f2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_DSI_Init+0x234>)
 80043f8:	fb03 f202 	mul.w	r2, r3, r2
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	409a      	lsls	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004428:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	430a      	orrs	r2, r1
 800443c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2200      	movs	r2, #0
 8004446:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	fffc8603 	.word	0xfffc8603
 8004474:	003d0900 	.word	0x003d0900

08004478 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7c1b      	ldrb	r3, [r3, #16]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_DSI_ConfigErrorMonitor+0x16>
 800448a:	2302      	movs	r3, #2
 800448c:	e0aa      	b.n	80045e4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c8:	430b      	orrs	r3, r1
 80044ca:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80044e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0202 	orr.w	r2, r2, #2
 8004524:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 020c 	orr.w	r2, r2, #12
 8004542:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0210 	orr.w	r2, r2, #16
 8004560:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0220 	orr.w	r2, r2, #32
 800457e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80045d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00f      	beq.n	8004628 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8ad 	bl	8004782 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00f      	beq.n	8004658 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2202      	movs	r2, #2
 800464e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f89f 	bl	8004796 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 808c 	beq.w	800477a <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800466a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004682:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4013      	ands	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f043 0202 	orr.w	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f043 0208 	orr.w	r2, r3, #8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f818 	bl	80047aa <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7c1b      	ldrb	r3, [r3, #16]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_DSI_SetGenericVCID+0x16>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e016      	b.n	8004802 <HAL_DSI_SetGenericVCID+0x44>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0203 	bic.w	r2, r2, #3
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7c1b      	ldrb	r3, [r3, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004822:	2302      	movs	r3, #2
 8004824:	e0c5      	b.n	80049b2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0203 	bic.w	r2, r2, #3
 8004872:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0207 	bic.w	r2, r2, #7
 8004894:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6959      	ldr	r1, [r3, #20]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 020f 	bic.w	r2, r2, #15
 80048c2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6919      	ldr	r1, [r3, #16]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020e 	bic.w	r2, r2, #14
 80048e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005a      	lsls	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800490e:	400b      	ands	r3, r1
 8004910:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004934:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0202 	orr.w	r2, r2, #2
 80049a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	ffff0000 	.word	0xffff0000

080049c4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7c1b      	ldrb	r3, [r3, #16]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_DSI_ConfigCommand+0x16>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e049      	b.n	8004a6e <HAL_DSI_ConfigCommand+0xaa>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_DSI_ConfigCommand+0xb8>)
 80049ec:	400b      	ands	r3, r1
 80049ee:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004a04:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004a0a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004a10:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004a16:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004a1c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004a22:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a28:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004a2e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004a34:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004a3a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0202 	bic.w	r2, r2, #2
 8004a52:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	fef080ff 	.word	0xfef080ff

08004a80 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7c1b      	ldrb	r3, [r3, #16]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_DSI_ConfigFlowControl+0x16>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e016      	b.n	8004ac4 <HAL_DSI_ConfigFlowControl+0x44>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 021f 	bic.w	r2, r2, #31
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7c1b      	ldrb	r3, [r3, #16]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DSI_ConfigPhyTimer+0x16>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e058      	b.n	8004b98 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bf38      	it	cc
 8004af8:	4613      	movcc	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004b0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	041a      	lsls	r2, r3, #16
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004b3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7c1b      	ldrb	r3, [r3, #16]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_DSI_ConfigHostTimeouts+0x16>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0b4      	b.n	8004d24 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004bce:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6899      	ldr	r1, [r3, #8]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b47      	ldr	r3, [pc, #284]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c12:	400b      	ands	r3, r1
 8004c14:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b3f      	ldr	r3, [pc, #252]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c34:	400b      	ands	r3, r1
 8004c36:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c58:	400b      	ands	r3, r1
 8004c5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d00:	400b      	ands	r3, r1
 8004d02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a1a      	ldr	r2, [r3, #32]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	ffff0000 	.word	0xffff0000

08004d34 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	7c1b      	ldrb	r3, [r3, #16]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e01b      	b.n	8004d82 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004d60:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	065a      	lsls	r2, r3, #25
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06a      	b.n	8004e78 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2223      	movs	r2, #35	; 0x23
 8004db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fb ff2b 	bl	8000c10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <HAL_ETH_Init+0xf0>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <HAL_ETH_Init+0xf0>)
 8004dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc6:	4b2e      	ldr	r3, [pc, #184]	; (8004e80 <HAL_ETH_Init+0xf0>)
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_ETH_Init+0xf4>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <HAL_ETH_Init+0xf4>)
 8004dd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ddc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004dde:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <HAL_ETH_Init+0xf4>)
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4927      	ldr	r1, [pc, #156]	; (8004e84 <HAL_ETH_Init+0xf4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_ETH_Init+0xf4>)
 8004dee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e08:	f7fe fa26 	bl	8003258 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004e0e:	e011      	b.n	8004e34 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004e10:	f7fe fa22 	bl	8003258 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e1e:	d909      	bls.n	8004e34 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2204      	movs	r2, #4
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	22e0      	movs	r2, #224	; 0xe0
 8004e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e021      	b.n	8004e78 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e4      	bne.n	8004e10 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f958 	bl	80050fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9ff 	bl	8005250 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa55 	bl	8005302 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f9bd 	bl	80051e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2210      	movs	r2, #16
 8004e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40013800 	.word	0x40013800

08004e88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4b51      	ldr	r3, [pc, #324]	; (8004fe4 <ETH_SetMACConfig+0x15c>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	7c1b      	ldrb	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <ETH_SetMACConfig+0x28>
 8004eaa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004eae:	e000      	b.n	8004eb2 <ETH_SetMACConfig+0x2a>
 8004eb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	7c5b      	ldrb	r3, [r3, #17]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <ETH_SetMACConfig+0x38>
 8004eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ebe:	e000      	b.n	8004ec2 <ETH_SetMACConfig+0x3a>
 8004ec0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ec2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ec8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	7fdb      	ldrb	r3, [r3, #31]
 8004ece:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004ed0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004ed6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	7f92      	ldrb	r2, [r2, #30]
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d102      	bne.n	8004ee6 <ETH_SetMACConfig+0x5e>
 8004ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ee4:	e000      	b.n	8004ee8 <ETH_SetMACConfig+0x60>
 8004ee6:	2200      	movs	r2, #0
                        macconf->Speed |
 8004ee8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	7f1b      	ldrb	r3, [r3, #28]
 8004eee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ef0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ef6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004efe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d102      	bne.n	8004f10 <ETH_SetMACConfig+0x88>
 8004f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f0e:	e000      	b.n	8004f12 <ETH_SetMACConfig+0x8a>
 8004f10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	7bdb      	ldrb	r3, [r3, #15]
 8004f18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fe f994 	bl	8003270 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	d101      	bne.n	8004f76 <ETH_SetMACConfig+0xee>
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	e000      	b.n	8004f78 <ETH_SetMACConfig+0xf0>
 8004f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004f86:	2a01      	cmp	r2, #1
 8004f88:	d101      	bne.n	8004f8e <ETH_SetMACConfig+0x106>
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	e000      	b.n	8004f90 <ETH_SetMACConfig+0x108>
 8004f8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004f90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004f98:	2a01      	cmp	r2, #1
 8004f9a:	d101      	bne.n	8004fa0 <ETH_SetMACConfig+0x118>
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	e000      	b.n	8004fa2 <ETH_SetMACConfig+0x11a>
 8004fa0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004faa:	2a01      	cmp	r2, #1
 8004fac:	d101      	bne.n	8004fb2 <ETH_SetMACConfig+0x12a>
 8004fae:	2202      	movs	r2, #2
 8004fb0:	e000      	b.n	8004fb4 <ETH_SetMACConfig+0x12c>
 8004fb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f7fe f94f 	bl	8003270 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	619a      	str	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	ff20810f 	.word	0xff20810f

08004fe8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <ETH_SetDMAConfig+0x110>)
 8005002:	4013      	ands	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	7b1b      	ldrb	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <ETH_SetDMAConfig+0x2c>
 800500e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005012:	e000      	b.n	8005016 <ETH_SetDMAConfig+0x2e>
 8005014:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	7b5b      	ldrb	r3, [r3, #13]
 800501a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800501c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	7f52      	ldrb	r2, [r2, #29]
 8005022:	2a00      	cmp	r2, #0
 8005024:	d102      	bne.n	800502c <ETH_SetDMAConfig+0x44>
 8005026:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800502a:	e000      	b.n	800502e <ETH_SetDMAConfig+0x46>
 800502c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800502e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	7b9b      	ldrb	r3, [r3, #14]
 8005034:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005036:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800503c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	7f1b      	ldrb	r3, [r3, #28]
 8005042:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005044:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	7f9b      	ldrb	r3, [r3, #30]
 800504a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800504c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005052:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800505a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800505c:	4313      	orrs	r3, r2
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506c:	461a      	mov	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800507e:	2001      	movs	r0, #1
 8005080:	f7fe f8f6 	bl	8003270 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508c:	461a      	mov	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	791b      	ldrb	r3, [r3, #4]
 8005096:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800509c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80050a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80050a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80050b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80050ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80050c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fe f8c7 	bl	8003270 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	f8de3f23 	.word	0xf8de3f23

080050fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b0a6      	sub	sp, #152	; 0x98
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005110:	2300      	movs	r3, #0
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005138:	2300      	movs	r3, #0
 800513a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800513c:	2300      	movs	r3, #0
 800513e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005142:	2300      	movs	r3, #0
 8005144:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005152:	2300      	movs	r3, #0
 8005154:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800515e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005162:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005168:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005170:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fe86 	bl	8004e88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800517c:	2301      	movs	r3, #1
 800517e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005180:	2301      	movs	r3, #1
 8005182:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800518a:	2301      	movs	r3, #1
 800518c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800519e:	2300      	movs	r3, #0
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80051ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff ff08 	bl	8004fe8 <ETH_SetDMAConfig>
}
 80051d8:	bf00      	nop
 80051da:	3798      	adds	r7, #152	; 0x98
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3305      	adds	r3, #5
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	3204      	adds	r2, #4
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <ETH_MACAddressConfig+0x68>)
 8005202:	4413      	add	r3, r2
 8005204:	461a      	mov	r2, r3
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3303      	adds	r3, #3
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	061a      	lsls	r2, r3, #24
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3302      	adds	r3, #2
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3301      	adds	r3, #1
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	4313      	orrs	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <ETH_MACAddressConfig+0x6c>)
 8005232:	4413      	add	r3, r2
 8005234:	461a      	mov	r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	6013      	str	r3, [r2, #0]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40028040 	.word	0x40028040
 800524c:	40028044 	.word	0x40028044

08005250 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e03e      	b.n	80052dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68d9      	ldr	r1, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	440b      	add	r3, r1
 800526e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	3206      	adds	r2, #6
 8005290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d80c      	bhi.n	80052c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68d9      	ldr	r1, [r3, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	e004      	b.n	80052ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	461a      	mov	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d9bd      	bls.n	800525e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f4:	611a      	str	r2, [r3, #16]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e046      	b.n	800539e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6919      	ldr	r1, [r3, #16]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800534c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005354:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	3212      	adds	r2, #18
 800536a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d80c      	bhi.n	800538e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6919      	ldr	r1, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	440b      	add	r3, r1
 8005386:	461a      	mov	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	60da      	str	r2, [r3, #12]
 800538c:	e004      	b.n	8005398 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d9b5      	bls.n	8005310 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ce:	60da      	str	r2, [r3, #12]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	e175      	b.n	80056e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80053fc:	2201      	movs	r2, #1
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	429a      	cmp	r2, r3
 8005416:	f040 8164 	bne.w	80056e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d005      	beq.n	8005432 <HAL_GPIO_Init+0x56>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d130      	bne.n	8005494 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2203      	movs	r2, #3
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005468:	2201      	movs	r2, #1
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f003 0201 	and.w	r2, r3, #1
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4313      	orrs	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	2b03      	cmp	r3, #3
 800549e:	d017      	beq.n	80054d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	2203      	movs	r2, #3
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4013      	ands	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d123      	bne.n	8005524 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	08da      	lsrs	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3208      	adds	r2, #8
 80054e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	220f      	movs	r2, #15
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4013      	ands	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	08da      	lsrs	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3208      	adds	r2, #8
 800551e:	69b9      	ldr	r1, [r7, #24]
 8005520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	2203      	movs	r2, #3
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4013      	ands	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 0203 	and.w	r2, r3, #3
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4313      	orrs	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80be 	beq.w	80056e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005566:	4b66      	ldr	r3, [pc, #408]	; (8005700 <HAL_GPIO_Init+0x324>)
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	4a65      	ldr	r2, [pc, #404]	; (8005700 <HAL_GPIO_Init+0x324>)
 800556c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005570:	6453      	str	r3, [r2, #68]	; 0x44
 8005572:	4b63      	ldr	r3, [pc, #396]	; (8005700 <HAL_GPIO_Init+0x324>)
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800557e:	4a61      	ldr	r2, [pc, #388]	; (8005704 <HAL_GPIO_Init+0x328>)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	089b      	lsrs	r3, r3, #2
 8005584:	3302      	adds	r3, #2
 8005586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800558a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	220f      	movs	r2, #15
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a58      	ldr	r2, [pc, #352]	; (8005708 <HAL_GPIO_Init+0x32c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d037      	beq.n	800561a <HAL_GPIO_Init+0x23e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a57      	ldr	r2, [pc, #348]	; (800570c <HAL_GPIO_Init+0x330>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d031      	beq.n	8005616 <HAL_GPIO_Init+0x23a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a56      	ldr	r2, [pc, #344]	; (8005710 <HAL_GPIO_Init+0x334>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d02b      	beq.n	8005612 <HAL_GPIO_Init+0x236>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a55      	ldr	r2, [pc, #340]	; (8005714 <HAL_GPIO_Init+0x338>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d025      	beq.n	800560e <HAL_GPIO_Init+0x232>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a54      	ldr	r2, [pc, #336]	; (8005718 <HAL_GPIO_Init+0x33c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01f      	beq.n	800560a <HAL_GPIO_Init+0x22e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a53      	ldr	r2, [pc, #332]	; (800571c <HAL_GPIO_Init+0x340>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d019      	beq.n	8005606 <HAL_GPIO_Init+0x22a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a52      	ldr	r2, [pc, #328]	; (8005720 <HAL_GPIO_Init+0x344>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_GPIO_Init+0x226>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a51      	ldr	r2, [pc, #324]	; (8005724 <HAL_GPIO_Init+0x348>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00d      	beq.n	80055fe <HAL_GPIO_Init+0x222>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a50      	ldr	r2, [pc, #320]	; (8005728 <HAL_GPIO_Init+0x34c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <HAL_GPIO_Init+0x21e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a4f      	ldr	r2, [pc, #316]	; (800572c <HAL_GPIO_Init+0x350>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d101      	bne.n	80055f6 <HAL_GPIO_Init+0x21a>
 80055f2:	2309      	movs	r3, #9
 80055f4:	e012      	b.n	800561c <HAL_GPIO_Init+0x240>
 80055f6:	230a      	movs	r3, #10
 80055f8:	e010      	b.n	800561c <HAL_GPIO_Init+0x240>
 80055fa:	2308      	movs	r3, #8
 80055fc:	e00e      	b.n	800561c <HAL_GPIO_Init+0x240>
 80055fe:	2307      	movs	r3, #7
 8005600:	e00c      	b.n	800561c <HAL_GPIO_Init+0x240>
 8005602:	2306      	movs	r3, #6
 8005604:	e00a      	b.n	800561c <HAL_GPIO_Init+0x240>
 8005606:	2305      	movs	r3, #5
 8005608:	e008      	b.n	800561c <HAL_GPIO_Init+0x240>
 800560a:	2304      	movs	r3, #4
 800560c:	e006      	b.n	800561c <HAL_GPIO_Init+0x240>
 800560e:	2303      	movs	r3, #3
 8005610:	e004      	b.n	800561c <HAL_GPIO_Init+0x240>
 8005612:	2302      	movs	r3, #2
 8005614:	e002      	b.n	800561c <HAL_GPIO_Init+0x240>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <HAL_GPIO_Init+0x240>
 800561a:	2300      	movs	r3, #0
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	f002 0203 	and.w	r2, r2, #3
 8005622:	0092      	lsls	r2, r2, #2
 8005624:	4093      	lsls	r3, r2
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800562c:	4935      	ldr	r1, [pc, #212]	; (8005704 <HAL_GPIO_Init+0x328>)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	089b      	lsrs	r3, r3, #2
 8005632:	3302      	adds	r3, #2
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800563a:	4b3d      	ldr	r3, [pc, #244]	; (8005730 <HAL_GPIO_Init+0x354>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800565e:	4a34      	ldr	r2, [pc, #208]	; (8005730 <HAL_GPIO_Init+0x354>)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <HAL_GPIO_Init+0x354>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005688:	4a29      	ldr	r2, [pc, #164]	; (8005730 <HAL_GPIO_Init+0x354>)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800568e:	4b28      	ldr	r3, [pc, #160]	; (8005730 <HAL_GPIO_Init+0x354>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056b2:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <HAL_GPIO_Init+0x354>)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <HAL_GPIO_Init+0x354>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056dc:	4a14      	ldr	r2, [pc, #80]	; (8005730 <HAL_GPIO_Init+0x354>)
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b0f      	cmp	r3, #15
 80056ec:	f67f ae86 	bls.w	80053fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	3724      	adds	r7, #36	; 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
 8005704:	40013800 	.word	0x40013800
 8005708:	40020000 	.word	0x40020000
 800570c:	40020400 	.word	0x40020400
 8005710:	40020800 	.word	0x40020800
 8005714:	40020c00 	.word	0x40020c00
 8005718:	40021000 	.word	0x40021000
 800571c:	40021400 	.word	0x40021400
 8005720:	40021800 	.word	0x40021800
 8005724:	40021c00 	.word	0x40021c00
 8005728:	40022000 	.word	0x40022000
 800572c:	40022400 	.word	0x40022400
 8005730:	40013c00 	.word	0x40013c00

08005734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
 8005740:	4613      	mov	r3, r2
 8005742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005744:	787b      	ldrb	r3, [r7, #1]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800574a:	887a      	ldrh	r2, [r7, #2]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005750:	e003      	b.n	800575a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	041a      	lsls	r2, r3, #16
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	619a      	str	r2, [r3, #24]
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e07f      	b.n	800587a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fb fe8a 	bl	80014a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d107      	bne.n	80057e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	e006      	b.n	80057f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d104      	bne.n	8005802 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_I2C_Init+0x11c>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69d9      	ldr	r1, [r3, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	02008000 	.word	0x02008000

08005888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b20      	cmp	r3, #32
 800589c:	d138      	bne.n	8005910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e032      	b.n	8005912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	; 0x24
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	e000      	b.n	8005912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005910:	2302      	movs	r3, #2
  }
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b20      	cmp	r3, #32
 8005932:	d139      	bne.n	80059a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800593e:	2302      	movs	r3, #2
 8005940:	e033      	b.n	80059aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	; 0x24
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005970:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e041      	b.n	8005a4c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80059d0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f245 5255 	movw	r2, #21845	; 0x5555
 80059da:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6852      	ldr	r2, [r2, #4]
 80059e4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6892      	ldr	r2, [r2, #8]
 80059ee:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80059f0:	f7fd fc32 	bl	8003258 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059f6:	e00f      	b.n	8005a18 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80059f8:	f7fd fc2e 	bl	8003258 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b31      	cmp	r3, #49	; 0x31
 8005a04:	d908      	bls.n	8005a18 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e019      	b.n	8005a4c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e8      	bne.n	80059f8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d005      	beq.n	8005a40 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68d2      	ldr	r2, [r2, #12]
 8005a3c:	611a      	str	r2, [r3, #16]
 8005a3e:	e004      	b.n	8005a4a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0bf      	b.n	8005be6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb fe7a 	bl	8001774 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005aac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b4a      	ldr	r3, [pc, #296]	; (8005bf0 <HAL_LTDC_Init+0x19c>)
 8005ac8:	400b      	ands	r3, r1
 8005aca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68d9      	ldr	r1, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b3e      	ldr	r3, [pc, #248]	; (8005bf0 <HAL_LTDC_Init+0x19c>)
 8005af6:	400b      	ands	r3, r1
 8005af8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68d9      	ldr	r1, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1a      	ldr	r2, [r3, #32]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6919      	ldr	r1, [r3, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <HAL_LTDC_Init+0x19c>)
 8005b24:	400b      	ands	r3, r1
 8005b26:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6919      	ldr	r1, [r3, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6959      	ldr	r1, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <HAL_LTDC_Init+0x19c>)
 8005b52:	400b      	ands	r3, r1
 8005b54:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6959      	ldr	r1, [r3, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0206 	orr.w	r2, r2, #6
 8005bc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	f000f800 	.word	0xf000f800

08005bf4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d023      	beq.n	8005c5e <HAL_LTDC_IRQHandler+0x6a>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01e      	beq.n	8005c5e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0204 	bic.w	r2, r2, #4
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f86f 	bl	8005d3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d023      	beq.n	8005cb0 <HAL_LTDC_IRQHandler+0xbc>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01e      	beq.n	8005cb0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0202 	bic.w	r2, r2, #2
 8005c80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2202      	movs	r2, #2
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c90:	f043 0202 	orr.w	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f846 	bl	8005d3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01b      	beq.n	8005cf2 <HAL_LTDC_IRQHandler+0xfe>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f82f 	bl	8005d50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <HAL_LTDC_IRQHandler+0x140>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0208 	bic.w	r2, r2, #8
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f818 	bl	8005d64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_LTDC_ConfigLayer+0x1a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e02c      	b.n	8005dec <HAL_LTDC_ConfigLayer+0x74>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2134      	movs	r1, #52	; 0x34
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f811 	bl	8005df4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bdb0      	pop	{r4, r5, r7, pc}

08005df4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e10:	4413      	add	r3, r2
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	01db      	lsls	r3, r3, #7
 8005e20:	4413      	add	r3, r2
 8005e22:	3384      	adds	r3, #132	; 0x84
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	01d2      	lsls	r2, r2, #7
 8005e30:	440a      	add	r2, r1
 8005e32:	3284      	adds	r2, #132	; 0x84
 8005e34:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e38:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e4a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e4c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	01db      	lsls	r3, r3, #7
 8005e58:	440b      	add	r3, r1
 8005e5a:	3384      	adds	r3, #132	; 0x84
 8005e5c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e62:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e72:	4413      	add	r3, r2
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	01db      	lsls	r3, r3, #7
 8005e82:	4413      	add	r3, r2
 8005e84:	3384      	adds	r3, #132	; 0x84
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	01d2      	lsls	r2, r2, #7
 8005e92:	440a      	add	r2, r1
 8005e94:	3284      	adds	r2, #132	; 0x84
 8005e96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eaa:	4413      	add	r3, r2
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	01db      	lsls	r3, r3, #7
 8005eb8:	440b      	add	r3, r1
 8005eba:	3384      	adds	r3, #132	; 0x84
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	01db      	lsls	r3, r3, #7
 8005ece:	4413      	add	r3, r2
 8005ed0:	3384      	adds	r3, #132	; 0x84
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	01d2      	lsls	r2, r2, #7
 8005ede:	440a      	add	r2, r1
 8005ee0:	3284      	adds	r2, #132	; 0x84
 8005ee2:	f023 0307 	bic.w	r3, r3, #7
 8005ee6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	01db      	lsls	r3, r3, #7
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3384      	adds	r3, #132	; 0x84
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	061b      	lsls	r3, r3, #24
 8005f18:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	4413      	add	r3, r2
 8005f26:	3384      	adds	r3, #132	; 0x84
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	01db      	lsls	r3, r3, #7
 8005f34:	4413      	add	r3, r2
 8005f36:	3384      	adds	r3, #132	; 0x84
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f44:	461a      	mov	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	01db      	lsls	r3, r3, #7
 8005f58:	440b      	add	r3, r1
 8005f5a:	3384      	adds	r3, #132	; 0x84
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	01db      	lsls	r3, r3, #7
 8005f6e:	4413      	add	r3, r2
 8005f70:	3384      	adds	r3, #132	; 0x84
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	01d2      	lsls	r2, r2, #7
 8005f7e:	440a      	add	r2, r1
 8005f80:	3284      	adds	r2, #132	; 0x84
 8005f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f86:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	01db      	lsls	r3, r3, #7
 8005f92:	4413      	add	r3, r2
 8005f94:	3384      	adds	r3, #132	; 0x84
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	01db      	lsls	r3, r3, #7
 8005fa8:	4413      	add	r3, r2
 8005faa:	3384      	adds	r3, #132	; 0x84
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	01db      	lsls	r3, r3, #7
 8005fb8:	440b      	add	r3, r1
 8005fba:	3384      	adds	r3, #132	; 0x84
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4b58      	ldr	r3, [pc, #352]	; (8006120 <LTDC_SetConfig+0x32c>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	68f9      	ldr	r1, [r7, #12]
 8005fce:	6809      	ldr	r1, [r1, #0]
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	01c9      	lsls	r1, r1, #7
 8005fd6:	4401      	add	r1, r0
 8005fd8:	3184      	adds	r1, #132	; 0x84
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	01db      	lsls	r3, r3, #7
 8005fe8:	4413      	add	r3, r2
 8005fea:	3384      	adds	r3, #132	; 0x84
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3384      	adds	r3, #132	; 0x84
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2300      	movs	r3, #0
 8006000:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	01db      	lsls	r3, r3, #7
 800600c:	4413      	add	r3, r2
 800600e:	3384      	adds	r3, #132	; 0x84
 8006010:	461a      	mov	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006020:	2304      	movs	r3, #4
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e01b      	b.n	800605e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800602e:	2303      	movs	r3, #3
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	e014      	b.n	800605e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d00b      	beq.n	8006054 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006040:	2b02      	cmp	r3, #2
 8006042:	d007      	beq.n	8006054 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006048:	2b03      	cmp	r3, #3
 800604a:	d003      	beq.n	8006054 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006050:	2b07      	cmp	r3, #7
 8006052:	d102      	bne.n	800605a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006054:	2302      	movs	r3, #2
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e001      	b.n	800605e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800605a:	2301      	movs	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	01db      	lsls	r3, r3, #7
 8006068:	4413      	add	r3, r2
 800606a:	3384      	adds	r3, #132	; 0x84
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	4611      	mov	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	01d2      	lsls	r2, r2, #7
 8006078:	440a      	add	r2, r1
 800607a:	3284      	adds	r2, #132	; 0x84
 800607c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006080:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	6809      	ldr	r1, [r1, #0]
 80060a4:	4608      	mov	r0, r1
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	01c9      	lsls	r1, r1, #7
 80060aa:	4401      	add	r1, r0
 80060ac:	3184      	adds	r1, #132	; 0x84
 80060ae:	4313      	orrs	r3, r2
 80060b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	01db      	lsls	r3, r3, #7
 80060bc:	4413      	add	r3, r2
 80060be:	3384      	adds	r3, #132	; 0x84
 80060c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4619      	mov	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	01db      	lsls	r3, r3, #7
 80060cc:	440b      	add	r3, r1
 80060ce:	3384      	adds	r3, #132	; 0x84
 80060d0:	4619      	mov	r1, r3
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <LTDC_SetConfig+0x330>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	01db      	lsls	r3, r3, #7
 80060e2:	4413      	add	r3, r2
 80060e4:	3384      	adds	r3, #132	; 0x84
 80060e6:	461a      	mov	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	4413      	add	r3, r2
 80060fa:	3384      	adds	r3, #132	; 0x84
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	4611      	mov	r1, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	01d2      	lsls	r2, r2, #7
 8006108:	440a      	add	r2, r1
 800610a:	3284      	adds	r2, #132	; 0x84
 800610c:	f043 0301 	orr.w	r3, r3, #1
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	3724      	adds	r7, #36	; 0x24
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	fffff8f8 	.word	0xfffff8f8
 8006124:	fffff800 	.word	0xfffff800

08006128 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e031      	b.n	800619e <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fb ffc1 	bl	80020d4 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2203      	movs	r2, #3
 8006156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f824 	bl	80061a8 <HAL_MMC_InitCard>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e019      	b.n	800619e <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb2b 	bl	80067e8 <HAL_MMC_ConfigWideBusOperation>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b08e      	sub	sp, #56	; 0x38
 80061ac:	af04      	add	r7, sp, #16
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80061c4:	2376      	movs	r3, #118	; 0x76
 80061c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681d      	ldr	r5, [r3, #0]
 80061cc:	466c      	mov	r4, sp
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e0:	4628      	mov	r0, r5
 80061e2:	f005 fee7 	bl	800bfb4 <SDMMC_Init>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 80061ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e062      	b.n	80062be <HAL_MMC_InitCard+0x116>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006206:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f005 ff0a 	bl	800c026 <SDMMC_PowerState_ON>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e04c      	b.n	80062be <HAL_MMC_InitCard+0x116>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006232:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the MMC initialization  sequence */
  HAL_Delay(2);
 8006234:	2002      	movs	r0, #2
 8006236:	f7fd f81b 	bl	8003270 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc8a 	bl	8006b54 <MMC_PowerON>
 8006240:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <HAL_MMC_InitCard+0xb8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e02e      	b.n	80062be <HAL_MMC_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb73 	bl	800694c <MMC_InitCard>
 8006266:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <HAL_MMC_InitCard+0xde>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e01b      	b.n	80062be <HAL_MMC_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800628e:	4618      	mov	r0, r3
 8006290:	f005 ff5c 	bl	800c14c <SDMMC_CmdBlockLength>
 8006294:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00f      	beq.n	80062bc <HAL_MMC_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <HAL_MMC_InitCard+0x120>)
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_MMC_InitCard+0x116>
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bdb0      	pop	{r4, r5, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	004005ff 	.word	0x004005ff

080062cc <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062de:	0f9b      	lsrs	r3, r3, #30
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	0e9b      	lsrs	r3, r3, #26
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	0e1b      	lsrs	r3, r3, #24
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	b2da      	uxtb	r2, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	0c1b      	lsrs	r3, r3, #16
 8006310:	b2da      	uxtb	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631a:	0a1b      	lsrs	r3, r3, #8
 800631c:	b2da      	uxtb	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006326:	b2da      	uxtb	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006330:	0d1b      	lsrs	r3, r3, #20
 8006332:	b29a      	uxth	r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	b2da      	uxtb	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634e:	0bdb      	lsrs	r3, r3, #15
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	b2da      	uxtb	r2, r3
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006360:	0b9b      	lsrs	r3, r3, #14
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006372:	0b5b      	lsrs	r3, r3, #13
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	b2da      	uxtb	r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006384:	0b1b      	lsrs	r3, r3, #12
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800639c:	009a      	lsls	r2, r3, #2
 800639e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063a8:	0f92      	lsrs	r2, r2, #30
 80063aa:	431a      	orrs	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b4:	0edb      	lsrs	r3, r3, #27
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c6:	0e1b      	lsrs	r3, r3, #24
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d8:	0d5b      	lsrs	r3, r3, #21
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ea:	0c9b      	lsrs	r3, r3, #18
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063fc:	0bdb      	lsrs	r3, r3, #15
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	b2da      	uxtb	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	761a      	strb	r2, [r3, #24]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800640a:	f107 010c 	add.w	r1, r7, #12
 800640e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006412:	22d4      	movs	r2, #212	; 0xd4
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fbed 	bl	8006bf4 <MMC_ReadExtCSD>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_MMC_GetCardCSD+0x158>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0f0      	b.n	8006606 <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	2b00      	cmp	r3, #0
 800642a:	d12a      	bne.n	8006482 <HAL_MMC_GetCardCSD+0x1b6>
  {
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	7e1b      	ldrb	r3, [r3, #24]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	3302      	adds	r3, #2
 8006442:	2201      	movs	r2, #1
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800644c:	fb03 f202 	mul.w	r2, r3, r2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	7a1b      	ldrb	r3, [r3, #8]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	2201      	movs	r2, #1
 8006460:	409a      	lsls	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800646e:	0a52      	lsrs	r2, r2, #9
 8006470:	fb03 f202 	mul.w	r2, r3, r2
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->MmcCard.LogBlockSize = 512U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006480:	e023      	b.n	80064ca <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10f      	bne.n	80064aa <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->MmcCard.BlockSize = 512U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649e:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80064a8:	e00f      	b.n	80064ca <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a58      	ldr	r2, [pc, #352]	; (8006610 <HAL_MMC_GetCardCSD+0x344>)
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e09d      	b.n	8006606 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ce:	0b9b      	lsrs	r3, r3, #14
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006502:	0fdb      	lsrs	r3, r3, #31
 8006504:	b2da      	uxtb	r2, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650e:	0f5b      	lsrs	r3, r3, #29
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	b2da      	uxtb	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006520:	0e9b      	lsrs	r3, r3, #26
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	b2da      	uxtb	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006532:	0d9b      	lsrs	r3, r3, #22
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	b2da      	uxtb	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006544:	0d5b      	lsrs	r3, r3, #21
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	0bdb      	lsrs	r3, r3, #15
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	b2da      	uxtb	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006588:	0b9b      	lsrs	r3, r3, #14
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	b2da      	uxtb	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800659c:	0b5b      	lsrs	r3, r3, #13
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b0:	0b1b      	lsrs	r3, r3, #12
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	0a9b      	lsrs	r3, r3, #10
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	004005ff 	.word	0x004005ff

08006614 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	; 0x38
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006620:	f7fc fe1a 	bl	8003258 <HAL_GetTick>
 8006624:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if(NULL == pExtCSD)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0cf      	b.n	80067dc <HAL_MMC_GetCardExtCSD+0x1c8>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 80c8 	bne.w	80067da <HAL_MMC_GetCardExtCSD+0x1c6>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

    hmmc->State = HAL_MMC_STATE_BUSY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2203      	movs	r2, #3
 8006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2200      	movs	r2, #0
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512;
 800666a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006670:	2390      	movs	r3, #144	; 0x90
 8006672:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006674:	2302      	movs	r3, #2
 8006676:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006678:	2300      	movs	r3, #0
 800667a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800667c:	2301      	movs	r3, #1
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f107 0210 	add.w	r2, r7, #16
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f005 fd32 	bl	800c0f4 <SDMMC_ConfigData>

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f005 fe7f 	bl	800c39a <SDMMC_CmdSendEXTCSD>
 800669c:	62b8      	str	r0, [r7, #40]	; 0x28
    if(errorstate != HAL_MMC_ERROR_NONE)
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d045      	beq.n	8006730 <HAL_MMC_GetCardExtCSD+0x11c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a4e      	ldr	r2, [pc, #312]	; (80067e4 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e08b      	b.n	80067dc <HAL_MMC_GetCardExtCSD+0x1c8>
    }

    /* Poll on SDMMC flags */
    while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d013      	beq.n	80066fa <HAL_MMC_GetCardExtCSD+0xe6>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	e00d      	b.n	80066f4 <HAL_MMC_GetCardExtCSD+0xe0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f005 fc95 	bl	800c00c <SDMMC_ReadFIFO>
 80066e2:	4602      	mov	r2, r0
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	3304      	adds	r3, #4
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
        for(count = 0U; count < 8U; count++)
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	3301      	adds	r3, #1
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	2b07      	cmp	r3, #7
 80066f8:	d9ee      	bls.n	80066d8 <HAL_MMC_GetCardExtCSD+0xc4>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80066fa:	f7fc fdad 	bl	8003258 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d902      	bls.n	8006710 <HAL_MMC_GetCardExtCSD+0xfc>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10f      	bne.n	8006730 <HAL_MMC_GetCardExtCSD+0x11c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a33      	ldr	r2, [pc, #204]	; (80067e4 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->State= HAL_MMC_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e055      	b.n	80067dc <HAL_MMC_GetCardExtCSD+0x1c8>
    while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0c2      	beq.n	80066c4 <HAL_MMC_GetCardExtCSD+0xb0>
      }
    }

    /* Get error state */
    if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00f      	beq.n	800676c <HAL_MMC_GetCardExtCSD+0x158>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8006752:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	f043 0208 	orr.w	r2, r3, #8
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e037      	b.n	80067dc <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00f      	beq.n	800679a <HAL_MMC_GetCardExtCSD+0x186>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	f043 0202 	orr.w	r2, r3, #2
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e020      	b.n	80067dc <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <HAL_MMC_GetCardExtCSD+0x1b4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0d      	ldr	r2, [pc, #52]	; (80067e4 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e009      	b.n	80067dc <HAL_MMC_GetCardExtCSD+0x1c8>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3738      	adds	r7, #56	; 0x38
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	004005ff 	.word	0x004005ff

080067e8 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 80067e8:	b5b0      	push	{r4, r5, r7, lr}
 80067ea:	b090      	sub	sp, #64	; 0x40
 80067ec:	af04      	add	r7, sp, #16
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2203      	movs	r2, #3
 80067fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  errorstate = MMC_PwrClassUpdate(hmmc, WideMode);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 faa5 	bl	8006d50 <MMC_PwrClassUpdate>
 8006806:	62b8      	str	r0, [r7, #40]	; 0x28

  if(errorstate == HAL_MMC_ERROR_NONE)
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d17d      	bne.n	800690a <HAL_MMC_ConfigWideBusOperation+0x122>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006814:	d107      	bne.n	8006826 <HAL_MMC_ConfigWideBusOperation+0x3e>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4948      	ldr	r1, [pc, #288]	; (800693c <HAL_MMC_ConfigWideBusOperation+0x154>)
 800681c:	4618      	mov	r0, r3
 800681e:	f005 fd9a 	bl	800c356 <SDMMC_CmdSwitch>
 8006822:	62b8      	str	r0, [r7, #40]	; 0x28
 8006824:	e019      	b.n	800685a <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800682c:	d107      	bne.n	800683e <HAL_MMC_ConfigWideBusOperation+0x56>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4943      	ldr	r1, [pc, #268]	; (8006940 <HAL_MMC_ConfigWideBusOperation+0x158>)
 8006834:	4618      	mov	r0, r3
 8006836:	f005 fd8e 	bl	800c356 <SDMMC_CmdSwitch>
 800683a:	62b8      	str	r0, [r7, #40]	; 0x28
 800683c:	e00d      	b.n	800685a <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <HAL_MMC_ConfigWideBusOperation+0x6c>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	493e      	ldr	r1, [pc, #248]	; (8006944 <HAL_MMC_ConfigWideBusOperation+0x15c>)
 800684a:	4618      	mov	r0, r3
 800684c:	f005 fd83 	bl	800c356 <SDMMC_CmdSwitch>
 8006850:	62b8      	str	r0, [r7, #40]	; 0x28
 8006852:	e002      	b.n	800685a <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8006854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if(errorstate == HAL_MMC_ERROR_NONE)
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d154      	bne.n	800690a <HAL_MMC_ConfigWideBusOperation+0x122>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8006860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f005 fd2e 	bl	800c2d4 <SDMMC_CmdSendStatus>
 8006878:	62b8      	str	r0, [r7, #40]	; 0x28
        if(errorstate != HAL_MMC_ERROR_NONE)
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	2b00      	cmp	r3, #0
 800687e:	d112      	bne.n	80068a6 <HAL_MMC_ConfigWideBusOperation+0xbe>
        {
          break;
        }
        
        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f005 fc21 	bl	800c0ce <SDMMC_GetResponse>
 800688c:	6278      	str	r0, [r7, #36]	; 0x24
        count--;
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	3b01      	subs	r3, #1
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
      }while(((response & 0x100U) == 0U) && (count != 0U));
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <HAL_MMC_ConfigWideBusOperation+0xc0>
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e0      	bne.n	8006866 <HAL_MMC_ConfigWideBusOperation+0x7e>
 80068a4:	e000      	b.n	80068a8 <HAL_MMC_ConfigWideBusOperation+0xc0>
          break;
 80068a6:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d027      	beq.n	80068fe <HAL_MMC_ConfigWideBusOperation+0x116>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d124      	bne.n	80068fe <HAL_MMC_ConfigWideBusOperation+0x116>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_MMC_ConfigWideBusOperation+0xde>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80068be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((response & 0x80U) != 0U)
 80068c4:	e021      	b.n	800690a <HAL_MMC_ConfigWideBusOperation+0x122>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f107 040c 	add.w	r4, r7, #12
 80068cc:	1d1d      	adds	r5, r3, #4
 80068ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80068d6:	e884 0003 	stmia.w	r4, {r0, r1}
          Init.BusWide = WideMode;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	61bb      	str	r3, [r7, #24]
          (void)SDMMC_Init(hmmc->Instance, Init);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	466c      	mov	r4, sp
 80068e4:	f107 0318 	add.w	r3, r7, #24
 80068e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068f0:	f107 030c 	add.w	r3, r7, #12
 80068f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068f6:	4628      	mov	r0, r5
 80068f8:	f005 fb5c 	bl	800bfb4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 80068fc:	e005      	b.n	800690a <HAL_MMC_ConfigWideBusOperation+0x122>
        }
      }
      else if (count == 0U)
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <HAL_MMC_ConfigWideBusOperation+0x122>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8006904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(errorstate != HAL_MMC_ERROR_NONE)
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <HAL_MMC_ConfigWideBusOperation+0x148>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <HAL_MMC_ConfigWideBusOperation+0x160>)
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <HAL_MMC_ConfigWideBusOperation+0x14a>
  }

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3730      	adds	r7, #48	; 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	bdb0      	pop	{r4, r5, r7, pc}
 800693a:	bf00      	nop
 800693c:	03b70200 	.word	0x03b70200
 8006940:	03b70100 	.word	0x03b70100
 8006944:	03b70000 	.word	0x03b70000
 8006948:	004005ff 	.word	0x004005ff

0800694c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800694c:	b5b0      	push	{r4, r5, r7, lr}
 800694e:	b09a      	sub	sp, #104	; 0x68
 8006950:	af04      	add	r7, sp, #16
 8006952:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8006954:	2302      	movs	r3, #2
 8006956:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f005 fb6f 	bl	800c042 <SDMMC_GetPowerState>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 800696a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800696e:	e0ec      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f005 fc4c 	bl	800c212 <SDMMC_CmdSendCID>
 800697a:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800697c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8006982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006984:	e0e1      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f005 fb9e 	bl	800c0ce <SDMMC_GetResponse>
 8006992:	4602      	mov	r2, r0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2104      	movs	r1, #4
 800699e:	4618      	mov	r0, r3
 80069a0:	f005 fb95 	bl	800c0ce <SDMMC_GetResponse>
 80069a4:	4602      	mov	r2, r0
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2108      	movs	r1, #8
 80069b0:	4618      	mov	r0, r3
 80069b2:	f005 fb8c 	bl	800c0ce <SDMMC_GetResponse>
 80069b6:	4602      	mov	r2, r0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	210c      	movs	r1, #12
 80069c2:	4618      	mov	r0, r3
 80069c4:	f005 fb83 	bl	800c0ce <SDMMC_GetResponse>
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80069d6:	4611      	mov	r1, r2
 80069d8:	4618      	mov	r0, r3
 80069da:	f005 fc57 	bl	800c28c <SDMMC_CmdSetRelAddMmc>
 80069de:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 80069e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <MMC_InitCard+0x9e>
  {
    return errorstate;
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	e0af      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80069ea:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f005 fc25 	bl	800c24e <SDMMC_CmdSendCSD>
 8006a04:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8006a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0e:	e09c      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f005 fb59 	bl	800c0ce <SDMMC_GetResponse>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2104      	movs	r1, #4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f005 fb50 	bl	800c0ce <SDMMC_GetResponse>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2108      	movs	r1, #8
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f005 fb47 	bl	800c0ce <SDMMC_GetResponse>
 8006a40:	4602      	mov	r2, r0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	210c      	movs	r1, #12
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f005 fb3e 	bl	800c0ce <SDMMC_GetResponse>
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2104      	movs	r1, #4
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f005 fb35 	bl	800c0ce <SDMMC_GetResponse>
 8006a64:	4603      	mov	r3, r0
 8006a66:	0d1a      	lsrs	r2, r3, #20
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6819      	ldr	r1, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a74:	041b      	lsls	r3, r3, #16
 8006a76:	2200      	movs	r2, #0
 8006a78:	461c      	mov	r4, r3
 8006a7a:	4615      	mov	r5, r2
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	462b      	mov	r3, r5
 8006a80:	4608      	mov	r0, r1
 8006a82:	f005 fb85 	bl	800c190 <SDMMC_CmdSelDesel>
 8006a86:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <MMC_InitCard+0x146>
  {
    return errorstate;
 8006a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a90:	e05b      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8006a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fc17 	bl	80062cc <HAL_MMC_GetCardCSD>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <MMC_InitCard+0x15e>
  {
    return hmmc->ErrorCode;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	e04f      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f005 fc0c 	bl	800c2d4 <SDMMC_CmdSendStatus>
 8006abc:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <MMC_InitCard+0x184>
  {
    hmmc->ErrorCode |= errorstate;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3380      	adds	r3, #128	; 0x80
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fd9a 	bl	8006614 <HAL_MMC_GetCardExtCSD>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <MMC_InitCard+0x1a0>
  {
    return hmmc->ErrorCode;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	e02e      	b.n	8006b4a <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f005 fbeb 	bl	800c2d4 <SDMMC_CmdSendStatus>
 8006afe:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <MMC_InitCard+0x1c6>
  {
    hmmc->ErrorCode |= errorstate;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f107 040c 	add.w	r4, r7, #12
 8006b18:	1d1d      	adds	r5, r3, #4
 8006b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006b22:	e884 0003 	stmia.w	r4, {r0, r1}
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681d      	ldr	r5, [r3, #0]
 8006b2e:	466c      	mov	r4, sp
 8006b30:	f107 0318 	add.w	r3, r7, #24
 8006b34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b42:	4628      	mov	r0, r5
 8006b44:	f005 fa36 	bl	800bfb4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3758      	adds	r7, #88	; 0x58
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b54 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f005 fb32 	bl	800c1d6 <SDMMC_CmdGoIdleState>
 8006b72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d027      	beq.n	8006bca <MMC_PowerON+0x76>
  {
    return errorstate;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	e034      	b.n	8006be8 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	60ba      	str	r2, [r7, #8]
 8006b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d102      	bne.n	8006b92 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8006b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b90:	e02a      	b.n	8006be8 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4916      	ldr	r1, [pc, #88]	; (8006bf0 <MMC_PowerON+0x9c>)
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f005 fbbd 	bl	800c318 <SDMMC_CmdOpCondition>
 8006b9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8006ba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006baa:	e01d      	b.n	8006be8 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f005 fa8b 	bl	800c0ce <SDMMC_GetResponse>
 8006bb8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	0fdb      	lsrs	r3, r3, #31
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <MMC_PowerON+0x72>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <MMC_PowerON+0x74>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0d6      	beq.n	8006b7e <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	0e1b      	lsrs	r3, r3, #24
 8006bd4:	2bc0      	cmp	r3, #192	; 0xc0
 8006bd6:	d103      	bne.n	8006be0 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8006bde:	e002      	b.n	8006be6 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	c0ff8000 	.word	0xc0ff8000

08006bf4 <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static uint32_t MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b090      	sub	sp, #64	; 0x40
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7fc fb28 	bl	8003258 <HAL_GetTick>
 8006c08:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 8006c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c26:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c28:	2390      	movs	r3, #144	; 0x90
 8006c2a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f107 0214 	add.w	r2, r7, #20
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f005 fa56 	bl	800c0f4 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f005 fba3 	bl	800c39a <SDMMC_CmdSendEXTCSD>
 8006c54:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d04e      	beq.n	8006cfa <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a3a      	ldr	r2, [pc, #232]	; (8006d4c <MMC_ReadExtCSD+0x158>)
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e062      	b.n	8006d42 <MMC_ReadExtCSD+0x14e>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01c      	beq.n	8006cc4 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8e:	e013      	b.n	8006cb8 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f005 f9b9 	bl	800c00c <SDMMC_ReadFIFO>
 8006c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8006c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	4413      	add	r3, r2
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	0892      	lsrs	r2, r2, #2
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d102      	bne.n	8006cb2 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb0:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d9e8      	bls.n	8006c90 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006cc4:	f7fc fac8 	bl	8003258 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d902      	bls.n	8006cda <MMC_ReadExtCSD+0xe6>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10f      	bne.n	8006cfa <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <MMC_ReadExtCSD+0x158>)
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e023      	b.n	8006d42 <MMC_ReadExtCSD+0x14e>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0b9      	beq.n	8006c7c <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	4619      	mov	r1, r3
 8006d14:	4610      	mov	r0, r2
 8006d16:	f005 fadd 	bl	800c2d4 <SDMMC_CmdSendStatus>
 8006d1a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3740      	adds	r7, #64	; 0x40
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	004005ff 	.word	0x004005ff

08006d50 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t count;
  uint32_t response = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
  uint32_t power_class, supported_pwr_class;

  if((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d68:	d003      	beq.n	8006d72 <MMC_PwrClassUpdate+0x22>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d70:	d171      	bne.n	8006e56 <MMC_PwrClassUpdate+0x106>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]

    /* Read the PowerClass field of the Extended CSD register */
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8006d76:	f107 010c 	add.w	r1, r7, #12
 8006d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7e:	22bb      	movs	r2, #187	; 0xbb
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ff37 	bl	8006bf4 <MMC_ReadExtCSD>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <MMC_PwrClassUpdate+0x44>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e002      	b.n	8006d9a <MMC_PwrClassUpdate+0x4a>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	0e1b      	lsrs	r3, r3, #24
 8006d98:	60fb      	str	r3, [r7, #12]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    /* Field PWR_CL_26_xxx [201 or 203] */
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006da0:	0e1b      	lsrs	r3, r3, #24
 8006da2:	613b      	str	r3, [r7, #16]

    if(errorstate == HAL_MMC_ERROR_NONE)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d155      	bne.n	8006e56 <MMC_PwrClassUpdate+0x106>
    {
      if(Wide == SDMMC_BUS_WIDE_8B)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db0:	d102      	bne.n	8006db8 <MMC_PwrClassUpdate+0x68>
      {
        /* Bit [7:4] : power class for 8-bits bus configuration - Bit [3:0] : power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	613b      	str	r3, [r7, #16]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4053      	eors	r3, r2
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d047      	beq.n	8006e56 <MMC_PwrClassUpdate+0x106>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <MMC_PwrClassUpdate+0x110>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f005 fabd 	bl	800c356 <SDMMC_CmdSwitch>
 8006ddc:	6178      	str	r0, [r7, #20]

        if(errorstate == HAL_MMC_ERROR_NONE)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d138      	bne.n	8006e56 <MMC_PwrClassUpdate+0x106>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8006de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006de8:	61fb      	str	r3, [r7, #28]
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f005 fa6c 	bl	800c2d4 <SDMMC_CmdSendStatus>
 8006dfc:	6178      	str	r0, [r7, #20]
            if(errorstate != HAL_MMC_ERROR_NONE)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <MMC_PwrClassUpdate+0xda>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f005 f95f 	bl	800c0ce <SDMMC_GetResponse>
 8006e10:	61b8      	str	r0, [r7, #24]
            count--;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
          }while(((response & 0x100U) == 0U) && (count != 0U));
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <MMC_PwrClassUpdate+0xdc>
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e0      	bne.n	8006dea <MMC_PwrClassUpdate+0x9a>
 8006e28:	e000      	b.n	8006e2c <MMC_PwrClassUpdate+0xdc>
              break;
 8006e2a:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <MMC_PwrClassUpdate+0xfa>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <MMC_PwrClassUpdate+0xfa>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <MMC_PwrClassUpdate+0x106>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006e42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e46:	617b      	str	r3, [r7, #20]
            if ((response & 0x80U) != 0U)
 8006e48:	e005      	b.n	8006e56 <MMC_PwrClassUpdate+0x106>
            }
          }
          else if (count == 0U)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <MMC_PwrClassUpdate+0x106>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8006e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e54:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return errorstate;
 8006e56:	697b      	ldr	r3, [r7, #20]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	03bb0000 	.word	0x03bb0000

08006e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e66:	b08f      	sub	sp, #60	; 0x3c
 8006e68:	af0a      	add	r7, sp, #40	; 0x28
 8006e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e116      	b.n	80070a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fc f885 	bl	8002fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2203      	movs	r2, #3
 8006e9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f005 fd2d 	bl	800c914 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	687e      	ldr	r6, [r7, #4]
 8006ec2:	466d      	mov	r5, sp
 8006ec4:	f106 0410 	add.w	r4, r6, #16
 8006ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ed8:	1d33      	adds	r3, r6, #4
 8006eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006edc:	6838      	ldr	r0, [r7, #0]
 8006ede:	f005 fc1f 	bl	800c720 <USB_CoreInit>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0d7      	b.n	80070a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f005 fd1b 	bl	800c936 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	e04a      	b.n	8006f9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f06:	7bfa      	ldrb	r2, [r7, #15]
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	333d      	adds	r3, #61	; 0x3d
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f1a:	7bfa      	ldrb	r2, [r7, #15]
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	333c      	adds	r3, #60	; 0x3c
 8006f2a:	7bfa      	ldrb	r2, [r7, #15]
 8006f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f2e:	7bfa      	ldrb	r2, [r7, #15]
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	b298      	uxth	r0, r3
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	3344      	adds	r3, #68	; 0x44
 8006f42:	4602      	mov	r2, r0
 8006f44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f46:	7bfa      	ldrb	r2, [r7, #15]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	3340      	adds	r3, #64	; 0x40
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f5a:	7bfa      	ldrb	r2, [r7, #15]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3348      	adds	r3, #72	; 0x48
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f6e:	7bfa      	ldrb	r2, [r7, #15]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	334c      	adds	r3, #76	; 0x4c
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f82:	7bfa      	ldrb	r2, [r7, #15]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3354      	adds	r3, #84	; 0x54
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	7bfa      	ldrb	r2, [r7, #15]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3af      	bcc.n	8006f06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
 8006faa:	e044      	b.n	8007036 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fac:	7bfa      	ldrb	r2, [r7, #15]
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006fc2:	7bfa      	ldrb	r2, [r7, #15]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006fd4:	7bfa      	ldrb	r2, [r7, #15]
 8006fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fd8:	7bfa      	ldrb	r2, [r7, #15]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006fee:	7bfa      	ldrb	r2, [r7, #15]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800701a:	7bfa      	ldrb	r2, [r7, #15]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	3301      	adds	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]
 8007036:	7bfa      	ldrb	r2, [r7, #15]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3b5      	bcc.n	8006fac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	687e      	ldr	r6, [r7, #4]
 8007048:	466d      	mov	r5, sp
 800704a:	f106 0410 	add.w	r4, r6, #16
 800704e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800705a:	e885 0003 	stmia.w	r5, {r0, r1}
 800705e:	1d33      	adds	r3, r6, #4
 8007060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007062:	6838      	ldr	r0, [r7, #0]
 8007064:	f005 fcb4 	bl	800c9d0 <USB_DevInit>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e014      	b.n	80070a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b01      	cmp	r3, #1
 8007090:	d102      	bne.n	8007098 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 ff38 	bl	8007f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f005 ffd7 	bl	800d050 <USB_DevDisconnect>

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b08d      	sub	sp, #52	; 0x34
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f006 f878 	bl	800d1b8 <USB_GetMode>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 84b7 	bne.w	8007a3e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f005 ffdc 	bl	800d092 <USB_ReadInterrupts>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 84ad 	beq.w	8007a3c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f005 ffc9 	bl	800d092 <USB_ReadInterrupts>
 8007100:	4603      	mov	r3, r0
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d107      	bne.n	800711a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f002 0202 	and.w	r2, r2, #2
 8007118:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f005 ffb7 	bl	800d092 <USB_ReadInterrupts>
 8007124:	4603      	mov	r3, r0
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b10      	cmp	r3, #16
 800712c:	d161      	bne.n	80071f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0210 	bic.w	r2, r2, #16
 800713c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	4613      	mov	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4413      	add	r3, r2
 800715a:	3304      	adds	r3, #4
 800715c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	0c5b      	lsrs	r3, r3, #17
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	2b02      	cmp	r3, #2
 8007168:	d124      	bne.n	80071b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d035      	beq.n	80071e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	6a38      	ldr	r0, [r7, #32]
 800718a:	f005 ff09 	bl	800cfa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800719a:	441a      	add	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
 80071b2:	e016      	b.n	80071e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	0c5b      	lsrs	r3, r3, #17
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d110      	bne.n	80071e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071c6:	2208      	movs	r2, #8
 80071c8:	4619      	mov	r1, r3
 80071ca:	6a38      	ldr	r0, [r7, #32]
 80071cc:	f005 fee8 	bl	800cfa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6a1a      	ldr	r2, [r3, #32]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071dc:	441a      	add	r2, r3
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0210 	orr.w	r2, r2, #16
 80071f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f005 ff4b 	bl	800d092 <USB_ReadInterrupts>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007202:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007206:	f040 80a7 	bne.w	8007358 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f005 ff50 	bl	800d0b8 <USB_ReadDevAllOutEpInterrupt>
 8007218:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800721a:	e099      	b.n	8007350 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 808e 	beq.w	8007344 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f005 ff74 	bl	800d120 <USB_ReadDevOutEPInterrupt>
 8007238:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	461a      	mov	r2, r3
 8007252:	2301      	movs	r3, #1
 8007254:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fd27 	bl	8007cac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	461a      	mov	r2, r3
 8007276:	2308      	movs	r3, #8
 8007278:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800727a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fdfd 	bl	8007e7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	461a      	mov	r2, r3
 800729a:	2310      	movs	r3, #16
 800729c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d030      	beq.n	800730a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d109      	bne.n	80072c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	4613      	mov	r3, r2
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4413      	add	r3, r2
 80072da:	3304      	adds	r3, #4
 80072dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	78db      	ldrb	r3, [r3, #3]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d108      	bne.n	80072f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2200      	movs	r2, #0
 80072ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fbf0 	bl	8007ad8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	461a      	mov	r2, r3
 8007306:	2302      	movs	r3, #2
 8007308:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	461a      	mov	r2, r3
 8007322:	2320      	movs	r3, #32
 8007324:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007342:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	3301      	adds	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	f47f af62 	bne.w	800721c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f005 fe98 	bl	800d092 <USB_ReadInterrupts>
 8007362:	4603      	mov	r3, r0
 8007364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007368:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800736c:	f040 80db 	bne.w	8007526 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f005 feb9 	bl	800d0ec <USB_ReadDevAllInEpInterrupt>
 800737a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007380:	e0cd      	b.n	800751e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80c2 	beq.w	8007512 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f005 fedf 	bl	800d15c <USB_ReadDevInEPInterrupt>
 800739e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d057      	beq.n	800745a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	2201      	movs	r2, #1
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	43db      	mvns	r3, r3
 80073c4:	69f9      	ldr	r1, [r7, #28]
 80073c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ca:	4013      	ands	r3, r2
 80073cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073da:	461a      	mov	r2, r3
 80073dc:	2301      	movs	r3, #1
 80073de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d132      	bne.n	800744e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ec:	4613      	mov	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	334c      	adds	r3, #76	; 0x4c
 80073f8:	6819      	ldr	r1, [r3, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4403      	add	r3, r0
 8007408:	3348      	adds	r3, #72	; 0x48
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4419      	add	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	4613      	mov	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4403      	add	r3, r0
 800741c:	334c      	adds	r3, #76	; 0x4c
 800741e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d113      	bne.n	800744e <HAL_PCD_IRQHandler+0x3a2>
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	4613      	mov	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3354      	adds	r3, #84	; 0x54
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d108      	bne.n	800744e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007446:	461a      	mov	r2, r3
 8007448:	2101      	movs	r1, #1
 800744a:	f005 fee7 	bl	800d21c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	b2db      	uxtb	r3, r3
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb01 	bl	8007a5c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	461a      	mov	r2, r3
 8007472:	2308      	movs	r3, #8
 8007474:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	461a      	mov	r2, r3
 800748e:	2310      	movs	r3, #16
 8007490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a8:	461a      	mov	r2, r3
 80074aa:	2340      	movs	r3, #64	; 0x40
 80074ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d023      	beq.n	8007500 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80074b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ba:	6a38      	ldr	r0, [r7, #32]
 80074bc:	f005 fbe6 	bl	800cc8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80074c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c2:	4613      	mov	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	3338      	adds	r3, #56	; 0x38
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d108      	bne.n	80074ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2200      	movs	r2, #0
 80074e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fb01 	bl	8007af0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	461a      	mov	r2, r3
 80074fc:	2302      	movs	r3, #2
 80074fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800750a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fb40 	bl	8007b92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	3301      	adds	r3, #1
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	f47f af2e 	bne.w	8007382 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f005 fdb1 	bl	800d092 <USB_ReadInterrupts>
 8007530:	4603      	mov	r3, r0
 8007532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800753a:	d122      	bne.n	8007582 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007556:	2b01      	cmp	r3, #1
 8007558:	d108      	bne.n	800756c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fcf3 	bl	8007f50 <HAL_PCDEx_LPM_Callback>
 800756a:	e002      	b.n	8007572 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 faa9 	bl	8007ac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695a      	ldr	r2, [r3, #20]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f005 fd83 	bl	800d092 <USB_ReadInterrupts>
 800758c:	4603      	mov	r3, r0
 800758e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007596:	d112      	bne.n	80075be <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa81 	bl	8007ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695a      	ldr	r2, [r3, #20]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80075bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f005 fd65 	bl	800d092 <USB_ReadInterrupts>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d2:	d121      	bne.n	8007618 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695a      	ldr	r2, [r3, #20]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80075e2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d111      	bne.n	8007612 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	089b      	lsrs	r3, r3, #2
 80075fe:	f003 020f 	and.w	r2, r3, #15
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007608:	2101      	movs	r1, #1
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fca0 	bl	8007f50 <HAL_PCDEx_LPM_Callback>
 8007610:	e002      	b.n	8007618 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa4c 	bl	8007ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f005 fd38 	bl	800d092 <USB_ReadInterrupts>
 8007622:	4603      	mov	r3, r0
 8007624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762c:	f040 80b7 	bne.w	800779e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2110      	movs	r1, #16
 800764a:	4618      	mov	r0, r3
 800764c:	f005 fb1e 	bl	800cc8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007654:	e046      	b.n	80076e4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	461a      	mov	r2, r3
 8007664:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007668:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767a:	0151      	lsls	r1, r2, #5
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	440a      	add	r2, r1
 8007680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007688:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800769c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	3301      	adds	r3, #1
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d3b3      	bcc.n	8007656 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007700:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	2b00      	cmp	r3, #0
 8007708:	d016      	beq.n	8007738 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800771a:	f043 030b 	orr.w	r3, r3, #11
 800771e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007730:	f043 030b 	orr.w	r3, r3, #11
 8007734:	6453      	str	r3, [r2, #68]	; 0x44
 8007736:	e015      	b.n	8007764 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	4619      	mov	r1, r3
 8007748:	f242 032b 	movw	r3, #8235	; 0x202b
 800774c:	4313      	orrs	r3, r2
 800774e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	69fa      	ldr	r2, [r7, #28]
 800775a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775e:	f043 030b 	orr.w	r3, r3, #11
 8007762:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007772:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007776:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007788:	461a      	mov	r2, r3
 800778a:	f005 fd47 	bl	800d21c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800779c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f005 fc75 	bl	800d092 <USB_ReadInterrupts>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b2:	d124      	bne.n	80077fe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f005 fd0b 	bl	800d1d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f005 fadf 	bl	800cd86 <USB_GetDevSpeed>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681c      	ldr	r4, [r3, #0]
 80077d4:	f001 f9ae 	bl	8008b34 <HAL_RCC_GetHCLKFreq>
 80077d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	4620      	mov	r0, r4
 80077e4:	f004 fff4 	bl	800c7d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f957 	bl	8007a9c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80077fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f005 fc45 	bl	800d092 <USB_ReadInterrupts>
 8007808:	4603      	mov	r3, r0
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b08      	cmp	r3, #8
 8007810:	d10a      	bne.n	8007828 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f938 	bl	8007a88 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f002 0208 	and.w	r2, r2, #8
 8007826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f005 fc30 	bl	800d092 <USB_ReadInterrupts>
 8007832:	4603      	mov	r3, r0
 8007834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007838:	2b80      	cmp	r3, #128	; 0x80
 800783a:	d122      	bne.n	8007882 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007848:	2301      	movs	r3, #1
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	e014      	b.n	8007878 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007852:	4613      	mov	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d105      	bne.n	8007872 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	b2db      	uxtb	r3, r3
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f95f 	bl	8007b30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	3301      	adds	r3, #1
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787e:	429a      	cmp	r2, r3
 8007880:	d3e5      	bcc.n	800784e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f005 fc03 	bl	800d092 <USB_ReadInterrupts>
 800788c:	4603      	mov	r3, r0
 800788e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007896:	d13b      	bne.n	8007910 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007898:	2301      	movs	r3, #1
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
 800789c:	e02b      	b.n	80078f6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	4613      	mov	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3340      	adds	r3, #64	; 0x40
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d115      	bne.n	80078f0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80078c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da12      	bge.n	80078f0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ce:	4613      	mov	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	333f      	adds	r3, #63	; 0x3f
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f920 	bl	8007b30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	3301      	adds	r3, #1
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3ce      	bcc.n	800789e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800790e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4618      	mov	r0, r3
 8007916:	f005 fbbc 	bl	800d092 <USB_ReadInterrupts>
 800791a:	4603      	mov	r3, r0
 800791c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007924:	d155      	bne.n	80079d2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007926:	2301      	movs	r3, #1
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
 800792a:	e045      	b.n	80079b8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	4613      	mov	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d12e      	bne.n	80079b2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007954:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007956:	2b00      	cmp	r3, #0
 8007958:	da2b      	bge.n	80079b2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007966:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800796a:	429a      	cmp	r2, r3
 800796c:	d121      	bne.n	80079b2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007972:	4613      	mov	r3, r2
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	440b      	add	r3, r1
 800797c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007980:	2201      	movs	r2, #1
 8007982:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079ae:	6053      	str	r3, [r2, #4]
            break;
 80079b0:	e007      	b.n	80079c2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	3301      	adds	r3, #1
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079be:	429a      	cmp	r2, r3
 80079c0:	d3b4      	bcc.n	800792c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80079d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f005 fb5b 	bl	800d092 <USB_ReadInterrupts>
 80079dc:	4603      	mov	r3, r0
 80079de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e6:	d10a      	bne.n	80079fe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f88d 	bl	8007b08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695a      	ldr	r2, [r3, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80079fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f005 fb45 	bl	800d092 <USB_ReadInterrupts>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d115      	bne.n	8007a3e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f879 	bl	8007b1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6859      	ldr	r1, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	e000      	b.n	8007a3e <HAL_PCD_IRQHandler+0x992>
      return;
 8007a3c:	bf00      	nop
    }
  }
}
 8007a3e:	3734      	adds	r7, #52	; 0x34
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd90      	pop	{r4, r7, pc}

08007a44 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da0c      	bge.n	8007b5e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	3338      	adds	r3, #56	; 0x38
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4413      	add	r3, r2
 8007b58:	3304      	adds	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e00c      	b.n	8007b78 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	4613      	mov	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	3304      	adds	r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68f9      	ldr	r1, [r7, #12]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f005 f926 	bl	800cdd0 <USB_EPStopXfer>
 8007b84:	4603      	mov	r3, r0
 8007b86:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b08a      	sub	sp, #40	; 0x28
 8007b96:	af02      	add	r7, sp, #8
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	3338      	adds	r3, #56	; 0x38
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d901      	bls.n	8007bca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e06c      	b.n	8007ca4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d902      	bls.n	8007be6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	3303      	adds	r3, #3
 8007bea:	089b      	lsrs	r3, r3, #2
 8007bec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bee:	e02b      	b.n	8007c48 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d902      	bls.n	8007c0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	3303      	adds	r3, #3
 8007c10:	089b      	lsrs	r3, r3, #2
 8007c12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6919      	ldr	r1, [r3, #16]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4603      	mov	r3, r0
 8007c2a:	6978      	ldr	r0, [r7, #20]
 8007c2c:	f005 f97a 	bl	800cf24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	441a      	add	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	441a      	add	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d809      	bhi.n	8007c72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d203      	bcs.n	8007c72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1be      	bne.n	8007bf0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d811      	bhi.n	8007ca2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	2201      	movs	r2, #1
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	43db      	mvns	r3, r3
 8007c98:	6939      	ldr	r1, [r7, #16]
 8007c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3720      	adds	r7, #32
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	333c      	adds	r3, #60	; 0x3c
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d17b      	bne.n	8007dda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d015      	beq.n	8007d18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	4a61      	ldr	r2, [pc, #388]	; (8007e74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	f240 80b9 	bls.w	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80b3 	beq.w	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d14:	6093      	str	r3, [r2, #8]
 8007d16:	e0a7      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2320      	movs	r3, #32
 8007d32:	6093      	str	r3, [r2, #8]
 8007d34:	e098      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 8093 	bne.w	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4a4b      	ldr	r2, [pc, #300]	; (8007e74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d90f      	bls.n	8007d6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	461a      	mov	r2, r3
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	6093      	str	r3, [r2, #8]
 8007d68:	e07e      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	0159      	lsls	r1, r3, #5
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d114      	bne.n	8007dcc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007db4:	461a      	mov	r2, r3
 8007db6:	2101      	movs	r1, #1
 8007db8:	f005 fa30 	bl	800d21c <USB_EP0_OutStart>
 8007dbc:	e006      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	441a      	add	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff fe36 	bl	8007a44 <HAL_PCD_DataOutStageCallback>
 8007dd8:	e046      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4a26      	ldr	r2, [pc, #152]	; (8007e78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d124      	bne.n	8007e2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfe:	6093      	str	r3, [r2, #8]
 8007e00:	e032      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f003 0320 	and.w	r3, r3, #32
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	461a      	mov	r2, r3
 8007e1a:	2320      	movs	r3, #32
 8007e1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fe0d 	bl	8007a44 <HAL_PCD_DataOutStageCallback>
 8007e2a:	e01d      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d114      	bne.n	8007e5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	4613      	mov	r3, r2
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d108      	bne.n	8007e5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e54:	461a      	mov	r2, r3
 8007e56:	2100      	movs	r1, #0
 8007e58:	f005 f9e0 	bl	800d21c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fdee 	bl	8007a44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3720      	adds	r7, #32
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	4f54300a 	.word	0x4f54300a
 8007e78:	4f54310a 	.word	0x4f54310a

08007e7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	333c      	adds	r3, #60	; 0x3c
 8007e94:	3304      	adds	r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d90e      	bls.n	8007ed0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7ff fdcf 	bl	8007a74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a0a      	ldr	r2, [pc, #40]	; (8007f04 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d90c      	bls.n	8007ef8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d108      	bne.n	8007ef8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	f005 f992 	bl	800d21c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	4f54300a 	.word	0x4f54300a

08007f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <HAL_PCDEx_ActivateLPM+0x44>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	10000003 	.word	0x10000003

08007f50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a04      	ldr	r2, [pc, #16]	; (8007f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f76:	6013      	str	r3, [r2, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40007000 	.word	0x40007000

08007f88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007f92:	4b23      	ldr	r3, [pc, #140]	; (8008020 <HAL_PWREx_EnableOverDrive+0x98>)
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	4a22      	ldr	r2, [pc, #136]	; (8008020 <HAL_PWREx_EnableOverDrive+0x98>)
 8007f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f9e:	4b20      	ldr	r3, [pc, #128]	; (8008020 <HAL_PWREx_EnableOverDrive+0x98>)
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007faa:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fb6:	f7fb f94f 	bl	8003258 <HAL_GetTick>
 8007fba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007fbc:	e009      	b.n	8007fd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007fbe:	f7fb f94b 	bl	8003258 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fcc:	d901      	bls.n	8007fd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e022      	b.n	8008018 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fde:	d1ee      	bne.n	8007fbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007fe0:	4b10      	ldr	r3, [pc, #64]	; (8008024 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a0f      	ldr	r2, [pc, #60]	; (8008024 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fec:	f7fb f934 	bl	8003258 <HAL_GetTick>
 8007ff0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ff2:	e009      	b.n	8008008 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ff4:	f7fb f930 	bl	8003258 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008002:	d901      	bls.n	8008008 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e007      	b.n	8008018 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <HAL_PWREx_EnableOverDrive+0x9c>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008014:	d1ee      	bne.n	8007ff4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40023800 	.word	0x40023800
 8008024:	40007000 	.word	0x40007000

08008028 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af02      	add	r7, sp, #8
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008030:	f7fb f912 	bl	8003258 <HAL_GetTick>
 8008034:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e067      	b.n	8008110 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10b      	bne.n	8008064 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7f9 fced 	bl	8001a34 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800805a:	f241 3188 	movw	r1, #5000	; 0x1388
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f85e 	bl	8008120 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	3b01      	subs	r3, #1
 8008074:	021a      	lsls	r2, r3, #8
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	2120      	movs	r1, #32
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f856 	bl	800813c <QSPI_WaitFlagStateUntilTimeout>
 8008090:	4603      	mov	r3, r0
 8008092:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d135      	bne.n	8008106 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4b1d      	ldr	r3, [pc, #116]	; (8008118 <HAL_QSPI_Init+0xf0>)
 80080a2:	4013      	ands	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6852      	ldr	r2, [r2, #4]
 80080a8:	0611      	lsls	r1, r2, #24
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	68d2      	ldr	r2, [r2, #12]
 80080ae:	4311      	orrs	r1, r2
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	69d2      	ldr	r2, [r2, #28]
 80080b4:	4311      	orrs	r1, r2
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6a12      	ldr	r2, [r2, #32]
 80080ba:	4311      	orrs	r1, r2
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <HAL_QSPI_Init+0xf4>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6912      	ldr	r2, [r2, #16]
 80080d2:	0411      	lsls	r1, r2, #16
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6952      	ldr	r2, [r2, #20]
 80080d8:	4311      	orrs	r1, r2
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6992      	ldr	r2, [r2, #24]
 80080de:	4311      	orrs	r1, r2
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	430b      	orrs	r3, r1
 80080e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800810e:	7afb      	ldrb	r3, [r7, #11]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	00ffff2f 	.word	0x00ffff2f
 800811c:	ffe0f8fe 	.word	0xffe0f8fe

08008120 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	4613      	mov	r3, r2
 800814a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800814c:	e01a      	b.n	8008184 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d016      	beq.n	8008184 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7fb f87f 	bl	8003258 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2204      	movs	r2, #4
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008178:	f043 0201 	orr.w	r2, r3, #1
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e00e      	b.n	80081a2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	461a      	mov	r2, r3
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	429a      	cmp	r2, r3
 800819e:	d1d6      	bne.n	800814e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e29b      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8087 	beq.w	80082de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081d0:	4b96      	ldr	r3, [pc, #600]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 030c 	and.w	r3, r3, #12
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d00c      	beq.n	80081f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081dc:	4b93      	ldr	r3, [pc, #588]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 030c 	and.w	r3, r3, #12
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d112      	bne.n	800820e <HAL_RCC_OscConfig+0x62>
 80081e8:	4b90      	ldr	r3, [pc, #576]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f4:	d10b      	bne.n	800820e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081f6:	4b8d      	ldr	r3, [pc, #564]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d06c      	beq.n	80082dc <HAL_RCC_OscConfig+0x130>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d168      	bne.n	80082dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e275      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008216:	d106      	bne.n	8008226 <HAL_RCC_OscConfig+0x7a>
 8008218:	4b84      	ldr	r3, [pc, #528]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a83      	ldr	r2, [pc, #524]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800821e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	e02e      	b.n	8008284 <HAL_RCC_OscConfig+0xd8>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10c      	bne.n	8008248 <HAL_RCC_OscConfig+0x9c>
 800822e:	4b7f      	ldr	r3, [pc, #508]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a7e      	ldr	r2, [pc, #504]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	4b7c      	ldr	r3, [pc, #496]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a7b      	ldr	r2, [pc, #492]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e01d      	b.n	8008284 <HAL_RCC_OscConfig+0xd8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008250:	d10c      	bne.n	800826c <HAL_RCC_OscConfig+0xc0>
 8008252:	4b76      	ldr	r3, [pc, #472]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a75      	ldr	r2, [pc, #468]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	4b73      	ldr	r3, [pc, #460]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a72      	ldr	r2, [pc, #456]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e00b      	b.n	8008284 <HAL_RCC_OscConfig+0xd8>
 800826c:	4b6f      	ldr	r3, [pc, #444]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a6e      	ldr	r2, [pc, #440]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4b6c      	ldr	r3, [pc, #432]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6b      	ldr	r2, [pc, #428]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800827e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d013      	beq.n	80082b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800828c:	f7fa ffe4 	bl	8003258 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008294:	f7fa ffe0 	bl	8003258 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b64      	cmp	r3, #100	; 0x64
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e229      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a6:	4b61      	ldr	r3, [pc, #388]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f0      	beq.n	8008294 <HAL_RCC_OscConfig+0xe8>
 80082b2:	e014      	b.n	80082de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b4:	f7fa ffd0 	bl	8003258 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082bc:	f7fa ffcc 	bl	8003258 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b64      	cmp	r3, #100	; 0x64
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e215      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ce:	4b57      	ldr	r3, [pc, #348]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <HAL_RCC_OscConfig+0x110>
 80082da:	e000      	b.n	80082de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d069      	beq.n	80083be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ea:	4b50      	ldr	r3, [pc, #320]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082f6:	4b4d      	ldr	r3, [pc, #308]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d11c      	bne.n	800833c <HAL_RCC_OscConfig+0x190>
 8008302:	4b4a      	ldr	r3, [pc, #296]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d116      	bne.n	800833c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800830e:	4b47      	ldr	r3, [pc, #284]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_RCC_OscConfig+0x17a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d001      	beq.n	8008326 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e1e9      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008326:	4b41      	ldr	r3, [pc, #260]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	493d      	ldr	r1, [pc, #244]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008336:	4313      	orrs	r3, r2
 8008338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833a:	e040      	b.n	80083be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d023      	beq.n	800838c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008344:	4b39      	ldr	r3, [pc, #228]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a38      	ldr	r2, [pc, #224]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008350:	f7fa ff82 	bl	8003258 <HAL_GetTick>
 8008354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008358:	f7fa ff7e 	bl	8003258 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e1c7      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800836a:	4b30      	ldr	r3, [pc, #192]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f0      	beq.n	8008358 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008376:	4b2d      	ldr	r3, [pc, #180]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4929      	ldr	r1, [pc, #164]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008386:	4313      	orrs	r3, r2
 8008388:	600b      	str	r3, [r1, #0]
 800838a:	e018      	b.n	80083be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800838c:	4b27      	ldr	r3, [pc, #156]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a26      	ldr	r2, [pc, #152]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008392:	f023 0301 	bic.w	r3, r3, #1
 8008396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008398:	f7fa ff5e 	bl	8003258 <HAL_GetTick>
 800839c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083a0:	f7fa ff5a 	bl	8003258 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e1a3      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083b2:	4b1e      	ldr	r3, [pc, #120]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f0      	bne.n	80083a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d038      	beq.n	800843c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d019      	beq.n	8008406 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083d2:	4b16      	ldr	r3, [pc, #88]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	4a15      	ldr	r2, [pc, #84]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80083d8:	f043 0301 	orr.w	r3, r3, #1
 80083dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083de:	f7fa ff3b 	bl	8003258 <HAL_GetTick>
 80083e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e4:	e008      	b.n	80083f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083e6:	f7fa ff37 	bl	8003258 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e180      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <HAL_RCC_OscConfig+0x280>)
 80083fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0f0      	beq.n	80083e6 <HAL_RCC_OscConfig+0x23a>
 8008404:	e01a      	b.n	800843c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008406:	4b09      	ldr	r3, [pc, #36]	; (800842c <HAL_RCC_OscConfig+0x280>)
 8008408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840a:	4a08      	ldr	r2, [pc, #32]	; (800842c <HAL_RCC_OscConfig+0x280>)
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008412:	f7fa ff21 	bl	8003258 <HAL_GetTick>
 8008416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008418:	e00a      	b.n	8008430 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800841a:	f7fa ff1d 	bl	8003258 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d903      	bls.n	8008430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e166      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
 800842c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008430:	4b92      	ldr	r3, [pc, #584]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1ee      	bne.n	800841a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80a4 	beq.w	8008592 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800844a:	4b8c      	ldr	r3, [pc, #560]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10d      	bne.n	8008472 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008456:	4b89      	ldr	r3, [pc, #548]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	4a88      	ldr	r2, [pc, #544]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800845c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008460:	6413      	str	r3, [r2, #64]	; 0x40
 8008462:	4b86      	ldr	r3, [pc, #536]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800846e:	2301      	movs	r3, #1
 8008470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008472:	4b83      	ldr	r3, [pc, #524]	; (8008680 <HAL_RCC_OscConfig+0x4d4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	2b00      	cmp	r3, #0
 800847c:	d118      	bne.n	80084b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800847e:	4b80      	ldr	r3, [pc, #512]	; (8008680 <HAL_RCC_OscConfig+0x4d4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a7f      	ldr	r2, [pc, #508]	; (8008680 <HAL_RCC_OscConfig+0x4d4>)
 8008484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800848a:	f7fa fee5 	bl	8003258 <HAL_GetTick>
 800848e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008490:	e008      	b.n	80084a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008492:	f7fa fee1 	bl	8003258 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b64      	cmp	r3, #100	; 0x64
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e12a      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084a4:	4b76      	ldr	r3, [pc, #472]	; (8008680 <HAL_RCC_OscConfig+0x4d4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0f0      	beq.n	8008492 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d106      	bne.n	80084c6 <HAL_RCC_OscConfig+0x31a>
 80084b8:	4b70      	ldr	r3, [pc, #448]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084bc:	4a6f      	ldr	r2, [pc, #444]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084be:	f043 0301 	orr.w	r3, r3, #1
 80084c2:	6713      	str	r3, [r2, #112]	; 0x70
 80084c4:	e02d      	b.n	8008522 <HAL_RCC_OscConfig+0x376>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10c      	bne.n	80084e8 <HAL_RCC_OscConfig+0x33c>
 80084ce:	4b6b      	ldr	r3, [pc, #428]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	4a6a      	ldr	r2, [pc, #424]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	6713      	str	r3, [r2, #112]	; 0x70
 80084da:	4b68      	ldr	r3, [pc, #416]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084de:	4a67      	ldr	r2, [pc, #412]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	6713      	str	r3, [r2, #112]	; 0x70
 80084e6:	e01c      	b.n	8008522 <HAL_RCC_OscConfig+0x376>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b05      	cmp	r3, #5
 80084ee:	d10c      	bne.n	800850a <HAL_RCC_OscConfig+0x35e>
 80084f0:	4b62      	ldr	r3, [pc, #392]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f4:	4a61      	ldr	r2, [pc, #388]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084f6:	f043 0304 	orr.w	r3, r3, #4
 80084fa:	6713      	str	r3, [r2, #112]	; 0x70
 80084fc:	4b5f      	ldr	r3, [pc, #380]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80084fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008500:	4a5e      	ldr	r2, [pc, #376]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	6713      	str	r3, [r2, #112]	; 0x70
 8008508:	e00b      	b.n	8008522 <HAL_RCC_OscConfig+0x376>
 800850a:	4b5c      	ldr	r3, [pc, #368]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800850c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850e:	4a5b      	ldr	r2, [pc, #364]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008510:	f023 0301 	bic.w	r3, r3, #1
 8008514:	6713      	str	r3, [r2, #112]	; 0x70
 8008516:	4b59      	ldr	r3, [pc, #356]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a58      	ldr	r2, [pc, #352]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800851c:	f023 0304 	bic.w	r3, r3, #4
 8008520:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d015      	beq.n	8008556 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852a:	f7fa fe95 	bl	8003258 <HAL_GetTick>
 800852e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008530:	e00a      	b.n	8008548 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008532:	f7fa fe91 	bl	8003258 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008540:	4293      	cmp	r3, r2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e0d8      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008548:	4b4c      	ldr	r3, [pc, #304]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0ee      	beq.n	8008532 <HAL_RCC_OscConfig+0x386>
 8008554:	e014      	b.n	8008580 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008556:	f7fa fe7f 	bl	8003258 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800855c:	e00a      	b.n	8008574 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800855e:	f7fa fe7b 	bl	8003258 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	f241 3288 	movw	r2, #5000	; 0x1388
 800856c:	4293      	cmp	r3, r2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e0c2      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008574:	4b41      	ldr	r3, [pc, #260]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1ee      	bne.n	800855e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d105      	bne.n	8008592 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008586:	4b3d      	ldr	r3, [pc, #244]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	4a3c      	ldr	r2, [pc, #240]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800858c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008590:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 80ae 	beq.w	80086f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800859c:	4b37      	ldr	r3, [pc, #220]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f003 030c 	and.w	r3, r3, #12
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d06d      	beq.n	8008684 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d14b      	bne.n	8008648 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085b0:	4b32      	ldr	r3, [pc, #200]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a31      	ldr	r2, [pc, #196]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80085b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085bc:	f7fa fe4c 	bl	8003258 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c4:	f7fa fe48 	bl	8003258 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e091      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085d6:	4b29      	ldr	r3, [pc, #164]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	019b      	lsls	r3, r3, #6
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	3b01      	subs	r3, #1
 80085fc:	041b      	lsls	r3, r3, #16
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	491b      	ldr	r1, [pc, #108]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008610:	4313      	orrs	r3, r2
 8008612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008614:	4b19      	ldr	r3, [pc, #100]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a18      	ldr	r2, [pc, #96]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800861a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008620:	f7fa fe1a 	bl	8003258 <HAL_GetTick>
 8008624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008628:	f7fa fe16 	bl	8003258 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e05f      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863a:	4b10      	ldr	r3, [pc, #64]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <HAL_RCC_OscConfig+0x47c>
 8008646:	e057      	b.n	80086f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008648:	4b0c      	ldr	r3, [pc, #48]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a0b      	ldr	r2, [pc, #44]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 800864e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008654:	f7fa fe00 	bl	8003258 <HAL_GetTick>
 8008658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800865c:	f7fa fdfc 	bl	8003258 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e045      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <HAL_RCC_OscConfig+0x4d0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1f0      	bne.n	800865c <HAL_RCC_OscConfig+0x4b0>
 800867a:	e03d      	b.n	80086f8 <HAL_RCC_OscConfig+0x54c>
 800867c:	40023800 	.word	0x40023800
 8008680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008684:	4b1f      	ldr	r3, [pc, #124]	; (8008704 <HAL_RCC_OscConfig+0x558>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d030      	beq.n	80086f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800869c:	429a      	cmp	r2, r3
 800869e:	d129      	bne.n	80086f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d122      	bne.n	80086f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086b4:	4013      	ands	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086bc:	4293      	cmp	r3, r2
 80086be:	d119      	bne.n	80086f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	3b01      	subs	r3, #1
 80086ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d10f      	bne.n	80086f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d107      	bne.n	80086f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d001      	beq.n	80086f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40023800 	.word	0x40023800

08008708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0d0      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008720:	4b6a      	ldr	r3, [pc, #424]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d910      	bls.n	8008750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872e:	4b67      	ldr	r3, [pc, #412]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f023 020f 	bic.w	r2, r3, #15
 8008736:	4965      	ldr	r1, [pc, #404]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	4313      	orrs	r3, r2
 800873c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873e:	4b63      	ldr	r3, [pc, #396]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d001      	beq.n	8008750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0b8      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d020      	beq.n	800879e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008768:	4b59      	ldr	r3, [pc, #356]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4a58      	ldr	r2, [pc, #352]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 800876e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008780:	4b53      	ldr	r3, [pc, #332]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	4a52      	ldr	r2, [pc, #328]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800878a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800878c:	4b50      	ldr	r3, [pc, #320]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	494d      	ldr	r1, [pc, #308]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 800879a:	4313      	orrs	r3, r2
 800879c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d040      	beq.n	800882c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d107      	bne.n	80087c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b2:	4b47      	ldr	r3, [pc, #284]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d115      	bne.n	80087ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e07f      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d107      	bne.n	80087da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ca:	4b41      	ldr	r3, [pc, #260]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d109      	bne.n	80087ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e073      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e06b      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087ea:	4b39      	ldr	r3, [pc, #228]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f023 0203 	bic.w	r2, r3, #3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	4936      	ldr	r1, [pc, #216]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087fc:	f7fa fd2c 	bl	8003258 <HAL_GetTick>
 8008800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008802:	e00a      	b.n	800881a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008804:	f7fa fd28 	bl	8003258 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e053      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800881a:	4b2d      	ldr	r3, [pc, #180]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 020c 	and.w	r2, r3, #12
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	429a      	cmp	r2, r3
 800882a:	d1eb      	bne.n	8008804 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800882c:	4b27      	ldr	r3, [pc, #156]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d210      	bcs.n	800885c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800883a:	4b24      	ldr	r3, [pc, #144]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f023 020f 	bic.w	r2, r3, #15
 8008842:	4922      	ldr	r1, [pc, #136]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	4313      	orrs	r3, r2
 8008848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800884a:	4b20      	ldr	r3, [pc, #128]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d001      	beq.n	800885c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e032      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d008      	beq.n	800887a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008868:	4b19      	ldr	r3, [pc, #100]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	4916      	ldr	r1, [pc, #88]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008876:	4313      	orrs	r3, r2
 8008878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	490e      	ldr	r1, [pc, #56]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008896:	4313      	orrs	r3, r2
 8008898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800889a:	f000 f885 	bl	80089a8 <HAL_RCC_GetSysClockFreq>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	091b      	lsrs	r3, r3, #4
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	490a      	ldr	r1, [pc, #40]	; (80088d4 <HAL_RCC_ClockConfig+0x1cc>)
 80088ac:	5ccb      	ldrb	r3, [r1, r3]
 80088ae:	fa22 f303 	lsr.w	r3, r2, r3
 80088b2:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <HAL_RCC_ClockConfig+0x1d0>)
 80088b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_RCC_ClockConfig+0x1d4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fdfa 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40023c00 	.word	0x40023c00
 80088d0:	40023800 	.word	0x40023800
 80088d4:	0800e8d0 	.word	0x0800e8d0
 80088d8:	20000000 	.word	0x20000000
 80088dc:	20000004 	.word	0x20000004

080088e0 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08c      	sub	sp, #48	; 0x30
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d127      	bne.n	8008942 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80088f2:	4b2a      	ldr	r3, [pc, #168]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	4a29      	ldr	r2, [pc, #164]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	6313      	str	r3, [r2, #48]	; 0x30
 80088fe:	4b27      	ldr	r3, [pc, #156]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	61bb      	str	r3, [r7, #24]
 8008908:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800890a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800890e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008910:	2302      	movs	r3, #2
 8008912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008914:	2303      	movs	r3, #3
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008918:	2300      	movs	r3, #0
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800891c:	2300      	movs	r3, #0
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008920:	f107 031c 	add.w	r3, r7, #28
 8008924:	4619      	mov	r1, r3
 8008926:	481e      	ldr	r0, [pc, #120]	; (80089a0 <HAL_RCC_MCOConfig+0xc0>)
 8008928:	f7fc fd58 	bl	80053dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800892c:	4b1b      	ldr	r3, [pc, #108]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	430b      	orrs	r3, r1
 800893a:	4918      	ldr	r1, [pc, #96]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 800893c:	4313      	orrs	r3, r2
 800893e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8008940:	e027      	b.n	8008992 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8008942:	4b16      	ldr	r3, [pc, #88]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	4a15      	ldr	r2, [pc, #84]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 8008948:	f043 0304 	orr.w	r3, r3, #4
 800894c:	6313      	str	r3, [r2, #48]	; 0x30
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800895a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800895e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008960:	2302      	movs	r3, #2
 8008962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008964:	2303      	movs	r3, #3
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008968:	2300      	movs	r3, #0
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800896c:	2300      	movs	r3, #0
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008970:	f107 031c 	add.w	r3, r7, #28
 8008974:	4619      	mov	r1, r3
 8008976:	480b      	ldr	r0, [pc, #44]	; (80089a4 <HAL_RCC_MCOConfig+0xc4>)
 8008978:	f7fc fd30 	bl	80053dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	00d9      	lsls	r1, r3, #3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	430b      	orrs	r3, r1
 800898c:	4903      	ldr	r1, [pc, #12]	; (800899c <HAL_RCC_MCOConfig+0xbc>)
 800898e:	4313      	orrs	r3, r2
 8008990:	608b      	str	r3, [r1, #8]
}
 8008992:	bf00      	nop
 8008994:	3730      	adds	r7, #48	; 0x30
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	40023800 	.word	0x40023800
 80089a0:	40020000 	.word	0x40020000
 80089a4:	40020800 	.word	0x40020800

080089a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089ac:	b090      	sub	sp, #64	; 0x40
 80089ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
 80089b4:	2300      	movs	r3, #0
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b8:	2300      	movs	r3, #0
 80089ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089c0:	4b59      	ldr	r3, [pc, #356]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 030c 	and.w	r3, r3, #12
 80089c8:	2b08      	cmp	r3, #8
 80089ca:	d00d      	beq.n	80089e8 <HAL_RCC_GetSysClockFreq+0x40>
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	f200 80a1 	bhi.w	8008b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <HAL_RCC_GetSysClockFreq+0x34>
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d003      	beq.n	80089e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80089da:	e09b      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089dc:	4b53      	ldr	r3, [pc, #332]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80089de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80089e0:	e09b      	b.n	8008b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089e2:	4b53      	ldr	r3, [pc, #332]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80089e6:	e098      	b.n	8008b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089e8:	4b4f      	ldr	r3, [pc, #316]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80089f2:	4b4d      	ldr	r3, [pc, #308]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d028      	beq.n	8008a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089fe:	4b4a      	ldr	r3, [pc, #296]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	099b      	lsrs	r3, r3, #6
 8008a04:	2200      	movs	r2, #0
 8008a06:	623b      	str	r3, [r7, #32]
 8008a08:	627a      	str	r2, [r7, #36]	; 0x24
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a10:	2100      	movs	r1, #0
 8008a12:	4b47      	ldr	r3, [pc, #284]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a14:	fb03 f201 	mul.w	r2, r3, r1
 8008a18:	2300      	movs	r3, #0
 8008a1a:	fb00 f303 	mul.w	r3, r0, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	4a43      	ldr	r2, [pc, #268]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a22:	fba0 1202 	umull	r1, r2, r0, r2
 8008a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a28:	460a      	mov	r2, r1
 8008a2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2e:	4413      	add	r3, r2
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	2200      	movs	r2, #0
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	61fa      	str	r2, [r7, #28]
 8008a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008a42:	f7f7 fbfd 	bl	8000240 <__aeabi_uldivmod>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a4e:	e053      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a50:	4b35      	ldr	r3, [pc, #212]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	099b      	lsrs	r3, r3, #6
 8008a56:	2200      	movs	r2, #0
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	617a      	str	r2, [r7, #20]
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a62:	f04f 0b00 	mov.w	fp, #0
 8008a66:	4652      	mov	r2, sl
 8008a68:	465b      	mov	r3, fp
 8008a6a:	f04f 0000 	mov.w	r0, #0
 8008a6e:	f04f 0100 	mov.w	r1, #0
 8008a72:	0159      	lsls	r1, r3, #5
 8008a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a78:	0150      	lsls	r0, r2, #5
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8008a82:	eb63 090b 	sbc.w	r9, r3, fp
 8008a86:	f04f 0200 	mov.w	r2, #0
 8008a8a:	f04f 0300 	mov.w	r3, #0
 8008a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8008a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	00eb      	lsls	r3, r5, #3
 8008aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ab0:	00e2      	lsls	r2, r4, #3
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	461d      	mov	r5, r3
 8008ab6:	eb14 030a 	adds.w	r3, r4, sl
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	eb45 030b 	adc.w	r3, r5, fp
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ace:	4629      	mov	r1, r5
 8008ad0:	028b      	lsls	r3, r1, #10
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ad8:	4621      	mov	r1, r4
 8008ada:	028a      	lsls	r2, r1, #10
 8008adc:	4610      	mov	r0, r2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	60fa      	str	r2, [r7, #12]
 8008ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008aec:	f7f7 fba8 	bl	8000240 <__aeabi_uldivmod>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4613      	mov	r3, r2
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008af8:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	0c1b      	lsrs	r3, r3, #16
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	3301      	adds	r3, #1
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b12:	e002      	b.n	8008b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8008b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3740      	adds	r7, #64	; 0x40
 8008b20:	46bd      	mov	sp, r7
 8008b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b26:	bf00      	nop
 8008b28:	40023800 	.word	0x40023800
 8008b2c:	00f42400 	.word	0x00f42400
 8008b30:	017d7840 	.word	0x017d7840

08008b34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	20000000 	.word	0x20000000

08008b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b50:	f7ff fff0 	bl	8008b34 <HAL_RCC_GetHCLKFreq>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	0a9b      	lsrs	r3, r3, #10
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	4903      	ldr	r1, [pc, #12]	; (8008b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b62:	5ccb      	ldrb	r3, [r1, r3]
 8008b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	0800e8e0 	.word	0x0800e8e0

08008b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b78:	f7ff ffdc 	bl	8008b34 <HAL_RCC_GetHCLKFreq>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	0b5b      	lsrs	r3, r3, #13
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	4903      	ldr	r1, [pc, #12]	; (8008b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b8a:	5ccb      	ldrb	r3, [r1, r3]
 8008b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	40023800 	.word	0x40023800
 8008b98:	0800e8e0 	.word	0x0800e8e0

08008b9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	220f      	movs	r2, #15
 8008baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008bac:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0203 	and.w	r2, r3, #3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	08db      	lsrs	r3, r3, #3
 8008bd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bde:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <HAL_RCC_GetClockConfig+0x60>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 020f 	and.w	r2, r3, #15
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	601a      	str	r2, [r3, #0]
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40023800 	.word	0x40023800
 8008bfc:	40023c00 	.word	0x40023c00

08008c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d012      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c28:	4b69      	ldr	r3, [pc, #420]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	4a68      	ldr	r2, [pc, #416]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c32:	6093      	str	r3, [r2, #8]
 8008c34:	4b66      	ldr	r3, [pc, #408]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3c:	4964      	ldr	r1, [pc, #400]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d017      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c5a:	4b5d      	ldr	r3, [pc, #372]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	4959      	ldr	r1, [pc, #356]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c78:	d101      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008c86:	2301      	movs	r3, #1
 8008c88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d017      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c96:	4b4e      	ldr	r3, [pc, #312]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	494a      	ldr	r1, [pc, #296]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cb4:	d101      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 808b 	beq.w	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ce4:	4b3a      	ldr	r3, [pc, #232]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	4a39      	ldr	r2, [pc, #228]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cee:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf0:	4b37      	ldr	r3, [pc, #220]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf8:	60bb      	str	r3, [r7, #8]
 8008cfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008cfc:	4b35      	ldr	r3, [pc, #212]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a34      	ldr	r2, [pc, #208]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d08:	f7fa faa6 	bl	8003258 <HAL_GetTick>
 8008d0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d10:	f7fa faa2 	bl	8003258 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b64      	cmp	r3, #100	; 0x64
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e38f      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d22:	4b2c      	ldr	r3, [pc, #176]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f0      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d2e:	4b28      	ldr	r3, [pc, #160]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d035      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d02e      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d4c:	4b20      	ldr	r3, [pc, #128]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d56:	4b1e      	ldr	r3, [pc, #120]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d62:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d66:	4a1a      	ldr	r2, [pc, #104]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008d6e:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d74:	4b16      	ldr	r3, [pc, #88]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d114      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d80:	f7fa fa6a 	bl	8003258 <HAL_GetTick>
 8008d84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d86:	e00a      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d88:	f7fa fa66 	bl	8003258 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d901      	bls.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e351      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9e:	4b0c      	ldr	r3, [pc, #48]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0ee      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db6:	d111      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008dc6:	400b      	ands	r3, r1
 8008dc8:	4901      	ldr	r1, [pc, #4]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	608b      	str	r3, [r1, #8]
 8008dce:	e00b      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	40007000 	.word	0x40007000
 8008dd8:	0ffffcff 	.word	0x0ffffcff
 8008ddc:	4bac      	ldr	r3, [pc, #688]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	4aab      	ldr	r2, [pc, #684]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008de2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008de6:	6093      	str	r3, [r2, #8]
 8008de8:	4ba9      	ldr	r3, [pc, #676]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df4:	49a6      	ldr	r1, [pc, #664]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0310 	and.w	r3, r3, #16
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d010      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e06:	4ba2      	ldr	r3, [pc, #648]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e0c:	4aa0      	ldr	r2, [pc, #640]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008e16:	4b9e      	ldr	r3, [pc, #632]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	499b      	ldr	r1, [pc, #620]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e34:	4b96      	ldr	r3, [pc, #600]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e42:	4993      	ldr	r1, [pc, #588]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e56:	4b8e      	ldr	r3, [pc, #568]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e64:	498a      	ldr	r1, [pc, #552]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e78:	4b85      	ldr	r3, [pc, #532]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e86:	4982      	ldr	r1, [pc, #520]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e9a:	4b7d      	ldr	r3, [pc, #500]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea8:	4979      	ldr	r1, [pc, #484]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ebc:	4b74      	ldr	r3, [pc, #464]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec2:	f023 0203 	bic.w	r2, r3, #3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eca:	4971      	ldr	r1, [pc, #452]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ede:	4b6c      	ldr	r3, [pc, #432]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee4:	f023 020c 	bic.w	r2, r3, #12
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eec:	4968      	ldr	r1, [pc, #416]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f00:	4b63      	ldr	r3, [pc, #396]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0e:	4960      	ldr	r1, [pc, #384]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f22:	4b5b      	ldr	r3, [pc, #364]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f30:	4957      	ldr	r1, [pc, #348]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f44:	4b52      	ldr	r3, [pc, #328]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	494f      	ldr	r1, [pc, #316]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008f66:	4b4a      	ldr	r3, [pc, #296]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f74:	4946      	ldr	r1, [pc, #280]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00a      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008f88:	4b41      	ldr	r3, [pc, #260]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f96:	493e      	ldr	r1, [pc, #248]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008faa:	4b39      	ldr	r3, [pc, #228]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb8:	4935      	ldr	r1, [pc, #212]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00a      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fcc:	4b30      	ldr	r3, [pc, #192]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fda:	492d      	ldr	r1, [pc, #180]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d011      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fee:	4b28      	ldr	r3, [pc, #160]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ffc:	4924      	ldr	r1, [pc, #144]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800900c:	d101      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800900e:	2301      	movs	r3, #1
 8009010:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800901e:	2301      	movs	r3, #1
 8009020:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800902e:	4b18      	ldr	r3, [pc, #96]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009034:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903c:	4914      	ldr	r1, [pc, #80]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009050:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009056:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009060:	490b      	ldr	r1, [pc, #44]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00f      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009084:	4902      	ldr	r1, [pc, #8]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009086:	4313      	orrs	r3, r2
 8009088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800908e:	bf00      	nop
 8009090:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090a0:	4b8a      	ldr	r3, [pc, #552]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b0:	4986      	ldr	r1, [pc, #536]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80090c4:	4b81      	ldr	r3, [pc, #516]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d4:	497d      	ldr	r1, [pc, #500]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d006      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80d6 	beq.w	800929c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80090f0:	4b76      	ldr	r3, [pc, #472]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a75      	ldr	r2, [pc, #468]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090fc:	f7fa f8ac 	bl	8003258 <HAL_GetTick>
 8009100:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009104:	f7fa f8a8 	bl	8003258 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b64      	cmp	r3, #100	; 0x64
 8009110:	d901      	bls.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e195      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009116:	4b6d      	ldr	r3, [pc, #436]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f0      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d021      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009132:	2b00      	cmp	r3, #0
 8009134:	d11d      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009136:	4b65      	ldr	r3, [pc, #404]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800913c:	0c1b      	lsrs	r3, r3, #16
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009144:	4b61      	ldr	r3, [pc, #388]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914a:	0e1b      	lsrs	r3, r3, #24
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	019a      	lsls	r2, r3, #6
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	431a      	orrs	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	061b      	lsls	r3, r3, #24
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	071b      	lsls	r3, r3, #28
 800916a:	4958      	ldr	r1, [pc, #352]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800916c:	4313      	orrs	r3, r2
 800916e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009186:	d00a      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009190:	2b00      	cmp	r3, #0
 8009192:	d02e      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800919c:	d129      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800919e:	4b4b      	ldr	r3, [pc, #300]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091ac:	4b47      	ldr	r3, [pc, #284]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b2:	0f1b      	lsrs	r3, r3, #28
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	019a      	lsls	r2, r3, #6
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	041b      	lsls	r3, r3, #16
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	061b      	lsls	r3, r3, #24
 80091cc:	431a      	orrs	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	071b      	lsls	r3, r3, #28
 80091d2:	493e      	ldr	r1, [pc, #248]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80091da:	4b3c      	ldr	r3, [pc, #240]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e0:	f023 021f 	bic.w	r2, r3, #31
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	3b01      	subs	r3, #1
 80091ea:	4938      	ldr	r1, [pc, #224]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01d      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80091fe:	4b33      	ldr	r3, [pc, #204]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009204:	0e1b      	lsrs	r3, r3, #24
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800920c:	4b2f      	ldr	r3, [pc, #188]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800920e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009212:	0f1b      	lsrs	r3, r3, #28
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	019a      	lsls	r2, r3, #6
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	041b      	lsls	r3, r3, #16
 8009226:	431a      	orrs	r2, r3
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	061b      	lsls	r3, r3, #24
 800922c:	431a      	orrs	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	071b      	lsls	r3, r3, #28
 8009232:	4926      	ldr	r1, [pc, #152]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	019a      	lsls	r2, r3, #6
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	061b      	lsls	r3, r3, #24
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	071b      	lsls	r3, r3, #28
 8009262:	491a      	ldr	r1, [pc, #104]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009264:	4313      	orrs	r3, r2
 8009266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800926a:	4b18      	ldr	r3, [pc, #96]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a17      	ldr	r2, [pc, #92]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009276:	f7f9 ffef 	bl	8003258 <HAL_GetTick>
 800927a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800927c:	e008      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800927e:	f7f9 ffeb 	bl	8003258 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b64      	cmp	r3, #100	; 0x64
 800928a:	d901      	bls.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e0d8      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009290:	4b0e      	ldr	r3, [pc, #56]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	f040 80ce 	bne.w	8009440 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b0:	f7f9 ffd2 	bl	8003258 <HAL_GetTick>
 80092b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092b6:	e00b      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80092b8:	f7f9 ffce 	bl	8003258 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b64      	cmp	r3, #100	; 0x64
 80092c4:	d904      	bls.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e0bb      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80092ca:	bf00      	nop
 80092cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092d0:	4b5e      	ldr	r3, [pc, #376]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092dc:	d0ec      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d02e      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	2b00      	cmp	r3, #0
 8009304:	d12a      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009306:	4b51      	ldr	r3, [pc, #324]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930c:	0c1b      	lsrs	r3, r3, #16
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009314:	4b4d      	ldr	r3, [pc, #308]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800931a:	0f1b      	lsrs	r3, r3, #28
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	019a      	lsls	r2, r3, #6
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	041b      	lsls	r3, r3, #16
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	061b      	lsls	r3, r3, #24
 8009334:	431a      	orrs	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	071b      	lsls	r3, r3, #28
 800933a:	4944      	ldr	r1, [pc, #272]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800933c:	4313      	orrs	r3, r2
 800933e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009342:	4b42      	ldr	r3, [pc, #264]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	3b01      	subs	r3, #1
 8009352:	021b      	lsls	r3, r3, #8
 8009354:	493d      	ldr	r1, [pc, #244]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009356:	4313      	orrs	r3, r2
 8009358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d022      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009370:	d11d      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009372:	4b36      	ldr	r3, [pc, #216]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009378:	0e1b      	lsrs	r3, r3, #24
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009380:	4b32      	ldr	r3, [pc, #200]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009386:	0f1b      	lsrs	r3, r3, #28
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	019a      	lsls	r2, r3, #6
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	041b      	lsls	r3, r3, #16
 800939a:	431a      	orrs	r2, r3
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	061b      	lsls	r3, r3, #24
 80093a0:	431a      	orrs	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	071b      	lsls	r3, r3, #28
 80093a6:	4929      	ldr	r1, [pc, #164]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d028      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093ba:	4b24      	ldr	r3, [pc, #144]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c0:	0e1b      	lsrs	r3, r3, #24
 80093c2:	f003 030f 	and.w	r3, r3, #15
 80093c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093c8:	4b20      	ldr	r3, [pc, #128]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ce:	0c1b      	lsrs	r3, r3, #16
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	019a      	lsls	r2, r3, #6
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	431a      	orrs	r2, r3
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	061b      	lsls	r3, r3, #24
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	071b      	lsls	r3, r3, #28
 80093ee:	4917      	ldr	r1, [pc, #92]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4911      	ldr	r1, [pc, #68]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0e      	ldr	r2, [pc, #56]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009418:	f7f9 ff1e 	bl	8003258 <HAL_GetTick>
 800941c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800941e:	e008      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009420:	f7f9 ff1a 	bl	8003258 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b64      	cmp	r3, #100	; 0x64
 800942c:	d901      	bls.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e007      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009432:	4b06      	ldr	r3, [pc, #24]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800943a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943e:	d1ef      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40023800 	.word	0x40023800

08009450 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800946e:	f040 80a3 	bne.w	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009472:	4ba8      	ldr	r3, [pc, #672]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009478:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009480:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009488:	f000 808a 	beq.w	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009492:	f200 8093 	bhi.w	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800949c:	d07d      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094a4:	f200 808a 	bhi.w	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b4:	d039      	beq.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80094b6:	e081      	b.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80094b8:	4b96      	ldr	r3, [pc, #600]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d108      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80094c4:	4b93      	ldr	r3, [pc, #588]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094cc:	4a92      	ldr	r2, [pc, #584]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80094ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d2:	613b      	str	r3, [r7, #16]
 80094d4:	e007      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80094d6:	4b8f      	ldr	r3, [pc, #572]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094de:	4a8f      	ldr	r2, [pc, #572]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80094e6:	4b8b      	ldr	r3, [pc, #556]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80094f4:	4b87      	ldr	r3, [pc, #540]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80094f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fa:	099b      	lsrs	r3, r3, #6
 80094fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	fb03 f202 	mul.w	r2, r3, r2
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	fbb2 f3f3 	udiv	r3, r2, r3
 800950c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800950e:	4b81      	ldr	r3, [pc, #516]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009514:	0a1b      	lsrs	r3, r3, #8
 8009516:	f003 031f 	and.w	r3, r3, #31
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	fbb2 f3f3 	udiv	r3, r2, r3
 8009526:	617b      	str	r3, [r7, #20]
        break;
 8009528:	e049      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800952a:	4b7a      	ldr	r3, [pc, #488]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d108      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009536:	4b77      	ldr	r3, [pc, #476]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800953e:	4a76      	ldr	r2, [pc, #472]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009540:	fbb2 f3f3 	udiv	r3, r2, r3
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	e007      	b.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009548:	4b72      	ldr	r3, [pc, #456]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009550:	4a72      	ldr	r2, [pc, #456]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009552:	fbb2 f3f3 	udiv	r3, r2, r3
 8009556:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009558:	4b6e      	ldr	r3, [pc, #440]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800955a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800955e:	0e1b      	lsrs	r3, r3, #24
 8009560:	f003 030f 	and.w	r3, r3, #15
 8009564:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009566:	4b6b      	ldr	r3, [pc, #428]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956c:	099b      	lsrs	r3, r3, #6
 800956e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	fb03 f202 	mul.w	r2, r3, r2
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	fbb2 f3f3 	udiv	r3, r2, r3
 800957e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009580:	4b64      	ldr	r3, [pc, #400]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	3301      	adds	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	fbb2 f3f3 	udiv	r3, r2, r3
 8009596:	617b      	str	r3, [r7, #20]
        break;
 8009598:	e011      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800959a:	4b61      	ldr	r3, [pc, #388]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800959c:	617b      	str	r3, [r7, #20]
        break;
 800959e:	e00e      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80095a0:	4b5c      	ldr	r3, [pc, #368]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80095ac:	4b5a      	ldr	r3, [pc, #360]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80095ae:	617b      	str	r3, [r7, #20]
        break;
 80095b0:	e005      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80095b2:	4b5a      	ldr	r3, [pc, #360]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80095b4:	617b      	str	r3, [r7, #20]
        break;
 80095b6:	e002      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80095b8:	bf00      	nop
 80095ba:	e000      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80095bc:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095c4:	f040 80a3 	bne.w	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80095c8:	4b52      	ldr	r3, [pc, #328]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80095ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ce:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80095d6:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80095de:	f000 808a 	beq.w	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80095e8:	f200 809c 	bhi.w	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095f2:	d07d      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095fa:	f200 8093 	bhi.w	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800960a:	d039      	beq.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800960c:	e08a      	b.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800960e:	4b41      	ldr	r3, [pc, #260]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d108      	bne.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800961a:	4b3e      	ldr	r3, [pc, #248]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009622:	4a3d      	ldr	r2, [pc, #244]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009624:	fbb2 f3f3 	udiv	r3, r2, r3
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	e007      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800962c:	4b39      	ldr	r3, [pc, #228]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009634:	4a39      	ldr	r2, [pc, #228]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009636:	fbb2 f3f3 	udiv	r3, r2, r3
 800963a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800963c:	4b35      	ldr	r3, [pc, #212]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800963e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009642:	0e1b      	lsrs	r3, r3, #24
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800964a:	4b32      	ldr	r3, [pc, #200]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009650:	099b      	lsrs	r3, r3, #6
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	fb03 f202 	mul.w	r2, r3, r2
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009662:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009664:	4b2b      	ldr	r3, [pc, #172]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	f003 031f 	and.w	r3, r3, #31
 8009670:	3301      	adds	r3, #1
 8009672:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	fbb2 f3f3 	udiv	r3, r2, r3
 800967c:	617b      	str	r3, [r7, #20]
        break;
 800967e:	e052      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009680:	4b24      	ldr	r3, [pc, #144]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d108      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800968c:	4b21      	ldr	r3, [pc, #132]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009694:	4a20      	ldr	r2, [pc, #128]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009696:	fbb2 f3f3 	udiv	r3, r2, r3
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	e007      	b.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a6:	4a1d      	ldr	r2, [pc, #116]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80096a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80096ae:	4b19      	ldr	r3, [pc, #100]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80096b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b4:	0e1b      	lsrs	r3, r3, #24
 80096b6:	f003 030f 	and.w	r3, r3, #15
 80096ba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80096bc:	4b15      	ldr	r3, [pc, #84]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80096be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c2:	099b      	lsrs	r3, r3, #6
 80096c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	fb03 f202 	mul.w	r2, r3, r2
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80096d6:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80096d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096dc:	f003 031f 	and.w	r3, r3, #31
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ec:	617b      	str	r3, [r7, #20]
        break;
 80096ee:	e01a      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80096f0:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80096f2:	617b      	str	r3, [r7, #20]
        break;
 80096f4:	e017      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8009702:	4b05      	ldr	r3, [pc, #20]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009704:	617b      	str	r3, [r7, #20]
        break;
 8009706:	e00e      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800970a:	617b      	str	r3, [r7, #20]
        break;
 800970c:	e00b      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800970e:	bf00      	nop
 8009710:	e009      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009712:	bf00      	nop
 8009714:	40023800 	.word	0x40023800
 8009718:	00f42400 	.word	0x00f42400
 800971c:	017d7840 	.word	0x017d7840
 8009720:	00bb8000 	.word	0x00bb8000
        break;
 8009724:	bf00      	nop

  return frequency;
 8009726:	697b      	ldr	r3, [r7, #20]
}
 8009728:	4618      	mov	r0, r3
 800972a:	371c      	adds	r7, #28
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e071      	b.n	800982e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	7f5b      	ldrb	r3, [r3, #29]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d105      	bne.n	8009760 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7f8 fab6 	bl	8001ccc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b10      	cmp	r3, #16
 8009772:	d053      	beq.n	800981c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	22ca      	movs	r2, #202	; 0xca
 800977a:	625a      	str	r2, [r3, #36]	; 0x24
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2253      	movs	r2, #83	; 0x53
 8009782:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fac9 	bl	8009d1c <RTC_EnterInitMode>
 800978a:	4603      	mov	r3, r0
 800978c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d12a      	bne.n	80097ea <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6899      	ldr	r1, [r3, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b26      	ldr	r3, [pc, #152]	; (8009838 <HAL_RTC_Init+0x104>)
 80097a0:	400b      	ands	r3, r1
 80097a2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	431a      	orrs	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	68d2      	ldr	r2, [r2, #12]
 80097ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6919      	ldr	r1, [r3, #16]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	041a      	lsls	r2, r3, #16
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fad2 	bl	8009d8a <RTC_ExitInitMode>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d110      	bne.n	8009812 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0208 	bic.w	r2, r2, #8
 80097fe:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	22ff      	movs	r2, #255	; 0xff
 8009818:	625a      	str	r2, [r3, #36]	; 0x24
 800981a:	e001      	b.n	8009820 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	ff8fffbf 	.word	0xff8fffbf

0800983c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	7f1b      	ldrb	r3, [r3, #28]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d101      	bne.n	8009858 <HAL_RTC_SetTime+0x1c>
 8009854:	2302      	movs	r3, #2
 8009856:	e085      	b.n	8009964 <HAL_RTC_SetTime+0x128>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2201      	movs	r2, #1
 800985c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2202      	movs	r2, #2
 8009862:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d126      	bne.n	80098b8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 faa6 	bl	8009dd4 <RTC_ByteToBcd2>
 8009888:	4603      	mov	r3, r0
 800988a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fa9f 	bl	8009dd4 <RTC_ByteToBcd2>
 8009896:	4603      	mov	r3, r0
 8009898:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800989a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	789b      	ldrb	r3, [r3, #2]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fa97 	bl	8009dd4 <RTC_ByteToBcd2>
 80098a6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098a8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	78db      	ldrb	r3, [r3, #3]
 80098b0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e018      	b.n	80098ea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2200      	movs	r2, #0
 80098ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098d8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	78db      	ldrb	r3, [r3, #3]
 80098e4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098e6:	4313      	orrs	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	22ca      	movs	r2, #202	; 0xca
 80098f0:	625a      	str	r2, [r3, #36]	; 0x24
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2253      	movs	r2, #83	; 0x53
 80098f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fa0e 	bl	8009d1c <RTC_EnterInitMode>
 8009900:	4603      	mov	r3, r0
 8009902:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009904:	7cfb      	ldrb	r3, [r7, #19]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d11e      	bne.n	8009948 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	6979      	ldr	r1, [r7, #20]
 8009910:	4b16      	ldr	r3, [pc, #88]	; (800996c <HAL_RTC_SetTime+0x130>)
 8009912:	400b      	ands	r3, r1
 8009914:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009924:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6899      	ldr	r1, [r3, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	431a      	orrs	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 fa23 	bl	8009d8a <RTC_ExitInitMode>
 8009944:	4603      	mov	r3, r0
 8009946:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009948:	7cfb      	ldrb	r3, [r7, #19]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	22ff      	movs	r2, #255	; 0xff
 800995a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	771a      	strb	r2, [r3, #28]

  return status;
 8009962:	7cfb      	ldrb	r3, [r7, #19]
}
 8009964:	4618      	mov	r0, r3
 8009966:	371c      	adds	r7, #28
 8009968:	46bd      	mov	sp, r7
 800996a:	bd90      	pop	{r4, r7, pc}
 800996c:	007f7f7f 	.word	0x007f7f7f

08009970 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	7f1b      	ldrb	r3, [r3, #28]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d101      	bne.n	800998c <HAL_RTC_SetDate+0x1c>
 8009988:	2302      	movs	r3, #2
 800998a:	e06f      	b.n	8009a6c <HAL_RTC_SetDate+0xfc>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2201      	movs	r2, #1
 8009990:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2202      	movs	r2, #2
 8009996:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10e      	bne.n	80099bc <HAL_RTC_SetDate+0x4c>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	f023 0310 	bic.w	r3, r3, #16
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	330a      	adds	r3, #10
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11c      	bne.n	80099fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	78db      	ldrb	r3, [r3, #3]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fa04 	bl	8009dd4 <RTC_ByteToBcd2>
 80099cc:	4603      	mov	r3, r0
 80099ce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	785b      	ldrb	r3, [r3, #1]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 f9fd 	bl	8009dd4 <RTC_ByteToBcd2>
 80099da:	4603      	mov	r3, r0
 80099dc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099de:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	789b      	ldrb	r3, [r3, #2]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f9f5 	bl	8009dd4 <RTC_ByteToBcd2>
 80099ea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80099ec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	e00e      	b.n	8009a1a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	78db      	ldrb	r3, [r3, #3]
 8009a00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a08:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009a0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	22ca      	movs	r2, #202	; 0xca
 8009a20:	625a      	str	r2, [r3, #36]	; 0x24
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2253      	movs	r2, #83	; 0x53
 8009a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 f976 	bl	8009d1c <RTC_EnterInitMode>
 8009a30:	4603      	mov	r3, r0
 8009a32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009a34:	7cfb      	ldrb	r3, [r7, #19]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	6979      	ldr	r1, [r7, #20]
 8009a40:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <HAL_RTC_SetDate+0x104>)
 8009a42:	400b      	ands	r3, r1
 8009a44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f99f 	bl	8009d8a <RTC_ExitInitMode>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009a50:	7cfb      	ldrb	r3, [r7, #19]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d102      	bne.n	8009a5c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	22ff      	movs	r2, #255	; 0xff
 8009a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	771a      	strb	r2, [r3, #28]

  return status;
 8009a6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd90      	pop	{r4, r7, pc}
 8009a74:	00ffff3f 	.word	0x00ffff3f

08009a78 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	7f1b      	ldrb	r3, [r3, #28]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_RTC_SetAlarm+0x24>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e113      	b.n	8009cc4 <HAL_RTC_SetAlarm+0x24c>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d137      	bne.n	8009b1e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f984 	bl	8009dd4 <RTC_ByteToBcd2>
 8009acc:	4603      	mov	r3, r0
 8009ace:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 f97d 	bl	8009dd4 <RTC_ByteToBcd2>
 8009ada:	4603      	mov	r3, r0
 8009adc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009ade:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 f975 	bl	8009dd4 <RTC_ByteToBcd2>
 8009aea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009aec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	78db      	ldrb	r3, [r3, #3]
 8009af4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009af6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f967 	bl	8009dd4 <RTC_ByteToBcd2>
 8009b06:	4603      	mov	r3, r0
 8009b08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009b0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009b12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	61fb      	str	r3, [r7, #28]
 8009b1c:	e023      	b.n	8009b66 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009b3e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009b44:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	78db      	ldrb	r3, [r3, #3]
 8009b4a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009b4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009b56:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009b5c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009b62:	4313      	orrs	r3, r2
 8009b64:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	22ca      	movs	r2, #202	; 0xca
 8009b78:	625a      	str	r2, [r3, #36]	; 0x24
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2253      	movs	r2, #83	; 0x53
 8009b80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8a:	d148      	bne.n	8009c1e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b9a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689a      	ldr	r2, [r3, #8]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009baa:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009bbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bbe:	f7f9 fb4b 	bl	8003258 <HAL_GetTick>
 8009bc2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009bc4:	e013      	b.n	8009bee <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bc6:	f7f9 fb47 	bl	8003258 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bd4:	d90b      	bls.n	8009bee <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	22ff      	movs	r2, #255	; 0xff
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2203      	movs	r2, #3
 8009be2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e06a      	b.n	8009cc4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0e4      	beq.n	8009bc6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c1a:	609a      	str	r2, [r3, #8]
 8009c1c:	e047      	b.n	8009cae <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c2c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c3c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009c4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c50:	f7f9 fb02 	bl	8003258 <HAL_GetTick>
 8009c54:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009c56:	e013      	b.n	8009c80 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c58:	f7f9 fafe 	bl	8003258 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c66:	d90b      	bls.n	8009c80 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	22ff      	movs	r2, #255	; 0xff
 8009c6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2203      	movs	r2, #3
 8009c74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e021      	b.n	8009cc4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0e4      	beq.n	8009c58 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cac:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	22ff      	movs	r2, #255	; 0xff
 8009cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3724      	adds	r7, #36	; 0x24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd90      	pop	{r4, r7, pc}

08009ccc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ce6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ce8:	f7f9 fab6 	bl	8003258 <HAL_GetTick>
 8009cec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cee:	e009      	b.n	8009d04 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cf0:	f7f9 fab2 	bl	8003258 <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cfe:	d901      	bls.n	8009d04 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e007      	b.n	8009d14 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f003 0320 	and.w	r3, r3, #32
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0ee      	beq.n	8009cf0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d122      	bne.n	8009d80 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d4a:	f7f9 fa85 	bl	8003258 <HAL_GetTick>
 8009d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009d50:	e00c      	b.n	8009d6c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d52:	f7f9 fa81 	bl	8003258 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d60:	d904      	bls.n	8009d6c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2204      	movs	r2, #4
 8009d66:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <RTC_EnterInitMode+0x64>
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d1e8      	bne.n	8009d52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009da4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff89 	bl	8009ccc <HAL_RTC_WaitForSynchro>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009de2:	e005      	b.n	8009df0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	3b0a      	subs	r3, #10
 8009dee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b09      	cmp	r3, #9
 8009df4:	d8f6      	bhi.n	8009de4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b2db      	uxtb	r3, r3
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e156      	b.n	800a0dc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7f8 f86c 	bl	8001f20 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f95b 	bl	800a10c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d00c      	beq.n	8009e78 <HAL_SAI_Init+0x68>
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d80d      	bhi.n	8009e7e <HAL_SAI_Init+0x6e>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <HAL_SAI_Init+0x5c>
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d003      	beq.n	8009e72 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009e6a:	e008      	b.n	8009e7e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61fb      	str	r3, [r7, #28]
      break;
 8009e70:	e006      	b.n	8009e80 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009e72:	2310      	movs	r3, #16
 8009e74:	61fb      	str	r3, [r7, #28]
      break;
 8009e76:	e003      	b.n	8009e80 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009e78:	2320      	movs	r3, #32
 8009e7a:	61fb      	str	r3, [r7, #28]
      break;
 8009e7c:	e000      	b.n	8009e80 <HAL_SAI_Init+0x70>
      break;
 8009e7e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d81e      	bhi.n	8009ec6 <HAL_SAI_Init+0xb6>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <HAL_SAI_Init+0x80>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009eaf 	.word	0x08009eaf
 8009e9c:	08009eb7 	.word	0x08009eb7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]
    }
    break;
 8009ea4:	e010      	b.n	8009ec8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eaa:	617b      	str	r3, [r7, #20]
    }
    break;
 8009eac:	e00c      	b.n	8009ec8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009eae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eb2:	617b      	str	r3, [r7, #20]
    }
    break;
 8009eb4:	e008      	b.n	8009ec8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f043 0301 	orr.w	r3, r3, #1
 8009ec2:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009ec4:	e000      	b.n	8009ec8 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009ec6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a85      	ldr	r2, [pc, #532]	; (800a0e4 <HAL_SAI_Init+0x2d4>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d004      	beq.n	8009edc <HAL_SAI_Init+0xcc>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a84      	ldr	r2, [pc, #528]	; (800a0e8 <HAL_SAI_Init+0x2d8>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d103      	bne.n	8009ee4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009edc:	4a83      	ldr	r2, [pc, #524]	; (800a0ec <HAL_SAI_Init+0x2dc>)
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	e002      	b.n	8009eea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009ee4:	4a82      	ldr	r2, [pc, #520]	; (800a0f0 <HAL_SAI_Init+0x2e0>)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d04c      	beq.n	8009f8c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a7a      	ldr	r2, [pc, #488]	; (800a0e4 <HAL_SAI_Init+0x2d4>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d004      	beq.n	8009f0a <HAL_SAI_Init+0xfa>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a78      	ldr	r2, [pc, #480]	; (800a0e8 <HAL_SAI_Init+0x2d8>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d104      	bne.n	8009f14 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009f0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009f0e:	f7ff fa9f 	bl	8009450 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f12:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a76      	ldr	r2, [pc, #472]	; (800a0f4 <HAL_SAI_Init+0x2e4>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d004      	beq.n	8009f28 <HAL_SAI_Init+0x118>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a75      	ldr	r2, [pc, #468]	; (800a0f8 <HAL_SAI_Init+0x2e8>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d104      	bne.n	8009f32 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009f28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009f2c:	f7ff fa90 	bl	8009450 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f30:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	025b      	lsls	r3, r3, #9
 8009f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f48:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4a6b      	ldr	r2, [pc, #428]	; (800a0fc <HAL_SAI_Init+0x2ec>)
 8009f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f52:	08da      	lsrs	r2, r3, #3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009f58:	68f9      	ldr	r1, [r7, #12]
 8009f5a:	4b68      	ldr	r3, [pc, #416]	; (800a0fc <HAL_SAI_Init+0x2ec>)
 8009f5c:	fba3 2301 	umull	r2, r3, r3, r1
 8009f60:	08da      	lsrs	r2, r3, #3
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	1aca      	subs	r2, r1, r3
 8009f6c:	2a08      	cmp	r2, #8
 8009f6e:	d904      	bls.n	8009f7a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d104      	bne.n	8009f8c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	085a      	lsrs	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <HAL_SAI_Init+0x18c>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d109      	bne.n	8009fb0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_SAI_Init+0x198>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e001      	b.n	8009fac <HAL_SAI_Init+0x19c>
 8009fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	e008      	b.n	8009fc2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d102      	bne.n	8009fbe <HAL_SAI_Init+0x1ae>
 8009fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fbc:	e000      	b.n	8009fc0 <HAL_SAI_Init+0x1b0>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6819      	ldr	r1, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	4b4c      	ldr	r3, [pc, #304]	; (800a100 <HAL_SAI_Init+0x2f0>)
 8009fce:	400b      	ands	r3, r1
 8009fd0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6819      	ldr	r1, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009fe6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	431a      	orrs	r2, r3
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8009ffa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a006:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	051b      	lsls	r3, r3, #20
 800a00e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	430a      	orrs	r2, r1
 800a016:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6859      	ldr	r1, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b38      	ldr	r3, [pc, #224]	; (800a104 <HAL_SAI_Init+0x2f4>)
 800a024:	400b      	ands	r3, r1
 800a026:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6859      	ldr	r1, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	431a      	orrs	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	431a      	orrs	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6899      	ldr	r1, [r3, #8]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <HAL_SAI_Init+0x2f8>)
 800a052:	400b      	ands	r3, r1
 800a054:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6899      	ldr	r1, [r3, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a066:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a06c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a072:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a078:	3b01      	subs	r3, #1
 800a07a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a07c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68d9      	ldr	r1, [r3, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a094:	400b      	ands	r3, r1
 800a096:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68d9      	ldr	r1, [r3, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ac:	041b      	lsls	r3, r3, #16
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3720      	adds	r7, #32
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40015804 	.word	0x40015804
 800a0e8:	40015824 	.word	0x40015824
 800a0ec:	40015800 	.word	0x40015800
 800a0f0:	40015c00 	.word	0x40015c00
 800a0f4:	40015c04 	.word	0x40015c04
 800a0f8:	40015c24 	.word	0x40015c24
 800a0fc:	cccccccd 	.word	0xcccccccd
 800a100:	ff05c010 	.word	0xff05c010
 800a104:	ffff1ff0 	.word	0xffff1ff0
 800a108:	fff88000 	.word	0xfff88000

0800a10c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a114:	4b17      	ldr	r3, [pc, #92]	; (800a174 <SAI_Disable+0x68>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a17      	ldr	r2, [pc, #92]	; (800a178 <SAI_Disable+0x6c>)
 800a11a:	fba2 2303 	umull	r2, r3, r2, r3
 800a11e:	0b1b      	lsrs	r3, r3, #12
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a136:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	1e5a      	subs	r2, r3, #1
 800a13c:	60fa      	str	r2, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10a      	bne.n	800a158 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	72fb      	strb	r3, [r7, #11]
      break;
 800a156:	e006      	b.n	800a166 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e8      	bne.n	800a138 <SAI_Disable+0x2c>

  return status;
 800a166:	7afb      	ldrb	r3, [r7, #11]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	20000000 	.word	0x20000000
 800a178:	95cbec1b 	.word	0x95cbec1b

0800a17c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e025      	b.n	800a1dc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7f6 fead 	bl	8000f04 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f001 fe33 	bl	800be28 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	f001 fe87 	bl	800bee0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e04c      	b.n	800a290 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d106      	bne.n	800a210 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7f8 f814 	bl	8002238 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2202      	movs	r2, #2
 800a214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0203 	bic.w	r2, r2, #3
 800a226:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4b19      	ldr	r3, [pc, #100]	; (800a298 <HAL_SPDIFRX_Init+0xb4>)
 800a234:	4013      	ands	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a240:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a246:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a24c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a252:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a258:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a25e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a264:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a26a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a270:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	fff88407 	.word	0xfff88407

0800a29c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e09d      	b.n	800a3ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d108      	bne.n	800a2c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2be:	d009      	beq.n	800a2d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	61da      	str	r2, [r3, #28]
 800a2c6:	e005      	b.n	800a2d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7f8 f844 	bl	800237c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a30a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a314:	d902      	bls.n	800a31c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e002      	b.n	800a322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a31c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a32a:	d007      	beq.n	800a33c <HAL_SPI_Init+0xa0>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a334:	d002      	beq.n	800a33c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37e:	ea42 0103 	orr.w	r1, r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	0c1b      	lsrs	r3, r3, #16
 800a398:	f003 0204 	and.w	r2, r3, #4
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	f003 0308 	and.w	r3, r3, #8
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3b8:	ea42 0103 	orr.w	r1, r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69da      	ldr	r2, [r3, #28]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e049      	b.n	800a498 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d106      	bne.n	800a41e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7f8 fab9 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2202      	movs	r2, #2
 800a422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f000 fc29 	bl	800ac88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d001      	beq.n	800a4b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e054      	b.n	800a562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f042 0201 	orr.w	r2, r2, #1
 800a4ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a26      	ldr	r2, [pc, #152]	; (800a570 <HAL_TIM_Base_Start_IT+0xd0>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d022      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e2:	d01d      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a22      	ldr	r2, [pc, #136]	; (800a574 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d018      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a21      	ldr	r2, [pc, #132]	; (800a578 <HAL_TIM_Base_Start_IT+0xd8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d013      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a1f      	ldr	r2, [pc, #124]	; (800a57c <HAL_TIM_Base_Start_IT+0xdc>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00e      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a1e      	ldr	r2, [pc, #120]	; (800a580 <HAL_TIM_Base_Start_IT+0xe0>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d009      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <HAL_TIM_Base_Start_IT+0xe4>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <HAL_TIM_Base_Start_IT+0xe8>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d115      	bne.n	800a54c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	4b19      	ldr	r3, [pc, #100]	; (800a58c <HAL_TIM_Base_Start_IT+0xec>)
 800a528:	4013      	ands	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d015      	beq.n	800a55e <HAL_TIM_Base_Start_IT+0xbe>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a538:	d011      	beq.n	800a55e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0201 	orr.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a54a:	e008      	b.n	800a55e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0201 	orr.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	e000      	b.n	800a560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	40010000 	.word	0x40010000
 800a574:	40000400 	.word	0x40000400
 800a578:	40000800 	.word	0x40000800
 800a57c:	40000c00 	.word	0x40000c00
 800a580:	40010400 	.word	0x40010400
 800a584:	40014000 	.word	0x40014000
 800a588:	40001800 	.word	0x40001800
 800a58c:	00010007 	.word	0x00010007

0800a590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e049      	b.n	800a636 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7f8 fa32 	bl	8002a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f000 fb5a 	bl	800ac88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	f003 0302 	and.w	r3, r3, #2
 800a650:	2b02      	cmp	r3, #2
 800a652:	d122      	bne.n	800a69a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d11b      	bne.n	800a69a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f06f 0202 	mvn.w	r2, #2
 800a66a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d003      	beq.n	800a688 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fae3 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a686:	e005      	b.n	800a694 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fad5 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fae6 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	d122      	bne.n	800a6ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d11b      	bne.n	800a6ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f06f 0204 	mvn.w	r2, #4
 800a6be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fab9 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a6da:	e005      	b.n	800a6e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 faab 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fabc 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d122      	bne.n	800a742 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b08      	cmp	r3, #8
 800a708:	d11b      	bne.n	800a742 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f06f 0208 	mvn.w	r2, #8
 800a712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2204      	movs	r2, #4
 800a718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	f003 0303 	and.w	r3, r3, #3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fa8f 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a72e:	e005      	b.n	800a73c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fa81 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa92 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	2b10      	cmp	r3, #16
 800a74e:	d122      	bne.n	800a796 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d11b      	bne.n	800a796 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f06f 0210 	mvn.w	r2, #16
 800a766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2208      	movs	r2, #8
 800a76c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa65 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a782:	e005      	b.n	800a790 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fa57 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fa68 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d10e      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d107      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f06f 0201 	mvn.w	r2, #1
 800a7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7f7 f8f5 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d10e      	bne.n	800a7ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7da:	2b80      	cmp	r3, #128	; 0x80
 800a7dc:	d107      	bne.n	800a7ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fe7d 	bl	800b4e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fc:	d10e      	bne.n	800a81c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a808:	2b80      	cmp	r3, #128	; 0x80
 800a80a:	d107      	bne.n	800a81c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fe70 	bl	800b4fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d10e      	bne.n	800a848 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d107      	bne.n	800a848 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa16 	bl	800ac74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b20      	cmp	r3, #32
 800a854:	d10e      	bne.n	800a874 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f003 0320 	and.w	r3, r3, #32
 800a860:	2b20      	cmp	r3, #32
 800a862:	d107      	bne.n	800a874 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f06f 0220 	mvn.w	r2, #32
 800a86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fe30 	bl	800b4d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a892:	2b01      	cmp	r3, #1
 800a894:	d101      	bne.n	800a89a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a896:	2302      	movs	r3, #2
 800a898:	e0ff      	b.n	800aa9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b14      	cmp	r3, #20
 800a8a6:	f200 80f0 	bhi.w	800aa8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800aa8b 	.word	0x0800aa8b
 800a8b8:	0800aa8b 	.word	0x0800aa8b
 800a8bc:	0800aa8b 	.word	0x0800aa8b
 800a8c0:	0800a945 	.word	0x0800a945
 800a8c4:	0800aa8b 	.word	0x0800aa8b
 800a8c8:	0800aa8b 	.word	0x0800aa8b
 800a8cc:	0800aa8b 	.word	0x0800aa8b
 800a8d0:	0800a987 	.word	0x0800a987
 800a8d4:	0800aa8b 	.word	0x0800aa8b
 800a8d8:	0800aa8b 	.word	0x0800aa8b
 800a8dc:	0800aa8b 	.word	0x0800aa8b
 800a8e0:	0800a9c7 	.word	0x0800a9c7
 800a8e4:	0800aa8b 	.word	0x0800aa8b
 800a8e8:	0800aa8b 	.word	0x0800aa8b
 800a8ec:	0800aa8b 	.word	0x0800aa8b
 800a8f0:	0800aa09 	.word	0x0800aa09
 800a8f4:	0800aa8b 	.word	0x0800aa8b
 800a8f8:	0800aa8b 	.word	0x0800aa8b
 800a8fc:	0800aa8b 	.word	0x0800aa8b
 800a900:	0800aa49 	.word	0x0800aa49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fa5c 	bl	800adc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0208 	orr.w	r2, r2, #8
 800a91e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0204 	bic.w	r2, r2, #4
 800a92e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6999      	ldr	r1, [r3, #24]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	691a      	ldr	r2, [r3, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	619a      	str	r2, [r3, #24]
      break;
 800a942:	e0a5      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 faae 	bl	800aeac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6999      	ldr	r1, [r3, #24]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	021a      	lsls	r2, r3, #8
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	619a      	str	r2, [r3, #24]
      break;
 800a984:	e084      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fb05 	bl	800af9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 0208 	orr.w	r2, r2, #8
 800a9a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0204 	bic.w	r2, r2, #4
 800a9b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69d9      	ldr	r1, [r3, #28]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	61da      	str	r2, [r3, #28]
      break;
 800a9c4:	e064      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fb5b 	bl	800b088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69da      	ldr	r2, [r3, #28]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69d9      	ldr	r1, [r3, #28]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	021a      	lsls	r2, r3, #8
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	61da      	str	r2, [r3, #28]
      break;
 800aa06:	e043      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fb92 	bl	800b138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0208 	orr.w	r2, r2, #8
 800aa22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0204 	bic.w	r2, r2, #4
 800aa32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	691a      	ldr	r2, [r3, #16]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa46:	e023      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fbc4 	bl	800b1dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	021a      	lsls	r2, r3, #8
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa88:	e002      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop

0800aaa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e0b4      	b.n	800ac2a <HAL_TIM_ConfigClockSource+0x186>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	4b56      	ldr	r3, [pc, #344]	; (800ac34 <HAL_TIM_ConfigClockSource+0x190>)
 800aadc:	4013      	ands	r3, r2
 800aade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaf8:	d03e      	beq.n	800ab78 <HAL_TIM_ConfigClockSource+0xd4>
 800aafa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aafe:	f200 8087 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab06:	f000 8086 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x172>
 800ab0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0e:	d87f      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab10:	2b70      	cmp	r3, #112	; 0x70
 800ab12:	d01a      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0xa6>
 800ab14:	2b70      	cmp	r3, #112	; 0x70
 800ab16:	d87b      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab18:	2b60      	cmp	r3, #96	; 0x60
 800ab1a:	d050      	beq.n	800abbe <HAL_TIM_ConfigClockSource+0x11a>
 800ab1c:	2b60      	cmp	r3, #96	; 0x60
 800ab1e:	d877      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab20:	2b50      	cmp	r3, #80	; 0x50
 800ab22:	d03c      	beq.n	800ab9e <HAL_TIM_ConfigClockSource+0xfa>
 800ab24:	2b50      	cmp	r3, #80	; 0x50
 800ab26:	d873      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d058      	beq.n	800abde <HAL_TIM_ConfigClockSource+0x13a>
 800ab2c:	2b40      	cmp	r3, #64	; 0x40
 800ab2e:	d86f      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab30:	2b30      	cmp	r3, #48	; 0x30
 800ab32:	d064      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab34:	2b30      	cmp	r3, #48	; 0x30
 800ab36:	d86b      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d060      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d867      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d05c      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab44:	2b10      	cmp	r3, #16
 800ab46:	d05a      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab48:	e062      	b.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	6899      	ldr	r1, [r3, #8]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f000 fc0d 	bl	800b378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	609a      	str	r2, [r3, #8]
      break;
 800ab76:	e04f      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	6899      	ldr	r1, [r3, #8]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f000 fbf6 	bl	800b378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab9a:	609a      	str	r2, [r3, #8]
      break;
 800ab9c:	e03c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6859      	ldr	r1, [r3, #4]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	461a      	mov	r2, r3
 800abac:	f000 fb6a 	bl	800b284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2150      	movs	r1, #80	; 0x50
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fbc3 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800abbc:	e02c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	6859      	ldr	r1, [r3, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	461a      	mov	r2, r3
 800abcc:	f000 fb89 	bl	800b2e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2160      	movs	r1, #96	; 0x60
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fbb3 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800abdc:	e01c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6859      	ldr	r1, [r3, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	461a      	mov	r2, r3
 800abec:	f000 fb4a 	bl	800b284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2140      	movs	r1, #64	; 0x40
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fba3 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800abfc:	e00c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 fb9a 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800ac0e:	e003      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
      break;
 800ac14:	e000      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	fffeff88 	.word	0xfffeff88

0800ac38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a40      	ldr	r2, [pc, #256]	; (800ad9c <TIM_Base_SetConfig+0x114>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d013      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca6:	d00f      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a3d      	ldr	r2, [pc, #244]	; (800ada0 <TIM_Base_SetConfig+0x118>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00b      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a3c      	ldr	r2, [pc, #240]	; (800ada4 <TIM_Base_SetConfig+0x11c>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d007      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a3b      	ldr	r2, [pc, #236]	; (800ada8 <TIM_Base_SetConfig+0x120>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d003      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a3a      	ldr	r2, [pc, #232]	; (800adac <TIM_Base_SetConfig+0x124>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d108      	bne.n	800acda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a2f      	ldr	r2, [pc, #188]	; (800ad9c <TIM_Base_SetConfig+0x114>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d02b      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace8:	d027      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a2c      	ldr	r2, [pc, #176]	; (800ada0 <TIM_Base_SetConfig+0x118>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d023      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a2b      	ldr	r2, [pc, #172]	; (800ada4 <TIM_Base_SetConfig+0x11c>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d01f      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a2a      	ldr	r2, [pc, #168]	; (800ada8 <TIM_Base_SetConfig+0x120>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d01b      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a29      	ldr	r2, [pc, #164]	; (800adac <TIM_Base_SetConfig+0x124>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d017      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a28      	ldr	r2, [pc, #160]	; (800adb0 <TIM_Base_SetConfig+0x128>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d013      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a27      	ldr	r2, [pc, #156]	; (800adb4 <TIM_Base_SetConfig+0x12c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d00f      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a26      	ldr	r2, [pc, #152]	; (800adb8 <TIM_Base_SetConfig+0x130>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00b      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a25      	ldr	r2, [pc, #148]	; (800adbc <TIM_Base_SetConfig+0x134>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d007      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a24      	ldr	r2, [pc, #144]	; (800adc0 <TIM_Base_SetConfig+0x138>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d003      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a23      	ldr	r2, [pc, #140]	; (800adc4 <TIM_Base_SetConfig+0x13c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d108      	bne.n	800ad4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <TIM_Base_SetConfig+0x114>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d003      	beq.n	800ad80 <TIM_Base_SetConfig+0xf8>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a0c      	ldr	r2, [pc, #48]	; (800adac <TIM_Base_SetConfig+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d103      	bne.n	800ad88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	691a      	ldr	r2, [r3, #16]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	615a      	str	r2, [r3, #20]
}
 800ad8e:	bf00      	nop
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40010000 	.word	0x40010000
 800ada0:	40000400 	.word	0x40000400
 800ada4:	40000800 	.word	0x40000800
 800ada8:	40000c00 	.word	0x40000c00
 800adac:	40010400 	.word	0x40010400
 800adb0:	40014000 	.word	0x40014000
 800adb4:	40014400 	.word	0x40014400
 800adb8:	40014800 	.word	0x40014800
 800adbc:	40001800 	.word	0x40001800
 800adc0:	40001c00 	.word	0x40001c00
 800adc4:	40002000 	.word	0x40002000

0800adc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	f023 0201 	bic.w	r2, r3, #1
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4b2b      	ldr	r3, [pc, #172]	; (800aea0 <TIM_OC1_SetConfig+0xd8>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0303 	bic.w	r3, r3, #3
 800adfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f023 0302 	bic.w	r3, r3, #2
 800ae10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a21      	ldr	r2, [pc, #132]	; (800aea4 <TIM_OC1_SetConfig+0xdc>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d003      	beq.n	800ae2c <TIM_OC1_SetConfig+0x64>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a20      	ldr	r2, [pc, #128]	; (800aea8 <TIM_OC1_SetConfig+0xe0>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d10c      	bne.n	800ae46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f023 0308 	bic.w	r3, r3, #8
 800ae32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f023 0304 	bic.w	r3, r3, #4
 800ae44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a16      	ldr	r2, [pc, #88]	; (800aea4 <TIM_OC1_SetConfig+0xdc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d003      	beq.n	800ae56 <TIM_OC1_SetConfig+0x8e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a15      	ldr	r2, [pc, #84]	; (800aea8 <TIM_OC1_SetConfig+0xe0>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d111      	bne.n	800ae7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	621a      	str	r2, [r3, #32]
}
 800ae94:	bf00      	nop
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	fffeff8f 	.word	0xfffeff8f
 800aea4:	40010000 	.word	0x40010000
 800aea8:	40010400 	.word	0x40010400

0800aeac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	f023 0210 	bic.w	r2, r3, #16
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	4b2e      	ldr	r3, [pc, #184]	; (800af90 <TIM_OC2_SetConfig+0xe4>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f023 0320 	bic.w	r3, r3, #32
 800aef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	011b      	lsls	r3, r3, #4
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	4313      	orrs	r3, r2
 800af02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a23      	ldr	r2, [pc, #140]	; (800af94 <TIM_OC2_SetConfig+0xe8>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d003      	beq.n	800af14 <TIM_OC2_SetConfig+0x68>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a22      	ldr	r2, [pc, #136]	; (800af98 <TIM_OC2_SetConfig+0xec>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d10d      	bne.n	800af30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a18      	ldr	r2, [pc, #96]	; (800af94 <TIM_OC2_SetConfig+0xe8>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d003      	beq.n	800af40 <TIM_OC2_SetConfig+0x94>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a17      	ldr	r2, [pc, #92]	; (800af98 <TIM_OC2_SetConfig+0xec>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d113      	bne.n	800af68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	4313      	orrs	r3, r2
 800af5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	4313      	orrs	r3, r2
 800af66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	621a      	str	r2, [r3, #32]
}
 800af82:	bf00      	nop
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	feff8fff 	.word	0xfeff8fff
 800af94:	40010000 	.word	0x40010000
 800af98:	40010400 	.word	0x40010400

0800af9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4b2d      	ldr	r3, [pc, #180]	; (800b07c <TIM_OC3_SetConfig+0xe0>)
 800afc8:	4013      	ands	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a22      	ldr	r2, [pc, #136]	; (800b080 <TIM_OC3_SetConfig+0xe4>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d003      	beq.n	800b002 <TIM_OC3_SetConfig+0x66>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a21      	ldr	r2, [pc, #132]	; (800b084 <TIM_OC3_SetConfig+0xe8>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d10d      	bne.n	800b01e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a17      	ldr	r2, [pc, #92]	; (800b080 <TIM_OC3_SetConfig+0xe4>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d003      	beq.n	800b02e <TIM_OC3_SetConfig+0x92>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a16      	ldr	r2, [pc, #88]	; (800b084 <TIM_OC3_SetConfig+0xe8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d113      	bne.n	800b056 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b03c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	011b      	lsls	r3, r3, #4
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	4313      	orrs	r3, r2
 800b048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	4313      	orrs	r3, r2
 800b054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	621a      	str	r2, [r3, #32]
}
 800b070:	bf00      	nop
 800b072:	371c      	adds	r7, #28
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	fffeff8f 	.word	0xfffeff8f
 800b080:	40010000 	.word	0x40010000
 800b084:	40010400 	.word	0x40010400

0800b088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <TIM_OC4_SetConfig+0xa4>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	031b      	lsls	r3, r3, #12
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a13      	ldr	r2, [pc, #76]	; (800b130 <TIM_OC4_SetConfig+0xa8>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d003      	beq.n	800b0f0 <TIM_OC4_SetConfig+0x68>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a12      	ldr	r2, [pc, #72]	; (800b134 <TIM_OC4_SetConfig+0xac>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d109      	bne.n	800b104 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	019b      	lsls	r3, r3, #6
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	621a      	str	r2, [r3, #32]
}
 800b11e:	bf00      	nop
 800b120:	371c      	adds	r7, #28
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	feff8fff 	.word	0xfeff8fff
 800b130:	40010000 	.word	0x40010000
 800b134:	40010400 	.word	0x40010400

0800b138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b138:	b480      	push	{r7}
 800b13a:	b087      	sub	sp, #28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <TIM_OC5_SetConfig+0x98>)
 800b164:	4013      	ands	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	041b      	lsls	r3, r3, #16
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a12      	ldr	r2, [pc, #72]	; (800b1d4 <TIM_OC5_SetConfig+0x9c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d003      	beq.n	800b196 <TIM_OC5_SetConfig+0x5e>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a11      	ldr	r2, [pc, #68]	; (800b1d8 <TIM_OC5_SetConfig+0xa0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d109      	bne.n	800b1aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	621a      	str	r2, [r3, #32]
}
 800b1c4:	bf00      	nop
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	fffeff8f 	.word	0xfffeff8f
 800b1d4:	40010000 	.word	0x40010000
 800b1d8:	40010400 	.word	0x40010400

0800b1dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4b1c      	ldr	r3, [pc, #112]	; (800b278 <TIM_OC6_SetConfig+0x9c>)
 800b208:	4013      	ands	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b21e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	051b      	lsls	r3, r3, #20
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	4313      	orrs	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a13      	ldr	r2, [pc, #76]	; (800b27c <TIM_OC6_SetConfig+0xa0>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d003      	beq.n	800b23c <TIM_OC6_SetConfig+0x60>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a12      	ldr	r2, [pc, #72]	; (800b280 <TIM_OC6_SetConfig+0xa4>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d109      	bne.n	800b250 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b242:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	029b      	lsls	r3, r3, #10
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	621a      	str	r2, [r3, #32]
}
 800b26a:	bf00      	nop
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	feff8fff 	.word	0xfeff8fff
 800b27c:	40010000 	.word	0x40010000
 800b280:	40010400 	.word	0x40010400

0800b284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6a1b      	ldr	r3, [r3, #32]
 800b294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	f023 0201 	bic.w	r2, r3, #1
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f023 030a 	bic.w	r3, r3, #10
 800b2c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	621a      	str	r2, [r3, #32]
}
 800b2d6:	bf00      	nop
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b087      	sub	sp, #28
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f023 0210 	bic.w	r2, r3, #16
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6a1b      	ldr	r3, [r3, #32]
 800b304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b30c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	031b      	lsls	r3, r3, #12
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b31e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	621a      	str	r2, [r3, #32]
}
 800b336:	bf00      	nop
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4313      	orrs	r3, r2
 800b360:	f043 0307 	orr.w	r3, r3, #7
 800b364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	609a      	str	r2, [r3, #8]
}
 800b36c:	bf00      	nop
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b378:	b480      	push	{r7}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	021a      	lsls	r2, r3, #8
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	431a      	orrs	r2, r3
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	609a      	str	r2, [r3, #8]
}
 800b3ac:	bf00      	nop
 800b3ae:	371c      	adds	r7, #28
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d101      	bne.n	800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	e06d      	b.n	800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2202      	movs	r2, #2
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a30      	ldr	r2, [pc, #192]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d004      	beq.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a2f      	ldr	r2, [pc, #188]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d108      	bne.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b40a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4313      	orrs	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b41c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4313      	orrs	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a20      	ldr	r2, [pc, #128]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d022      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b442:	d01d      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a1d      	ldr	r2, [pc, #116]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d018      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a1c      	ldr	r2, [pc, #112]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d013      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00e      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a15      	ldr	r2, [pc, #84]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d009      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a16      	ldr	r2, [pc, #88]	; (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d004      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a15      	ldr	r2, [pc, #84]	; (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10c      	bne.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	40010000 	.word	0x40010000
 800b4bc:	40010400 	.word	0x40010400
 800b4c0:	40000400 	.word	0x40000400
 800b4c4:	40000800 	.word	0x40000800
 800b4c8:	40000c00 	.word	0x40000c00
 800b4cc:	40014000 	.word	0x40014000
 800b4d0:	40001800 	.word	0x40001800

0800b4d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e040      	b.n	800b5a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7f7 fbe0 	bl	8002cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2224      	movs	r2, #36	; 0x24
 800b53c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 0201 	bic.w	r2, r2, #1
 800b54c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f82c 	bl	800b5ac <UART_SetConfig>
 800b554:	4603      	mov	r3, r0
 800b556:	2b01      	cmp	r3, #1
 800b558:	d101      	bne.n	800b55e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e022      	b.n	800b5a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fa84 	bl	800ba74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b57a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b58a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0201 	orr.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fb0b 	bl	800bbb8 <UART_CheckIdleState>
 800b5a2:	4603      	mov	r3, r0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	431a      	orrs	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	4ba6      	ldr	r3, [pc, #664]	; (800b870 <UART_SetConfig+0x2c4>)
 800b5d8:	4013      	ands	r3, r2
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	6812      	ldr	r2, [r2, #0]
 800b5de:	6979      	ldr	r1, [r7, #20]
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	4313      	orrs	r3, r2
 800b608:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a94      	ldr	r2, [pc, #592]	; (800b874 <UART_SetConfig+0x2c8>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d120      	bne.n	800b66a <UART_SetConfig+0xbe>
 800b628:	4b93      	ldr	r3, [pc, #588]	; (800b878 <UART_SetConfig+0x2cc>)
 800b62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	2b03      	cmp	r3, #3
 800b634:	d816      	bhi.n	800b664 <UART_SetConfig+0xb8>
 800b636:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <UART_SetConfig+0x90>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b64d 	.word	0x0800b64d
 800b640:	0800b659 	.word	0x0800b659
 800b644:	0800b653 	.word	0x0800b653
 800b648:	0800b65f 	.word	0x0800b65f
 800b64c:	2301      	movs	r3, #1
 800b64e:	77fb      	strb	r3, [r7, #31]
 800b650:	e150      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b652:	2302      	movs	r3, #2
 800b654:	77fb      	strb	r3, [r7, #31]
 800b656:	e14d      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b658:	2304      	movs	r3, #4
 800b65a:	77fb      	strb	r3, [r7, #31]
 800b65c:	e14a      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b65e:	2308      	movs	r3, #8
 800b660:	77fb      	strb	r3, [r7, #31]
 800b662:	e147      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b664:	2310      	movs	r3, #16
 800b666:	77fb      	strb	r3, [r7, #31]
 800b668:	e144      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a83      	ldr	r2, [pc, #524]	; (800b87c <UART_SetConfig+0x2d0>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d132      	bne.n	800b6da <UART_SetConfig+0x12e>
 800b674:	4b80      	ldr	r3, [pc, #512]	; (800b878 <UART_SetConfig+0x2cc>)
 800b676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b67a:	f003 030c 	and.w	r3, r3, #12
 800b67e:	2b0c      	cmp	r3, #12
 800b680:	d828      	bhi.n	800b6d4 <UART_SetConfig+0x128>
 800b682:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <UART_SetConfig+0xdc>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b6bd 	.word	0x0800b6bd
 800b68c:	0800b6d5 	.word	0x0800b6d5
 800b690:	0800b6d5 	.word	0x0800b6d5
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6c9 	.word	0x0800b6c9
 800b69c:	0800b6d5 	.word	0x0800b6d5
 800b6a0:	0800b6d5 	.word	0x0800b6d5
 800b6a4:	0800b6d5 	.word	0x0800b6d5
 800b6a8:	0800b6c3 	.word	0x0800b6c3
 800b6ac:	0800b6d5 	.word	0x0800b6d5
 800b6b0:	0800b6d5 	.word	0x0800b6d5
 800b6b4:	0800b6d5 	.word	0x0800b6d5
 800b6b8:	0800b6cf 	.word	0x0800b6cf
 800b6bc:	2300      	movs	r3, #0
 800b6be:	77fb      	strb	r3, [r7, #31]
 800b6c0:	e118      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	77fb      	strb	r3, [r7, #31]
 800b6c6:	e115      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b6c8:	2304      	movs	r3, #4
 800b6ca:	77fb      	strb	r3, [r7, #31]
 800b6cc:	e112      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b6ce:	2308      	movs	r3, #8
 800b6d0:	77fb      	strb	r3, [r7, #31]
 800b6d2:	e10f      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b6d4:	2310      	movs	r3, #16
 800b6d6:	77fb      	strb	r3, [r7, #31]
 800b6d8:	e10c      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a68      	ldr	r2, [pc, #416]	; (800b880 <UART_SetConfig+0x2d4>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d120      	bne.n	800b726 <UART_SetConfig+0x17a>
 800b6e4:	4b64      	ldr	r3, [pc, #400]	; (800b878 <UART_SetConfig+0x2cc>)
 800b6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b6ee:	2b30      	cmp	r3, #48	; 0x30
 800b6f0:	d013      	beq.n	800b71a <UART_SetConfig+0x16e>
 800b6f2:	2b30      	cmp	r3, #48	; 0x30
 800b6f4:	d814      	bhi.n	800b720 <UART_SetConfig+0x174>
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d009      	beq.n	800b70e <UART_SetConfig+0x162>
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d810      	bhi.n	800b720 <UART_SetConfig+0x174>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <UART_SetConfig+0x15c>
 800b702:	2b10      	cmp	r3, #16
 800b704:	d006      	beq.n	800b714 <UART_SetConfig+0x168>
 800b706:	e00b      	b.n	800b720 <UART_SetConfig+0x174>
 800b708:	2300      	movs	r3, #0
 800b70a:	77fb      	strb	r3, [r7, #31]
 800b70c:	e0f2      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b70e:	2302      	movs	r3, #2
 800b710:	77fb      	strb	r3, [r7, #31]
 800b712:	e0ef      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b714:	2304      	movs	r3, #4
 800b716:	77fb      	strb	r3, [r7, #31]
 800b718:	e0ec      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b71a:	2308      	movs	r3, #8
 800b71c:	77fb      	strb	r3, [r7, #31]
 800b71e:	e0e9      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b720:	2310      	movs	r3, #16
 800b722:	77fb      	strb	r3, [r7, #31]
 800b724:	e0e6      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a56      	ldr	r2, [pc, #344]	; (800b884 <UART_SetConfig+0x2d8>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d120      	bne.n	800b772 <UART_SetConfig+0x1c6>
 800b730:	4b51      	ldr	r3, [pc, #324]	; (800b878 <UART_SetConfig+0x2cc>)
 800b732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b73a:	2bc0      	cmp	r3, #192	; 0xc0
 800b73c:	d013      	beq.n	800b766 <UART_SetConfig+0x1ba>
 800b73e:	2bc0      	cmp	r3, #192	; 0xc0
 800b740:	d814      	bhi.n	800b76c <UART_SetConfig+0x1c0>
 800b742:	2b80      	cmp	r3, #128	; 0x80
 800b744:	d009      	beq.n	800b75a <UART_SetConfig+0x1ae>
 800b746:	2b80      	cmp	r3, #128	; 0x80
 800b748:	d810      	bhi.n	800b76c <UART_SetConfig+0x1c0>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <UART_SetConfig+0x1a8>
 800b74e:	2b40      	cmp	r3, #64	; 0x40
 800b750:	d006      	beq.n	800b760 <UART_SetConfig+0x1b4>
 800b752:	e00b      	b.n	800b76c <UART_SetConfig+0x1c0>
 800b754:	2300      	movs	r3, #0
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e0cc      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b75a:	2302      	movs	r3, #2
 800b75c:	77fb      	strb	r3, [r7, #31]
 800b75e:	e0c9      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b760:	2304      	movs	r3, #4
 800b762:	77fb      	strb	r3, [r7, #31]
 800b764:	e0c6      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b766:	2308      	movs	r3, #8
 800b768:	77fb      	strb	r3, [r7, #31]
 800b76a:	e0c3      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b76c:	2310      	movs	r3, #16
 800b76e:	77fb      	strb	r3, [r7, #31]
 800b770:	e0c0      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a44      	ldr	r2, [pc, #272]	; (800b888 <UART_SetConfig+0x2dc>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d125      	bne.n	800b7c8 <UART_SetConfig+0x21c>
 800b77c:	4b3e      	ldr	r3, [pc, #248]	; (800b878 <UART_SetConfig+0x2cc>)
 800b77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b78a:	d017      	beq.n	800b7bc <UART_SetConfig+0x210>
 800b78c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b790:	d817      	bhi.n	800b7c2 <UART_SetConfig+0x216>
 800b792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b796:	d00b      	beq.n	800b7b0 <UART_SetConfig+0x204>
 800b798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b79c:	d811      	bhi.n	800b7c2 <UART_SetConfig+0x216>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <UART_SetConfig+0x1fe>
 800b7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7a6:	d006      	beq.n	800b7b6 <UART_SetConfig+0x20a>
 800b7a8:	e00b      	b.n	800b7c2 <UART_SetConfig+0x216>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	77fb      	strb	r3, [r7, #31]
 800b7ae:	e0a1      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	77fb      	strb	r3, [r7, #31]
 800b7b4:	e09e      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b7b6:	2304      	movs	r3, #4
 800b7b8:	77fb      	strb	r3, [r7, #31]
 800b7ba:	e09b      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b7bc:	2308      	movs	r3, #8
 800b7be:	77fb      	strb	r3, [r7, #31]
 800b7c0:	e098      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b7c2:	2310      	movs	r3, #16
 800b7c4:	77fb      	strb	r3, [r7, #31]
 800b7c6:	e095      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a2f      	ldr	r2, [pc, #188]	; (800b88c <UART_SetConfig+0x2e0>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d125      	bne.n	800b81e <UART_SetConfig+0x272>
 800b7d2:	4b29      	ldr	r3, [pc, #164]	; (800b878 <UART_SetConfig+0x2cc>)
 800b7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b7dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7e0:	d017      	beq.n	800b812 <UART_SetConfig+0x266>
 800b7e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7e6:	d817      	bhi.n	800b818 <UART_SetConfig+0x26c>
 800b7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ec:	d00b      	beq.n	800b806 <UART_SetConfig+0x25a>
 800b7ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f2:	d811      	bhi.n	800b818 <UART_SetConfig+0x26c>
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <UART_SetConfig+0x254>
 800b7f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7fc:	d006      	beq.n	800b80c <UART_SetConfig+0x260>
 800b7fe:	e00b      	b.n	800b818 <UART_SetConfig+0x26c>
 800b800:	2301      	movs	r3, #1
 800b802:	77fb      	strb	r3, [r7, #31]
 800b804:	e076      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b806:	2302      	movs	r3, #2
 800b808:	77fb      	strb	r3, [r7, #31]
 800b80a:	e073      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b80c:	2304      	movs	r3, #4
 800b80e:	77fb      	strb	r3, [r7, #31]
 800b810:	e070      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b812:	2308      	movs	r3, #8
 800b814:	77fb      	strb	r3, [r7, #31]
 800b816:	e06d      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b818:	2310      	movs	r3, #16
 800b81a:	77fb      	strb	r3, [r7, #31]
 800b81c:	e06a      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a1b      	ldr	r2, [pc, #108]	; (800b890 <UART_SetConfig+0x2e4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d138      	bne.n	800b89a <UART_SetConfig+0x2ee>
 800b828:	4b13      	ldr	r3, [pc, #76]	; (800b878 <UART_SetConfig+0x2cc>)
 800b82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b82e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b836:	d017      	beq.n	800b868 <UART_SetConfig+0x2bc>
 800b838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b83c:	d82a      	bhi.n	800b894 <UART_SetConfig+0x2e8>
 800b83e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b842:	d00b      	beq.n	800b85c <UART_SetConfig+0x2b0>
 800b844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b848:	d824      	bhi.n	800b894 <UART_SetConfig+0x2e8>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <UART_SetConfig+0x2aa>
 800b84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b852:	d006      	beq.n	800b862 <UART_SetConfig+0x2b6>
 800b854:	e01e      	b.n	800b894 <UART_SetConfig+0x2e8>
 800b856:	2300      	movs	r3, #0
 800b858:	77fb      	strb	r3, [r7, #31]
 800b85a:	e04b      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b85c:	2302      	movs	r3, #2
 800b85e:	77fb      	strb	r3, [r7, #31]
 800b860:	e048      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b862:	2304      	movs	r3, #4
 800b864:	77fb      	strb	r3, [r7, #31]
 800b866:	e045      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b868:	2308      	movs	r3, #8
 800b86a:	77fb      	strb	r3, [r7, #31]
 800b86c:	e042      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b86e:	bf00      	nop
 800b870:	efff69f3 	.word	0xefff69f3
 800b874:	40011000 	.word	0x40011000
 800b878:	40023800 	.word	0x40023800
 800b87c:	40004400 	.word	0x40004400
 800b880:	40004800 	.word	0x40004800
 800b884:	40004c00 	.word	0x40004c00
 800b888:	40005000 	.word	0x40005000
 800b88c:	40011400 	.word	0x40011400
 800b890:	40007800 	.word	0x40007800
 800b894:	2310      	movs	r3, #16
 800b896:	77fb      	strb	r3, [r7, #31]
 800b898:	e02c      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a72      	ldr	r2, [pc, #456]	; (800ba68 <UART_SetConfig+0x4bc>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d125      	bne.n	800b8f0 <UART_SetConfig+0x344>
 800b8a4:	4b71      	ldr	r3, [pc, #452]	; (800ba6c <UART_SetConfig+0x4c0>)
 800b8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b8ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b8b2:	d017      	beq.n	800b8e4 <UART_SetConfig+0x338>
 800b8b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b8b8:	d817      	bhi.n	800b8ea <UART_SetConfig+0x33e>
 800b8ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8be:	d00b      	beq.n	800b8d8 <UART_SetConfig+0x32c>
 800b8c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c4:	d811      	bhi.n	800b8ea <UART_SetConfig+0x33e>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d003      	beq.n	800b8d2 <UART_SetConfig+0x326>
 800b8ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8ce:	d006      	beq.n	800b8de <UART_SetConfig+0x332>
 800b8d0:	e00b      	b.n	800b8ea <UART_SetConfig+0x33e>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	77fb      	strb	r3, [r7, #31]
 800b8d6:	e00d      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	77fb      	strb	r3, [r7, #31]
 800b8dc:	e00a      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b8de:	2304      	movs	r3, #4
 800b8e0:	77fb      	strb	r3, [r7, #31]
 800b8e2:	e007      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b8e4:	2308      	movs	r3, #8
 800b8e6:	77fb      	strb	r3, [r7, #31]
 800b8e8:	e004      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b8ea:	2310      	movs	r3, #16
 800b8ec:	77fb      	strb	r3, [r7, #31]
 800b8ee:	e001      	b.n	800b8f4 <UART_SetConfig+0x348>
 800b8f0:	2310      	movs	r3, #16
 800b8f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8fc:	d15b      	bne.n	800b9b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b8fe:	7ffb      	ldrb	r3, [r7, #31]
 800b900:	2b08      	cmp	r3, #8
 800b902:	d828      	bhi.n	800b956 <UART_SetConfig+0x3aa>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <UART_SetConfig+0x360>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b931 	.word	0x0800b931
 800b910:	0800b939 	.word	0x0800b939
 800b914:	0800b941 	.word	0x0800b941
 800b918:	0800b957 	.word	0x0800b957
 800b91c:	0800b947 	.word	0x0800b947
 800b920:	0800b957 	.word	0x0800b957
 800b924:	0800b957 	.word	0x0800b957
 800b928:	0800b957 	.word	0x0800b957
 800b92c:	0800b94f 	.word	0x0800b94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b930:	f7fd f90c 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 800b934:	61b8      	str	r0, [r7, #24]
        break;
 800b936:	e013      	b.n	800b960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b938:	f7fd f91c 	bl	8008b74 <HAL_RCC_GetPCLK2Freq>
 800b93c:	61b8      	str	r0, [r7, #24]
        break;
 800b93e:	e00f      	b.n	800b960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b940:	4b4b      	ldr	r3, [pc, #300]	; (800ba70 <UART_SetConfig+0x4c4>)
 800b942:	61bb      	str	r3, [r7, #24]
        break;
 800b944:	e00c      	b.n	800b960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b946:	f7fd f82f 	bl	80089a8 <HAL_RCC_GetSysClockFreq>
 800b94a:	61b8      	str	r0, [r7, #24]
        break;
 800b94c:	e008      	b.n	800b960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b94e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b952:	61bb      	str	r3, [r7, #24]
        break;
 800b954:	e004      	b.n	800b960 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b956:	2300      	movs	r3, #0
 800b958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	77bb      	strb	r3, [r7, #30]
        break;
 800b95e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d074      	beq.n	800ba50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	005a      	lsls	r2, r3, #1
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	085b      	lsrs	r3, r3, #1
 800b970:	441a      	add	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	2b0f      	cmp	r3, #15
 800b980:	d916      	bls.n	800b9b0 <UART_SetConfig+0x404>
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b988:	d212      	bcs.n	800b9b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	f023 030f 	bic.w	r3, r3, #15
 800b992:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	085b      	lsrs	r3, r3, #1
 800b998:	b29b      	uxth	r3, r3
 800b99a:	f003 0307 	and.w	r3, r3, #7
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	89fb      	ldrh	r3, [r7, #14]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	89fa      	ldrh	r2, [r7, #14]
 800b9ac:	60da      	str	r2, [r3, #12]
 800b9ae:	e04f      	b.n	800ba50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	77bb      	strb	r3, [r7, #30]
 800b9b4:	e04c      	b.n	800ba50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9b6:	7ffb      	ldrb	r3, [r7, #31]
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d828      	bhi.n	800ba0e <UART_SetConfig+0x462>
 800b9bc:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <UART_SetConfig+0x418>)
 800b9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c2:	bf00      	nop
 800b9c4:	0800b9e9 	.word	0x0800b9e9
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800b9f9 	.word	0x0800b9f9
 800b9d0:	0800ba0f 	.word	0x0800ba0f
 800b9d4:	0800b9ff 	.word	0x0800b9ff
 800b9d8:	0800ba0f 	.word	0x0800ba0f
 800b9dc:	0800ba0f 	.word	0x0800ba0f
 800b9e0:	0800ba0f 	.word	0x0800ba0f
 800b9e4:	0800ba07 	.word	0x0800ba07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e8:	f7fd f8b0 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 800b9ec:	61b8      	str	r0, [r7, #24]
        break;
 800b9ee:	e013      	b.n	800ba18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9f0:	f7fd f8c0 	bl	8008b74 <HAL_RCC_GetPCLK2Freq>
 800b9f4:	61b8      	str	r0, [r7, #24]
        break;
 800b9f6:	e00f      	b.n	800ba18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ba70 <UART_SetConfig+0x4c4>)
 800b9fa:	61bb      	str	r3, [r7, #24]
        break;
 800b9fc:	e00c      	b.n	800ba18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9fe:	f7fc ffd3 	bl	80089a8 <HAL_RCC_GetSysClockFreq>
 800ba02:	61b8      	str	r0, [r7, #24]
        break;
 800ba04:	e008      	b.n	800ba18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0a:	61bb      	str	r3, [r7, #24]
        break;
 800ba0c:	e004      	b.n	800ba18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	77bb      	strb	r3, [r7, #30]
        break;
 800ba16:	bf00      	nop
    }

    if (pclk != 0U)
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d018      	beq.n	800ba50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	085a      	lsrs	r2, r3, #1
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	441a      	add	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b0f      	cmp	r3, #15
 800ba36:	d909      	bls.n	800ba4c <UART_SetConfig+0x4a0>
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3e:	d205      	bcs.n	800ba4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	60da      	str	r2, [r3, #12]
 800ba4a:	e001      	b.n	800ba50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ba5c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3720      	adds	r7, #32
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	40007c00 	.word	0x40007c00
 800ba6c:	40023800 	.word	0x40023800
 800ba70:	00f42400 	.word	0x00f42400

0800ba74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	430a      	orrs	r2, r1
 800babe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00a      	beq.n	800bae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae6:	f003 0308 	and.w	r3, r3, #8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	430a      	orrs	r2, r1
 800bb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00a      	beq.n	800bb26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	430a      	orrs	r2, r1
 800bb24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00a      	beq.n	800bb48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01a      	beq.n	800bb8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb72:	d10a      	bne.n	800bb8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	605a      	str	r2, [r3, #4]
  }
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbc8:	f7f7 fb46 	bl	8003258 <HAL_GetTick>
 800bbcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0308 	and.w	r3, r3, #8
 800bbd8:	2b08      	cmp	r3, #8
 800bbda:	d10e      	bne.n	800bbfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f831 	bl	800bc52 <UART_WaitOnFlagUntilTimeout>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e027      	b.n	800bc4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	d10e      	bne.n	800bc26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f81b 	bl	800bc52 <UART_WaitOnFlagUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e011      	b.n	800bc4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b09c      	sub	sp, #112	; 0x70
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	603b      	str	r3, [r7, #0]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc62:	e0a7      	b.n	800bdb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6a:	f000 80a3 	beq.w	800bdb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc6e:	f7f7 faf3 	bl	8003258 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d302      	bcc.n	800bc84 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d13f      	bne.n	800bd04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc98:	667b      	str	r3, [r7, #100]	; 0x64
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bca4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcaa:	e841 2300 	strex	r3, r2, [r1]
 800bcae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bcb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1e6      	bne.n	800bc84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3308      	adds	r3, #8
 800bcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc0:	e853 3f00 	ldrex	r3, [r3]
 800bcc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	f023 0301 	bic.w	r3, r3, #1
 800bccc:	663b      	str	r3, [r7, #96]	; 0x60
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcd6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bcd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e5      	bne.n	800bcb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2220      	movs	r2, #32
 800bcee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e068      	b.n	800bdd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0304 	and.w	r3, r3, #4
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d050      	beq.n	800bdb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd20:	d148      	bne.n	800bdb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	e853 3f00 	ldrex	r3, [r3]
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd4a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd52:	e841 2300 	strex	r3, r2, [r1]
 800bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1e6      	bne.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3308      	adds	r3, #8
 800bd64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	e853 3f00 	ldrex	r3, [r3]
 800bd6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f023 0301 	bic.w	r3, r3, #1
 800bd74:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd7e:	623a      	str	r2, [r7, #32]
 800bd80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd82:	69f9      	ldr	r1, [r7, #28]
 800bd84:	6a3a      	ldr	r2, [r7, #32]
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1e5      	bne.n	800bd5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2220      	movs	r2, #32
 800bd96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2220      	movs	r2, #32
 800bda4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e010      	b.n	800bdd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	69da      	ldr	r2, [r3, #28]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	bf0c      	ite	eq
 800bdc4:	2301      	moveq	r3, #1
 800bdc6:	2300      	movne	r3, #0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	461a      	mov	r2, r3
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	f43f af48 	beq.w	800bc64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3770      	adds	r7, #112	; 0x70
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e016      	b.n	800be1e <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7f7 f9c7 	bl	8003184 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be02:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691a      	ldr	r2, [r3, #16]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	ea42 0103 	orr.w	r1, r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d121      	bne.n	800be7e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	4b27      	ldr	r3, [pc, #156]	; (800bedc <FMC_SDRAM_Init+0xb4>)
 800be40:	4013      	ands	r3, r2
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	6851      	ldr	r1, [r2, #4]
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	6892      	ldr	r2, [r2, #8]
 800be4a:	4311      	orrs	r1, r2
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	68d2      	ldr	r2, [r2, #12]
 800be50:	4311      	orrs	r1, r2
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	6912      	ldr	r2, [r2, #16]
 800be56:	4311      	orrs	r1, r2
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	6952      	ldr	r2, [r2, #20]
 800be5c:	4311      	orrs	r1, r2
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	6992      	ldr	r2, [r2, #24]
 800be62:	4311      	orrs	r1, r2
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	69d2      	ldr	r2, [r2, #28]
 800be68:	4311      	orrs	r1, r2
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	6a12      	ldr	r2, [r2, #32]
 800be6e:	4311      	orrs	r1, r2
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be74:	430a      	orrs	r2, r1
 800be76:	431a      	orrs	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	e026      	b.n	800becc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	69d9      	ldr	r1, [r3, #28]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	4319      	orrs	r1, r3
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be94:	430b      	orrs	r3, r1
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <FMC_SDRAM_Init+0xb4>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	6851      	ldr	r1, [r2, #4]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	6892      	ldr	r2, [r2, #8]
 800beac:	4311      	orrs	r1, r2
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	68d2      	ldr	r2, [r2, #12]
 800beb2:	4311      	orrs	r1, r2
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	6912      	ldr	r2, [r2, #16]
 800beb8:	4311      	orrs	r1, r2
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	6952      	ldr	r2, [r2, #20]
 800bebe:	4311      	orrs	r1, r2
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	6992      	ldr	r2, [r2, #24]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	431a      	orrs	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	ffff8000 	.word	0xffff8000

0800bee0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d128      	bne.n	800bf44 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	1e59      	subs	r1, r3, #1
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	4319      	orrs	r1, r3
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	021b      	lsls	r3, r3, #8
 800bf12:	4319      	orrs	r1, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	031b      	lsls	r3, r3, #12
 800bf1c:	4319      	orrs	r1, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	041b      	lsls	r3, r3, #16
 800bf26:	4319      	orrs	r1, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	051b      	lsls	r3, r3, #20
 800bf30:	4319      	orrs	r1, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	3b01      	subs	r3, #1
 800bf38:	061b      	lsls	r3, r3, #24
 800bf3a:	430b      	orrs	r3, r1
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	609a      	str	r2, [r3, #8]
 800bf42:	e02d      	b.n	800bfa0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <FMC_SDRAM_Timing_Init+0xd0>)
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	68d2      	ldr	r2, [r2, #12]
 800bf50:	3a01      	subs	r2, #1
 800bf52:	0311      	lsls	r1, r2, #12
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	6952      	ldr	r2, [r2, #20]
 800bf58:	3a01      	subs	r2, #1
 800bf5a:	0512      	lsls	r2, r2, #20
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	1e59      	subs	r1, r3, #1
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	4319      	orrs	r1, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	4319      	orrs	r1, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	041b      	lsls	r3, r3, #16
 800bf8e:	4319      	orrs	r1, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	061b      	lsls	r3, r3, #24
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	ff0f0fff 	.word	0xff0f0fff

0800bfb4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	f107 001c 	add.w	r0, r7, #28
 800bfc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bfca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bfce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bfd2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bfd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bfda:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bfde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685a      	ldr	r2, [r3, #4]
 800bfea:	4b07      	ldr	r3, [pc, #28]	; (800c008 <SDMMC_Init+0x54>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	431a      	orrs	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	b004      	add	sp, #16
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	ffff8100 	.word	0xffff8100

0800c00c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c026:	b480      	push	{r7}
 800c028:	b083      	sub	sp, #12
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2203      	movs	r2, #3
 800c032:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c042:	b480      	push	{r7}
 800c044:	b083      	sub	sp, #12
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 0303 	and.w	r3, r3, #3
}
 800c052:	4618      	mov	r0, r3
 800c054:	370c      	adds	r7, #12
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
	...

0800c060 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c07e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c084:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c08a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68da      	ldr	r2, [r3, #12]
 800c096:	4b06      	ldr	r3, [pc, #24]	; (800c0b0 <SDMMC_SendCommand+0x50>)
 800c098:	4013      	ands	r3, r2
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	431a      	orrs	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c0a2:	2300      	movs	r3, #0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	fffff000 	.word	0xfffff000

0800c0b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	b2db      	uxtb	r3, r3
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b085      	sub	sp, #20
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3314      	adds	r3, #20
 800c0dc:	461a      	mov	r2, r3
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
}  
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c11a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c120:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c126:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c132:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	431a      	orrs	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0

}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c15a:	2310      	movs	r3, #16
 800c15c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c15e:	2340      	movs	r3, #64	; 0x40
 800c160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c16c:	f107 0308 	add.w	r3, r7, #8
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff ff74 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c178:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17c:	2110      	movs	r1, #16
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f92e 	bl	800c3e0 <SDMMC_GetCmdResp1>
 800c184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c186:	69fb      	ldr	r3, [r7, #28]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08a      	sub	sp, #40	; 0x28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c1a0:	2307      	movs	r3, #7
 800c1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1a4:	2340      	movs	r3, #64	; 0x40
 800c1a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1b2:	f107 0310 	add.w	r3, r7, #16
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f7ff ff51 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c1be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1c2:	2107      	movs	r1, #7
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f90b 	bl	800c3e0 <SDMMC_GetCmdResp1>
 800c1ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3728      	adds	r7, #40	; 0x28
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b088      	sub	sp, #32
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1f4:	f107 0308 	add.w	r3, r7, #8
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff ff30 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fa61 	bl	800c6c8 <SDMMC_GetCmdError>
 800c206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c208:	69fb      	ldr	r3, [r7, #28]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b088      	sub	sp, #32
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c21e:	2302      	movs	r3, #2
 800c220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c222:	23c0      	movs	r3, #192	; 0xc0
 800c224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c226:	2300      	movs	r3, #0
 800c228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c22e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c230:	f107 0308 	add.w	r3, r7, #8
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff ff12 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f9bd 	bl	800c5bc <SDMMC_GetCmdResp2>
 800c242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c244:	69fb      	ldr	r3, [r7, #28]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b088      	sub	sp, #32
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c25c:	2309      	movs	r3, #9
 800c25e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c260:	23c0      	movs	r3, #192	; 0xc0
 800c262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c26c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fef3 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f99e 	bl	800c5bc <SDMMC_GetCmdResp2>
 800c280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c282:	69fb      	ldr	r3, [r7, #28]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800c298:	887b      	ldrh	r3, [r7, #2]
 800c29a:	041b      	lsls	r3, r3, #16
 800c29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2a2:	2340      	movs	r3, #64	; 0x40
 800c2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b0:	f107 0308 	add.w	r3, r7, #8
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff fed2 	bl	800c060 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800c2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2c0:	2103      	movs	r1, #3
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f88c 	bl	800c3e0 <SDMMC_GetCmdResp1>
 800c2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ca:	69fb      	ldr	r3, [r7, #28]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c2e2:	230d      	movs	r3, #13
 800c2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e6:	2340      	movs	r3, #64	; 0x40
 800c2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f4:	f107 0308 	add.w	r3, r7, #8
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff feb0 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c300:	f241 3288 	movw	r2, #5000	; 0x1388
 800c304:	210d      	movs	r1, #13
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f86a 	bl	800c3e0 <SDMMC_GetCmdResp1>
 800c30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c30e:	69fb      	ldr	r3, [r7, #28]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800c326:	2301      	movs	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c32a:	2340      	movs	r3, #64	; 0x40
 800c32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c32e:	2300      	movs	r3, #0
 800c330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c338:	f107 0308 	add.w	r3, r7, #8
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7ff fe8e 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f981 	bl	800c64c <SDMMC_GetCmdResp3>
 800c34a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34c:	69fb      	ldr	r3, [r7, #28]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3720      	adds	r7, #32
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b088      	sub	sp, #32
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800c364:	2306      	movs	r3, #6
 800c366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c368:	2340      	movs	r3, #64	; 0x40
 800c36a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c36c:	2300      	movs	r3, #0
 800c36e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c374:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c376:	f107 0308 	add.w	r3, r7, #8
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff fe6f 	bl	800c060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800c382:	f241 3288 	movw	r2, #5000	; 0x1388
 800c386:	2106      	movs	r1, #6
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f829 	bl	800c3e0 <SDMMC_GetCmdResp1>
 800c38e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c390:	69fb      	ldr	r3, [r7, #28]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3720      	adds	r7, #32
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b088      	sub	sp, #32
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ba:	f107 0308 	add.w	r3, r7, #8
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff fe4d 	bl	800c060 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD,SDMMC_CMDTIMEOUT);
 800c3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ca:	2108      	movs	r1, #8
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f807 	bl	800c3e0 <SDMMC_GetCmdResp1>
 800c3d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3720      	adds	r7, #32
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c3ee:	4b70      	ldr	r3, [pc, #448]	; (800c5b0 <SDMMC_GetCmdResp1+0x1d0>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a70      	ldr	r2, [pc, #448]	; (800c5b4 <SDMMC_GetCmdResp1+0x1d4>)
 800c3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f8:	0a5a      	lsrs	r2, r3, #9
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	fb02 f303 	mul.w	r3, r2, r3
 800c400:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	1e5a      	subs	r2, r3, #1
 800c406:	61fa      	str	r2, [r7, #28]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c40c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c410:	e0c9      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c416:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0ef      	beq.n	800c402 <SDMMC_GetCmdResp1+0x22>
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1ea      	bne.n	800c402 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2204      	movs	r2, #4
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c43e:	2304      	movs	r3, #4
 800c440:	e0b1      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2201      	movs	r2, #1
 800c452:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c454:	2301      	movs	r3, #1
 800c456:	e0a6      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	22c5      	movs	r2, #197	; 0xc5
 800c45c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7ff fe28 	bl	800c0b4 <SDMMC_GetCommandResponse>
 800c464:	4603      	mov	r3, r0
 800c466:	461a      	mov	r2, r3
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d001      	beq.n	800c472 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c46e:	2301      	movs	r3, #1
 800c470:	e099      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c472:	2100      	movs	r1, #0
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f7ff fe2a 	bl	800c0ce <SDMMC_GetResponse>
 800c47a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	4b4e      	ldr	r3, [pc, #312]	; (800c5b8 <SDMMC_GetCmdResp1+0x1d8>)
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c486:	2300      	movs	r3, #0
 800c488:	e08d      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	da02      	bge.n	800c496 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c494:	e087      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c4a0:	2340      	movs	r3, #64	; 0x40
 800c4a2:	e080      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c4ae:	2380      	movs	r3, #128	; 0x80
 800c4b0:	e079      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c4bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4c0:	e071      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c4cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4d0:	e069      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c4dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4e0:	e061      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c4ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4f0:	e059      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c4fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c500:	e051      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c50c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c510:	e049      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d002      	beq.n	800c522 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c51c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c520:	e041      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c52c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c530:	e039      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c53c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c540:	e031      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c54c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c550:	e029      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c55c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c560:	e021      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c56c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c570:	e019      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c57c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c580:	e011      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d002      	beq.n	800c592 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c58c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c590:	e009      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f003 0308 	and.w	r3, r3, #8
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c59c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c5a0:	e001      	b.n	800c5a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3720      	adds	r7, #32
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20000000 	.word	0x20000000
 800c5b4:	10624dd3 	.word	0x10624dd3
 800c5b8:	fdffe008 	.word	0xfdffe008

0800c5bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5c4:	4b1f      	ldr	r3, [pc, #124]	; (800c644 <SDMMC_GetCmdResp2+0x88>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a1f      	ldr	r2, [pc, #124]	; (800c648 <SDMMC_GetCmdResp2+0x8c>)
 800c5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ce:	0a5b      	lsrs	r3, r3, #9
 800c5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5d4:	fb02 f303 	mul.w	r3, r2, r3
 800c5d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	1e5a      	subs	r2, r3, #1
 800c5de:	60fa      	str	r2, [r7, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d102      	bne.n	800c5ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5e8:	e026      	b.n	800c638 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0ef      	beq.n	800c5da <SDMMC_GetCmdResp2+0x1e>
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1ea      	bne.n	800c5da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2204      	movs	r2, #4
 800c614:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c616:	2304      	movs	r3, #4
 800c618:	e00e      	b.n	800c638 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d004      	beq.n	800c630 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e003      	b.n	800c638 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	22c5      	movs	r2, #197	; 0xc5
 800c634:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	20000000 	.word	0x20000000
 800c648:	10624dd3 	.word	0x10624dd3

0800c64c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c654:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <SDMMC_GetCmdResp3+0x74>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a1a      	ldr	r2, [pc, #104]	; (800c6c4 <SDMMC_GetCmdResp3+0x78>)
 800c65a:	fba2 2303 	umull	r2, r3, r2, r3
 800c65e:	0a5b      	lsrs	r3, r3, #9
 800c660:	f241 3288 	movw	r2, #5000	; 0x1388
 800c664:	fb02 f303 	mul.w	r3, r2, r3
 800c668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	60fa      	str	r2, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c678:	e01b      	b.n	800c6b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c686:	2b00      	cmp	r3, #0
 800c688:	d0ef      	beq.n	800c66a <SDMMC_GetCmdResp3+0x1e>
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1ea      	bne.n	800c66a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d004      	beq.n	800c6aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2204      	movs	r2, #4
 800c6a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6a6:	2304      	movs	r3, #4
 800c6a8:	e003      	b.n	800c6b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	22c5      	movs	r2, #197	; 0xc5
 800c6ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20000000 	.word	0x20000000
 800c6c4:	10624dd3 	.word	0x10624dd3

0800c6c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c6d0:	4b11      	ldr	r3, [pc, #68]	; (800c718 <SDMMC_GetCmdError+0x50>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a11      	ldr	r2, [pc, #68]	; (800c71c <SDMMC_GetCmdError+0x54>)
 800c6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6da:	0a5b      	lsrs	r3, r3, #9
 800c6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e0:	fb02 f303 	mul.w	r3, r2, r3
 800c6e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1e5a      	subs	r2, r3, #1
 800c6ea:	60fa      	str	r2, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d102      	bne.n	800c6f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6f4:	e009      	b.n	800c70a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d0f1      	beq.n	800c6e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	22c5      	movs	r2, #197	; 0xc5
 800c706:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20000000 	.word	0x20000000
 800c71c:	10624dd3 	.word	0x10624dd3

0800c720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c720:	b084      	sub	sp, #16
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	f107 001c 	add.w	r0, r7, #28
 800c72e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	2b01      	cmp	r3, #1
 800c736:	d120      	bne.n	800c77a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	68da      	ldr	r2, [r3, #12]
 800c748:	4b20      	ldr	r3, [pc, #128]	; (800c7cc <USB_CoreInit+0xac>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d105      	bne.n	800c76e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fdb2 	bl	800d2d8 <USB_CoreReset>
 800c774:	4603      	mov	r3, r0
 800c776:	73fb      	strb	r3, [r7, #15]
 800c778:	e010      	b.n	800c79c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fda6 	bl	800d2d8 <USB_CoreReset>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d10b      	bne.n	800c7ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f043 0206 	orr.w	r2, r3, #6
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	f043 0220 	orr.w	r2, r3, #32
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7c6:	b004      	add	sp, #16
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	ffbdffbf 	.word	0xffbdffbf

0800c7d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d165      	bne.n	800c8b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	4a41      	ldr	r2, [pc, #260]	; (800c8ec <USB_SetTurnaroundTime+0x11c>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d906      	bls.n	800c7fa <USB_SetTurnaroundTime+0x2a>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	4a40      	ldr	r2, [pc, #256]	; (800c8f0 <USB_SetTurnaroundTime+0x120>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d202      	bcs.n	800c7fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c7f4:	230f      	movs	r3, #15
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	e062      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	4a3c      	ldr	r2, [pc, #240]	; (800c8f0 <USB_SetTurnaroundTime+0x120>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d306      	bcc.n	800c810 <USB_SetTurnaroundTime+0x40>
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4a3b      	ldr	r2, [pc, #236]	; (800c8f4 <USB_SetTurnaroundTime+0x124>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d202      	bcs.n	800c810 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c80a:	230e      	movs	r3, #14
 800c80c:	617b      	str	r3, [r7, #20]
 800c80e:	e057      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	4a38      	ldr	r2, [pc, #224]	; (800c8f4 <USB_SetTurnaroundTime+0x124>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d306      	bcc.n	800c826 <USB_SetTurnaroundTime+0x56>
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	4a37      	ldr	r2, [pc, #220]	; (800c8f8 <USB_SetTurnaroundTime+0x128>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d202      	bcs.n	800c826 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c820:	230d      	movs	r3, #13
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	e04c      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	4a33      	ldr	r2, [pc, #204]	; (800c8f8 <USB_SetTurnaroundTime+0x128>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d306      	bcc.n	800c83c <USB_SetTurnaroundTime+0x6c>
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	4a32      	ldr	r2, [pc, #200]	; (800c8fc <USB_SetTurnaroundTime+0x12c>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d802      	bhi.n	800c83c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c836:	230c      	movs	r3, #12
 800c838:	617b      	str	r3, [r7, #20]
 800c83a:	e041      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	4a2f      	ldr	r2, [pc, #188]	; (800c8fc <USB_SetTurnaroundTime+0x12c>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d906      	bls.n	800c852 <USB_SetTurnaroundTime+0x82>
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	4a2e      	ldr	r2, [pc, #184]	; (800c900 <USB_SetTurnaroundTime+0x130>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d802      	bhi.n	800c852 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c84c:	230b      	movs	r3, #11
 800c84e:	617b      	str	r3, [r7, #20]
 800c850:	e036      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	4a2a      	ldr	r2, [pc, #168]	; (800c900 <USB_SetTurnaroundTime+0x130>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d906      	bls.n	800c868 <USB_SetTurnaroundTime+0x98>
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	4a29      	ldr	r2, [pc, #164]	; (800c904 <USB_SetTurnaroundTime+0x134>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d802      	bhi.n	800c868 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c862:	230a      	movs	r3, #10
 800c864:	617b      	str	r3, [r7, #20]
 800c866:	e02b      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	4a26      	ldr	r2, [pc, #152]	; (800c904 <USB_SetTurnaroundTime+0x134>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d906      	bls.n	800c87e <USB_SetTurnaroundTime+0xae>
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	4a25      	ldr	r2, [pc, #148]	; (800c908 <USB_SetTurnaroundTime+0x138>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d202      	bcs.n	800c87e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c878:	2309      	movs	r3, #9
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	e020      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	4a21      	ldr	r2, [pc, #132]	; (800c908 <USB_SetTurnaroundTime+0x138>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d306      	bcc.n	800c894 <USB_SetTurnaroundTime+0xc4>
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	4a20      	ldr	r2, [pc, #128]	; (800c90c <USB_SetTurnaroundTime+0x13c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d802      	bhi.n	800c894 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c88e:	2308      	movs	r3, #8
 800c890:	617b      	str	r3, [r7, #20]
 800c892:	e015      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4a1d      	ldr	r2, [pc, #116]	; (800c90c <USB_SetTurnaroundTime+0x13c>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d906      	bls.n	800c8aa <USB_SetTurnaroundTime+0xda>
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	4a1c      	ldr	r2, [pc, #112]	; (800c910 <USB_SetTurnaroundTime+0x140>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d202      	bcs.n	800c8aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c8a4:	2307      	movs	r3, #7
 800c8a6:	617b      	str	r3, [r7, #20]
 800c8a8:	e00a      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c8aa:	2306      	movs	r3, #6
 800c8ac:	617b      	str	r3, [r7, #20]
 800c8ae:	e007      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c8b6:	2309      	movs	r3, #9
 800c8b8:	617b      	str	r3, [r7, #20]
 800c8ba:	e001      	b.n	800c8c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c8bc:	2309      	movs	r3, #9
 800c8be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	68da      	ldr	r2, [r3, #12]
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	029b      	lsls	r3, r3, #10
 800c8d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	371c      	adds	r7, #28
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	00d8acbf 	.word	0x00d8acbf
 800c8f0:	00e4e1c0 	.word	0x00e4e1c0
 800c8f4:	00f42400 	.word	0x00f42400
 800c8f8:	01067380 	.word	0x01067380
 800c8fc:	011a499f 	.word	0x011a499f
 800c900:	01312cff 	.word	0x01312cff
 800c904:	014ca43f 	.word	0x014ca43f
 800c908:	016e3600 	.word	0x016e3600
 800c90c:	01a6ab1f 	.word	0x01a6ab1f
 800c910:	01e84800 	.word	0x01e84800

0800c914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f023 0201 	bic.w	r2, r3, #1
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	460b      	mov	r3, r1
 800c940:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c942:	2300      	movs	r3, #0
 800c944:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d115      	bne.n	800c984 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c964:	2001      	movs	r0, #1
 800c966:	f7f6 fc83 	bl	8003270 <HAL_Delay>
      ms++;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fc21 	bl	800d1b8 <USB_GetMode>
 800c976:	4603      	mov	r3, r0
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d01e      	beq.n	800c9ba <USB_SetCurrentMode+0x84>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b31      	cmp	r3, #49	; 0x31
 800c980:	d9f0      	bls.n	800c964 <USB_SetCurrentMode+0x2e>
 800c982:	e01a      	b.n	800c9ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c984:	78fb      	ldrb	r3, [r7, #3]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d115      	bne.n	800c9b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c996:	2001      	movs	r0, #1
 800c998:	f7f6 fc6a 	bl	8003270 <HAL_Delay>
      ms++;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fc08 	bl	800d1b8 <USB_GetMode>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d005      	beq.n	800c9ba <USB_SetCurrentMode+0x84>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b31      	cmp	r3, #49	; 0x31
 800c9b2:	d9f0      	bls.n	800c996 <USB_SetCurrentMode+0x60>
 800c9b4:	e001      	b.n	800c9ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e005      	b.n	800c9c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b32      	cmp	r3, #50	; 0x32
 800c9be:	d101      	bne.n	800c9c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e000      	b.n	800c9c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b086      	sub	sp, #24
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c9de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	613b      	str	r3, [r7, #16]
 800c9ee:	e009      	b.n	800ca04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	3340      	adds	r3, #64	; 0x40
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	3301      	adds	r3, #1
 800ca02:	613b      	str	r3, [r7, #16]
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	2b0e      	cmp	r3, #14
 800ca08:	d9f2      	bls.n	800c9f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d11c      	bne.n	800ca4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca1e:	f043 0302 	orr.w	r3, r3, #2
 800ca22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	e005      	b.n	800ca56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca68:	4619      	mov	r1, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca70:	461a      	mov	r2, r3
 800ca72:	680b      	ldr	r3, [r1, #0]
 800ca74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d10c      	bne.n	800ca96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d104      	bne.n	800ca8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ca82:	2100      	movs	r1, #0
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f965 	bl	800cd54 <USB_SetDevSpeed>
 800ca8a:	e008      	b.n	800ca9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f960 	bl	800cd54 <USB_SetDevSpeed>
 800ca94:	e003      	b.n	800ca9e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ca96:	2103      	movs	r1, #3
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f95b 	bl	800cd54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ca9e:	2110      	movs	r1, #16
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 f8f3 	bl	800cc8c <USB_FlushTxFifo>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f91f 	bl	800ccf4 <USB_FlushRxFifo>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac6:	461a      	mov	r2, r3
 800cac8:	2300      	movs	r3, #0
 800caca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cad2:	461a      	mov	r2, r3
 800cad4:	2300      	movs	r3, #0
 800cad6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cade:	461a      	mov	r2, r3
 800cae0:	2300      	movs	r3, #0
 800cae2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cae4:	2300      	movs	r3, #0
 800cae6:	613b      	str	r3, [r7, #16]
 800cae8:	e043      	b.n	800cb72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	015a      	lsls	r2, r3, #5
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4413      	add	r3, r2
 800caf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cafc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb00:	d118      	bne.n	800cb34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10a      	bne.n	800cb1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb14:	461a      	mov	r2, r3
 800cb16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	e013      	b.n	800cb46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	e008      	b.n	800cb46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	461a      	mov	r2, r3
 800cb42:	2300      	movs	r3, #0
 800cb44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb52:	461a      	mov	r2, r3
 800cb54:	2300      	movs	r3, #0
 800cb56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	015a      	lsls	r2, r3, #5
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb64:	461a      	mov	r2, r3
 800cb66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	613b      	str	r3, [r7, #16]
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d3b7      	bcc.n	800caea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	e043      	b.n	800cc08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb96:	d118      	bne.n	800cbca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10a      	bne.n	800cbb4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbaa:	461a      	mov	r2, r3
 800cbac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	e013      	b.n	800cbdc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	e008      	b.n	800cbdc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	015a      	lsls	r2, r3, #5
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	2300      	movs	r3, #0
 800cbda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	015a      	lsls	r2, r3, #5
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe8:	461a      	mov	r2, r3
 800cbea:	2300      	movs	r3, #0
 800cbec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	3301      	adds	r3, #1
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d3b7      	bcc.n	800cb80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cc30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d105      	bne.n	800cc44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	f043 0210 	orr.w	r2, r3, #16
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	699a      	ldr	r2, [r3, #24]
 800cc48:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <USB_DevInit+0x2b4>)
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d005      	beq.n	800cc62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	f043 0208 	orr.w	r2, r3, #8
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d105      	bne.n	800cc74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	699a      	ldr	r2, [r3, #24]
 800cc6c:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <USB_DevInit+0x2b8>)
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc80:	b004      	add	sp, #16
 800cc82:	4770      	bx	lr
 800cc84:	803c3800 	.word	0x803c3800
 800cc88:	40000004 	.word	0x40000004

0800cc8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4a13      	ldr	r2, [pc, #76]	; (800ccf0 <USB_FlushTxFifo+0x64>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d901      	bls.n	800ccac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e01b      	b.n	800cce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	daf2      	bge.n	800cc9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	019b      	lsls	r3, r3, #6
 800ccbc:	f043 0220 	orr.w	r2, r3, #32
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4a08      	ldr	r2, [pc, #32]	; (800ccf0 <USB_FlushTxFifo+0x64>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d901      	bls.n	800ccd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e006      	b.n	800cce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b20      	cmp	r3, #32
 800cce0:	d0f0      	beq.n	800ccc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	00030d40 	.word	0x00030d40

0800ccf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	3301      	adds	r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4a11      	ldr	r2, [pc, #68]	; (800cd50 <USB_FlushRxFifo+0x5c>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d901      	bls.n	800cd12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e018      	b.n	800cd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	daf2      	bge.n	800cd00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2210      	movs	r2, #16
 800cd22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3301      	adds	r3, #1
 800cd28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	4a08      	ldr	r2, [pc, #32]	; (800cd50 <USB_FlushRxFifo+0x5c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d901      	bls.n	800cd36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e006      	b.n	800cd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	f003 0310 	and.w	r3, r3, #16
 800cd3e:	2b10      	cmp	r3, #16
 800cd40:	d0f0      	beq.n	800cd24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	00030d40 	.word	0x00030d40

0800cd54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	78fb      	ldrb	r3, [r7, #3]
 800cd6e:	68f9      	ldr	r1, [r7, #12]
 800cd70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd74:	4313      	orrs	r3, r2
 800cd76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cd86:	b480      	push	{r7}
 800cd88:	b087      	sub	sp, #28
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	f003 0306 	and.w	r3, r3, #6
 800cd9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d102      	bne.n	800cdac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cda6:	2300      	movs	r3, #0
 800cda8:	75fb      	strb	r3, [r7, #23]
 800cdaa:	e00a      	b.n	800cdc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d002      	beq.n	800cdb8 <USB_GetDevSpeed+0x32>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b06      	cmp	r3, #6
 800cdb6:	d102      	bne.n	800cdbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cdb8:	2302      	movs	r3, #2
 800cdba:	75fb      	strb	r3, [r7, #23]
 800cdbc:	e001      	b.n	800cdc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cdbe:	230f      	movs	r3, #15
 800cdc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	371c      	adds	r7, #28
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	785b      	ldrb	r3, [r3, #1]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d14a      	bne.n	800ce84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce06:	f040 8086 	bne.w	800cf16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	7812      	ldrb	r2, [r2, #0]
 800ce1e:	0151      	lsls	r1, r2, #5
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	440a      	add	r2, r1
 800ce24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	015a      	lsls	r2, r3, #5
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	4413      	add	r3, r2
 800ce38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	683a      	ldr	r2, [r7, #0]
 800ce40:	7812      	ldrb	r2, [r2, #0]
 800ce42:	0151      	lsls	r1, r2, #5
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	440a      	add	r2, r1
 800ce48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3301      	adds	r3, #1
 800ce56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d902      	bls.n	800ce68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	75fb      	strb	r3, [r7, #23]
          break;
 800ce66:	e056      	b.n	800cf16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce80:	d0e7      	beq.n	800ce52 <USB_EPStopXfer+0x82>
 800ce82:	e048      	b.n	800cf16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	015a      	lsls	r2, r3, #5
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce9c:	d13b      	bne.n	800cf16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	015a      	lsls	r2, r3, #5
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	4413      	add	r3, r2
 800cea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	7812      	ldrb	r2, [r2, #0]
 800ceb2:	0151      	lsls	r1, r2, #5
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	440a      	add	r2, r1
 800ceb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cebc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cec0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	0151      	lsls	r1, r2, #5
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	440a      	add	r2, r1
 800cedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cee4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3301      	adds	r3, #1
 800ceea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f242 7210 	movw	r2, #10000	; 0x2710
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d902      	bls.n	800cefc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	75fb      	strb	r3, [r7, #23]
          break;
 800cefa:	e00c      	b.n	800cf16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf14:	d0e7      	beq.n	800cee6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	371c      	adds	r7, #28
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b089      	sub	sp, #36	; 0x24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	4611      	mov	r1, r2
 800cf30:	461a      	mov	r2, r3
 800cf32:	460b      	mov	r3, r1
 800cf34:	71fb      	strb	r3, [r7, #7]
 800cf36:	4613      	mov	r3, r2
 800cf38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d123      	bne.n	800cf92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf4a:	88bb      	ldrh	r3, [r7, #4]
 800cf4c:	3303      	adds	r3, #3
 800cf4e:	089b      	lsrs	r3, r3, #2
 800cf50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf52:	2300      	movs	r3, #0
 800cf54:	61bb      	str	r3, [r7, #24]
 800cf56:	e018      	b.n	800cf8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf58:	79fb      	ldrb	r3, [r7, #7]
 800cf5a:	031a      	lsls	r2, r3, #12
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf64:	461a      	mov	r2, r3
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	3301      	adds	r3, #1
 800cf76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	3301      	adds	r3, #1
 800cf82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	3301      	adds	r3, #1
 800cf88:	61bb      	str	r3, [r7, #24]
 800cf8a:	69ba      	ldr	r2, [r7, #24]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d3e2      	bcc.n	800cf58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3724      	adds	r7, #36	; 0x24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b08b      	sub	sp, #44	; 0x2c
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cfb6:	88fb      	ldrh	r3, [r7, #6]
 800cfb8:	089b      	lsrs	r3, r3, #2
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cfbe:	88fb      	ldrh	r3, [r7, #6]
 800cfc0:	f003 0303 	and.w	r3, r3, #3
 800cfc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	623b      	str	r3, [r7, #32]
 800cfca:	e014      	b.n	800cff6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	601a      	str	r2, [r3, #0]
    pDest++;
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	3301      	adds	r3, #1
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	3301      	adds	r3, #1
 800cfee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	3301      	adds	r3, #1
 800cff4:	623b      	str	r3, [r7, #32]
 800cff6:	6a3a      	ldr	r2, [r7, #32]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d3e6      	bcc.n	800cfcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cffe:	8bfb      	ldrh	r3, [r7, #30]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d01e      	beq.n	800d042 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d004:	2300      	movs	r3, #0
 800d006:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d00e:	461a      	mov	r2, r3
 800d010:	f107 0310 	add.w	r3, r7, #16
 800d014:	6812      	ldr	r2, [r2, #0]
 800d016:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	00db      	lsls	r3, r3, #3
 800d020:	fa22 f303 	lsr.w	r3, r2, r3
 800d024:	b2da      	uxtb	r2, r3
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	701a      	strb	r2, [r3, #0]
      i++;
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	3301      	adds	r3, #1
 800d02e:	623b      	str	r3, [r7, #32]
      pDest++;
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	3301      	adds	r3, #1
 800d034:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d036:	8bfb      	ldrh	r3, [r7, #30]
 800d038:	3b01      	subs	r3, #1
 800d03a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d03c:	8bfb      	ldrh	r3, [r7, #30]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1ea      	bne.n	800d018 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d044:	4618      	mov	r0, r3
 800d046:	372c      	adds	r7, #44	; 0x2c
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d07e:	f043 0302 	orr.w	r3, r3, #2
 800d082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d092:	b480      	push	{r7}
 800d094:	b085      	sub	sp, #20
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	4013      	ands	r3, r2
 800d0da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	0c1b      	lsrs	r3, r3, #16
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d108:	69db      	ldr	r3, [r3, #28]
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4013      	ands	r3, r2
 800d10e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	b29b      	uxth	r3, r3
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	460b      	mov	r3, r1
 800d12a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d130:	78fb      	ldrb	r3, [r7, #3]
 800d132:	015a      	lsls	r2, r3, #5
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	4413      	add	r3, r2
 800d138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	4013      	ands	r3, r2
 800d14c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d14e:	68bb      	ldr	r3, [r7, #8]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d17e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	fa22 f303 	lsr.w	r3, r2, r3
 800d18c:	01db      	lsls	r3, r3, #7
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	4313      	orrs	r3, r2
 800d194:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d196:	78fb      	ldrb	r3, [r7, #3]
 800d198:	015a      	lsls	r2, r3, #5
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	371c      	adds	r7, #28
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	f003 0301 	and.w	r3, r3, #1
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4b09      	ldr	r3, [pc, #36]	; (800d218 <USB_ActivateSetup+0x44>)
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d208:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr
 800d218:	fffff800 	.word	0xfffff800

0800d21c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	460b      	mov	r3, r1
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	333c      	adds	r3, #60	; 0x3c
 800d232:	3304      	adds	r3, #4
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	4a26      	ldr	r2, [pc, #152]	; (800d2d4 <USB_EP0_OutStart+0xb8>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d90a      	bls.n	800d256 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d24c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d250:	d101      	bne.n	800d256 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	e037      	b.n	800d2c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25c:	461a      	mov	r2, r3
 800d25e:	2300      	movs	r3, #0
 800d260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d284:	f043 0318 	orr.w	r3, r3, #24
 800d288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d298:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d29c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d29e:	7afb      	ldrb	r3, [r7, #11]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d10f      	bne.n	800d2c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d2c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	371c      	adds	r7, #28
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	4f54300a 	.word	0x4f54300a

0800d2d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	4a13      	ldr	r2, [pc, #76]	; (800d33c <USB_CoreReset+0x64>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d901      	bls.n	800d2f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2f2:	2303      	movs	r3, #3
 800d2f4:	e01b      	b.n	800d32e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	daf2      	bge.n	800d2e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	f043 0201 	orr.w	r2, r3, #1
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	3301      	adds	r3, #1
 800d312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4a09      	ldr	r2, [pc, #36]	; (800d33c <USB_CoreReset+0x64>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d901      	bls.n	800d320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e006      	b.n	800d32e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d0f0      	beq.n	800d30e <USB_CoreReset+0x36>

  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	00030d40 	.word	0x00030d40

0800d340 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d34e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d352:	2b84      	cmp	r3, #132	; 0x84
 800d354:	d005      	beq.n	800d362 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d356:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	4413      	add	r3, r2
 800d35e:	3303      	adds	r3, #3
 800d360:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d362:	68fb      	ldr	r3, [r7, #12]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d374:	f000 faf4 	bl	800d960 <vTaskStartScheduler>
  
  return osOK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d380:	b089      	sub	sp, #36	; 0x24
 800d382:	af04      	add	r7, sp, #16
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d020      	beq.n	800d3d2 <osThreadCreate+0x54>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d01c      	beq.n	800d3d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685c      	ldr	r4, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681d      	ldr	r5, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	691e      	ldr	r6, [r3, #16]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7ff ffc8 	bl	800d340 <makeFreeRtosPriority>
 800d3b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3ba:	9202      	str	r2, [sp, #8]
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	9100      	str	r1, [sp, #0]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f000 f8ed 	bl	800d5a6 <xTaskCreateStatic>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	e01c      	b.n	800d40c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685c      	ldr	r4, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3de:	b29e      	uxth	r6, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff ffaa 	bl	800d340 <makeFreeRtosPriority>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	f107 030c 	add.w	r3, r7, #12
 800d3f2:	9301      	str	r3, [sp, #4]
 800d3f4:	9200      	str	r2, [sp, #0]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 f935 	bl	800d66c <xTaskCreate>
 800d402:	4603      	mov	r3, r0
 800d404:	2b01      	cmp	r3, #1
 800d406:	d001      	beq.n	800d40c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d408:	2300      	movs	r3, #0
 800d40a:	e000      	b.n	800d40e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d40c:	68fb      	ldr	r3, [r7, #12]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d416 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <osDelay+0x16>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	e000      	b.n	800d42e <osDelay+0x18>
 800d42c:	2301      	movs	r3, #1
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fa60 	bl	800d8f4 <vTaskDelay>
  
  return osOK;
 800d434:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f103 0208 	add.w	r2, r3, #8
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f04f 32ff 	mov.w	r2, #4294967295
 800d456:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f103 0208 	add.w	r2, r3, #8
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f103 0208 	add.w	r2, r3, #8
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d472:	bf00      	nop
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d47e:	b480      	push	{r7}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	689a      	ldr	r2, [r3, #8]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	683a      	ldr	r2, [r7, #0]
 800d4c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	601a      	str	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f6:	d103      	bne.n	800d500 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	e00c      	b.n	800d51a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3308      	adds	r3, #8
 800d504:	60fb      	str	r3, [r7, #12]
 800d506:	e002      	b.n	800d50e <vListInsert+0x2e>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	429a      	cmp	r2, r3
 800d518:	d2f6      	bcs.n	800d508 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685a      	ldr	r2, [r3, #4]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	601a      	str	r2, [r3, #0]
}
 800d546:	bf00      	nop
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d552:	b480      	push	{r7}
 800d554:	b085      	sub	sp, #20
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	6892      	ldr	r2, [r2, #8]
 800d568:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	6852      	ldr	r2, [r2, #4]
 800d572:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d103      	bne.n	800d586 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	689a      	ldr	r2, [r3, #8]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2200      	movs	r2, #0
 800d58a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	1e5a      	subs	r2, r3, #1
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b08e      	sub	sp, #56	; 0x38
 800d5aa:	af04      	add	r7, sp, #16
 800d5ac:	60f8      	str	r0, [r7, #12]
 800d5ae:	60b9      	str	r1, [r7, #8]
 800d5b0:	607a      	str	r2, [r7, #4]
 800d5b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10c      	bne.n	800d5d4 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	b672      	cpsid	i
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	b662      	cpsie	i
 800d5ce:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10c      	bne.n	800d5f4 <xTaskCreateStatic+0x4e>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	b672      	cpsid	i
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	b662      	cpsie	i
 800d5ee:	61fb      	str	r3, [r7, #28]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5f4:	2358      	movs	r3, #88	; 0x58
 800d5f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b58      	cmp	r3, #88	; 0x58
 800d5fc:	d00c      	beq.n	800d618 <xTaskCreateStatic+0x72>
	__asm volatile
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	b672      	cpsid	i
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	b662      	cpsie	i
 800d612:	61bb      	str	r3, [r7, #24]
}
 800d614:	bf00      	nop
 800d616:	e7fe      	b.n	800d616 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d618:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01e      	beq.n	800d65e <xTaskCreateStatic+0xb8>
 800d620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d622:	2b00      	cmp	r3, #0
 800d624:	d01b      	beq.n	800d65e <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d62e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	2202      	movs	r2, #2
 800d634:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d638:	2300      	movs	r3, #0
 800d63a:	9303      	str	r3, [sp, #12]
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	9302      	str	r3, [sp, #8]
 800d640:	f107 0314 	add.w	r3, r7, #20
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	68b9      	ldr	r1, [r7, #8]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f000 f850 	bl	800d6f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d658:	f000 f8e2 	bl	800d820 <prvAddNewTaskToReadyList>
 800d65c:	e001      	b.n	800d662 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d65e:	2300      	movs	r3, #0
 800d660:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d662:	697b      	ldr	r3, [r7, #20]
	}
 800d664:	4618      	mov	r0, r3
 800d666:	3728      	adds	r7, #40	; 0x28
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08c      	sub	sp, #48	; 0x30
 800d670:	af04      	add	r7, sp, #16
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	603b      	str	r3, [r7, #0]
 800d678:	4613      	mov	r3, r2
 800d67a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4618      	mov	r0, r3
 800d682:	f000 feeb 	bl	800e45c <pvPortMalloc>
 800d686:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00e      	beq.n	800d6ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d68e:	2058      	movs	r0, #88	; 0x58
 800d690:	f000 fee4 	bl	800e45c <pvPortMalloc>
 800d694:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d003      	beq.n	800d6a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d6a2:	e005      	b.n	800d6b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6a4:	6978      	ldr	r0, [r7, #20]
 800d6a6:	f000 ffa9 	bl	800e5fc <vPortFree>
 800d6aa:	e001      	b.n	800d6b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d017      	beq.n	800d6e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6be:	88fa      	ldrh	r2, [r7, #6]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	9303      	str	r3, [sp, #12]
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	9302      	str	r3, [sp, #8]
 800d6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 f80e 	bl	800d6f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6da:	69f8      	ldr	r0, [r7, #28]
 800d6dc:	f000 f8a0 	bl	800d820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	61bb      	str	r3, [r7, #24]
 800d6e4:	e002      	b.n	800d6ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6ec:	69bb      	ldr	r3, [r7, #24]
	}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3720      	adds	r7, #32
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]
 800d702:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	461a      	mov	r2, r3
 800d70e:	21a5      	movs	r1, #165	; 0xa5
 800d710:	f001 f8b2 	bl	800e878 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d71e:	440b      	add	r3, r1
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	f023 0307 	bic.w	r3, r3, #7
 800d72c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	f003 0307 	and.w	r3, r3, #7
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00c      	beq.n	800d752 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73c:	b672      	cpsid	i
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	b662      	cpsie	i
 800d74c:	617b      	str	r3, [r7, #20]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01f      	beq.n	800d798 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d758:	2300      	movs	r3, #0
 800d75a:	61fb      	str	r3, [r7, #28]
 800d75c:	e012      	b.n	800d784 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	4413      	add	r3, r2
 800d764:	7819      	ldrb	r1, [r3, #0]
 800d766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	3334      	adds	r3, #52	; 0x34
 800d76e:	460a      	mov	r2, r1
 800d770:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	4413      	add	r3, r2
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d006      	beq.n	800d78c <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	3301      	adds	r3, #1
 800d782:	61fb      	str	r3, [r7, #28]
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	2b0f      	cmp	r3, #15
 800d788:	d9e9      	bls.n	800d75e <prvInitialiseNewTask+0x68>
 800d78a:	e000      	b.n	800d78e <prvInitialiseNewTask+0x98>
			{
				break;
 800d78c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d796:	e003      	b.n	800d7a0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	2b06      	cmp	r3, #6
 800d7a4:	d901      	bls.n	800d7aa <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7a6:	2306      	movs	r3, #6
 800d7a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	3304      	adds	r3, #4
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff fe5c 	bl	800d47e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	3318      	adds	r3, #24
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fe57 	bl	800d47e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d8:	f1c3 0207 	rsb	r2, r3, #7
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	68f9      	ldr	r1, [r7, #12]
 800d7fe:	69b8      	ldr	r0, [r7, #24]
 800d800:	f000 fc3a 	bl	800e078 <pxPortInitialiseStack>
 800d804:	4602      	mov	r2, r0
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d816:	bf00      	nop
 800d818:	3720      	adds	r7, #32
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d828:	f000 fd30 	bl	800e28c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d82c:	4b2a      	ldr	r3, [pc, #168]	; (800d8d8 <prvAddNewTaskToReadyList+0xb8>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	4a29      	ldr	r2, [pc, #164]	; (800d8d8 <prvAddNewTaskToReadyList+0xb8>)
 800d834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d836:	4b29      	ldr	r3, [pc, #164]	; (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d109      	bne.n	800d852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d83e:	4a27      	ldr	r2, [pc, #156]	; (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d844:	4b24      	ldr	r3, [pc, #144]	; (800d8d8 <prvAddNewTaskToReadyList+0xb8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d110      	bne.n	800d86e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d84c:	f000 faee 	bl	800de2c <prvInitialiseTaskLists>
 800d850:	e00d      	b.n	800d86e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d852:	4b23      	ldr	r3, [pc, #140]	; (800d8e0 <prvAddNewTaskToReadyList+0xc0>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d85a:	4b20      	ldr	r3, [pc, #128]	; (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d864:	429a      	cmp	r2, r3
 800d866:	d802      	bhi.n	800d86e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d868:	4a1c      	ldr	r2, [pc, #112]	; (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d86e:	4b1d      	ldr	r3, [pc, #116]	; (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a1b      	ldr	r2, [pc, #108]	; (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d876:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	2201      	movs	r2, #1
 800d87e:	409a      	lsls	r2, r3
 800d880:	4b19      	ldr	r3, [pc, #100]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4313      	orrs	r3, r2
 800d886:	4a18      	ldr	r2, [pc, #96]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88e:	4613      	mov	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4413      	add	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4a15      	ldr	r2, [pc, #84]	; (800d8ec <prvAddNewTaskToReadyList+0xcc>)
 800d898:	441a      	add	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	3304      	adds	r3, #4
 800d89e:	4619      	mov	r1, r3
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	f7ff fdf9 	bl	800d498 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8a6:	f000 fd25 	bl	800e2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8aa:	4b0d      	ldr	r3, [pc, #52]	; (800d8e0 <prvAddNewTaskToReadyList+0xc0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00e      	beq.n	800d8d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d207      	bcs.n	800d8d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8c0:	4b0b      	ldr	r3, [pc, #44]	; (800d8f0 <prvAddNewTaskToReadyList+0xd0>)
 800d8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	2000167c 	.word	0x2000167c
 800d8dc:	2000157c 	.word	0x2000157c
 800d8e0:	20001688 	.word	0x20001688
 800d8e4:	20001698 	.word	0x20001698
 800d8e8:	20001684 	.word	0x20001684
 800d8ec:	20001580 	.word	0x20001580
 800d8f0:	e000ed04 	.word	0xe000ed04

0800d8f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d019      	beq.n	800d93a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d906:	4b14      	ldr	r3, [pc, #80]	; (800d958 <vTaskDelay+0x64>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00c      	beq.n	800d928 <vTaskDelay+0x34>
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d912:	b672      	cpsid	i
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	b662      	cpsie	i
 800d922:	60bb      	str	r3, [r7, #8]
}
 800d924:	bf00      	nop
 800d926:	e7fe      	b.n	800d926 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d928:	f000 f87e 	bl	800da28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d92c:	2100      	movs	r1, #0
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fb3c 	bl	800dfac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d934:	f000 f886 	bl	800da44 <xTaskResumeAll>
 800d938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d107      	bne.n	800d950 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d940:	4b06      	ldr	r3, [pc, #24]	; (800d95c <vTaskDelay+0x68>)
 800d942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d950:	bf00      	nop
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	200016a4 	.word	0x200016a4
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b08a      	sub	sp, #40	; 0x28
 800d964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d966:	2300      	movs	r3, #0
 800d968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d96e:	463a      	mov	r2, r7
 800d970:	1d39      	adds	r1, r7, #4
 800d972:	f107 0308 	add.w	r3, r7, #8
 800d976:	4618      	mov	r0, r3
 800d978:	f7f3 fae8 	bl	8000f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d97c:	6839      	ldr	r1, [r7, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	9202      	str	r2, [sp, #8]
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	2300      	movs	r3, #0
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	2300      	movs	r3, #0
 800d98c:	460a      	mov	r2, r1
 800d98e:	4920      	ldr	r1, [pc, #128]	; (800da10 <vTaskStartScheduler+0xb0>)
 800d990:	4820      	ldr	r0, [pc, #128]	; (800da14 <vTaskStartScheduler+0xb4>)
 800d992:	f7ff fe08 	bl	800d5a6 <xTaskCreateStatic>
 800d996:	4603      	mov	r3, r0
 800d998:	4a1f      	ldr	r2, [pc, #124]	; (800da18 <vTaskStartScheduler+0xb8>)
 800d99a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d99c:	4b1e      	ldr	r3, [pc, #120]	; (800da18 <vTaskStartScheduler+0xb8>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	617b      	str	r3, [r7, #20]
 800d9a8:	e001      	b.n	800d9ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d118      	bne.n	800d9e6 <vTaskStartScheduler+0x86>
	__asm volatile
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	b672      	cpsid	i
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	b662      	cpsie	i
 800d9c8:	613b      	str	r3, [r7, #16]
}
 800d9ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9cc:	4b13      	ldr	r3, [pc, #76]	; (800da1c <vTaskStartScheduler+0xbc>)
 800d9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9d4:	4b12      	ldr	r3, [pc, #72]	; (800da20 <vTaskStartScheduler+0xc0>)
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9da:	4b12      	ldr	r3, [pc, #72]	; (800da24 <vTaskStartScheduler+0xc4>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9e0:	f000 fbd6 	bl	800e190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9e4:	e010      	b.n	800da08 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ec:	d10c      	bne.n	800da08 <vTaskStartScheduler+0xa8>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	b672      	cpsid	i
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	b662      	cpsie	i
 800da02:	60fb      	str	r3, [r7, #12]
}
 800da04:	bf00      	nop
 800da06:	e7fe      	b.n	800da06 <vTaskStartScheduler+0xa6>
}
 800da08:	bf00      	nop
 800da0a:	3718      	adds	r7, #24
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	0800e8c8 	.word	0x0800e8c8
 800da14:	0800ddf9 	.word	0x0800ddf9
 800da18:	200016a0 	.word	0x200016a0
 800da1c:	2000169c 	.word	0x2000169c
 800da20:	20001688 	.word	0x20001688
 800da24:	20001680 	.word	0x20001680

0800da28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da28:	b480      	push	{r7}
 800da2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800da2c:	4b04      	ldr	r3, [pc, #16]	; (800da40 <vTaskSuspendAll+0x18>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3301      	adds	r3, #1
 800da32:	4a03      	ldr	r2, [pc, #12]	; (800da40 <vTaskSuspendAll+0x18>)
 800da34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800da36:	bf00      	nop
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	200016a4 	.word	0x200016a4

0800da44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da4e:	2300      	movs	r3, #0
 800da50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da52:	4b42      	ldr	r3, [pc, #264]	; (800db5c <xTaskResumeAll+0x118>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10c      	bne.n	800da74 <xTaskResumeAll+0x30>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	b672      	cpsid	i
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	b662      	cpsie	i
 800da6e:	603b      	str	r3, [r7, #0]
}
 800da70:	bf00      	nop
 800da72:	e7fe      	b.n	800da72 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da74:	f000 fc0a 	bl	800e28c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da78:	4b38      	ldr	r3, [pc, #224]	; (800db5c <xTaskResumeAll+0x118>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	4a37      	ldr	r2, [pc, #220]	; (800db5c <xTaskResumeAll+0x118>)
 800da80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da82:	4b36      	ldr	r3, [pc, #216]	; (800db5c <xTaskResumeAll+0x118>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d161      	bne.n	800db4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da8a:	4b35      	ldr	r3, [pc, #212]	; (800db60 <xTaskResumeAll+0x11c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d05d      	beq.n	800db4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da92:	e02e      	b.n	800daf2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da94:	4b33      	ldr	r3, [pc, #204]	; (800db64 <xTaskResumeAll+0x120>)
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3318      	adds	r3, #24
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fd56 	bl	800d552 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3304      	adds	r3, #4
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fd51 	bl	800d552 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	2201      	movs	r2, #1
 800dab6:	409a      	lsls	r2, r3
 800dab8:	4b2b      	ldr	r3, [pc, #172]	; (800db68 <xTaskResumeAll+0x124>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	4a2a      	ldr	r2, [pc, #168]	; (800db68 <xTaskResumeAll+0x124>)
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4a27      	ldr	r2, [pc, #156]	; (800db6c <xTaskResumeAll+0x128>)
 800dad0:	441a      	add	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7ff fcdd 	bl	800d498 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae2:	4b23      	ldr	r3, [pc, #140]	; (800db70 <xTaskResumeAll+0x12c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae8:	429a      	cmp	r2, r3
 800daea:	d302      	bcc.n	800daf2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800daec:	4b21      	ldr	r3, [pc, #132]	; (800db74 <xTaskResumeAll+0x130>)
 800daee:	2201      	movs	r2, #1
 800daf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daf2:	4b1c      	ldr	r3, [pc, #112]	; (800db64 <xTaskResumeAll+0x120>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1cc      	bne.n	800da94 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db00:	f000 fa34 	bl	800df6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800db04:	4b1c      	ldr	r3, [pc, #112]	; (800db78 <xTaskResumeAll+0x134>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d010      	beq.n	800db32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db10:	f000 f836 	bl	800db80 <xTaskIncrementTick>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800db1a:	4b16      	ldr	r3, [pc, #88]	; (800db74 <xTaskResumeAll+0x130>)
 800db1c:	2201      	movs	r2, #1
 800db1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3b01      	subs	r3, #1
 800db24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1f1      	bne.n	800db10 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800db2c:	4b12      	ldr	r3, [pc, #72]	; (800db78 <xTaskResumeAll+0x134>)
 800db2e:	2200      	movs	r2, #0
 800db30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db32:	4b10      	ldr	r3, [pc, #64]	; (800db74 <xTaskResumeAll+0x130>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d009      	beq.n	800db4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db3a:	2301      	movs	r3, #1
 800db3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <xTaskResumeAll+0x138>)
 800db40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db44:	601a      	str	r2, [r3, #0]
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db4e:	f000 fbd1 	bl	800e2f4 <vPortExitCritical>

	return xAlreadyYielded;
 800db52:	68bb      	ldr	r3, [r7, #8]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	200016a4 	.word	0x200016a4
 800db60:	2000167c 	.word	0x2000167c
 800db64:	2000163c 	.word	0x2000163c
 800db68:	20001684 	.word	0x20001684
 800db6c:	20001580 	.word	0x20001580
 800db70:	2000157c 	.word	0x2000157c
 800db74:	20001690 	.word	0x20001690
 800db78:	2000168c 	.word	0x2000168c
 800db7c:	e000ed04 	.word	0xe000ed04

0800db80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db86:	2300      	movs	r3, #0
 800db88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db8a:	4b4f      	ldr	r3, [pc, #316]	; (800dcc8 <xTaskIncrementTick+0x148>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f040 808a 	bne.w	800dca8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db94:	4b4d      	ldr	r3, [pc, #308]	; (800dccc <xTaskIncrementTick+0x14c>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3301      	adds	r3, #1
 800db9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db9c:	4a4b      	ldr	r2, [pc, #300]	; (800dccc <xTaskIncrementTick+0x14c>)
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d122      	bne.n	800dbee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800dba8:	4b49      	ldr	r3, [pc, #292]	; (800dcd0 <xTaskIncrementTick+0x150>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00c      	beq.n	800dbcc <xTaskIncrementTick+0x4c>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	b672      	cpsid	i
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	b662      	cpsie	i
 800dbc6:	603b      	str	r3, [r7, #0]
}
 800dbc8:	bf00      	nop
 800dbca:	e7fe      	b.n	800dbca <xTaskIncrementTick+0x4a>
 800dbcc:	4b40      	ldr	r3, [pc, #256]	; (800dcd0 <xTaskIncrementTick+0x150>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	60fb      	str	r3, [r7, #12]
 800dbd2:	4b40      	ldr	r3, [pc, #256]	; (800dcd4 <xTaskIncrementTick+0x154>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a3e      	ldr	r2, [pc, #248]	; (800dcd0 <xTaskIncrementTick+0x150>)
 800dbd8:	6013      	str	r3, [r2, #0]
 800dbda:	4a3e      	ldr	r2, [pc, #248]	; (800dcd4 <xTaskIncrementTick+0x154>)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	4b3d      	ldr	r3, [pc, #244]	; (800dcd8 <xTaskIncrementTick+0x158>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a3c      	ldr	r2, [pc, #240]	; (800dcd8 <xTaskIncrementTick+0x158>)
 800dbe8:	6013      	str	r3, [r2, #0]
 800dbea:	f000 f9bf 	bl	800df6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbee:	4b3b      	ldr	r3, [pc, #236]	; (800dcdc <xTaskIncrementTick+0x15c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d348      	bcc.n	800dc8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbf8:	4b35      	ldr	r3, [pc, #212]	; (800dcd0 <xTaskIncrementTick+0x150>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d104      	bne.n	800dc0c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc02:	4b36      	ldr	r3, [pc, #216]	; (800dcdc <xTaskIncrementTick+0x15c>)
 800dc04:	f04f 32ff 	mov.w	r2, #4294967295
 800dc08:	601a      	str	r2, [r3, #0]
					break;
 800dc0a:	e03e      	b.n	800dc8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc0c:	4b30      	ldr	r3, [pc, #192]	; (800dcd0 <xTaskIncrementTick+0x150>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d203      	bcs.n	800dc2c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc24:	4a2d      	ldr	r2, [pc, #180]	; (800dcdc <xTaskIncrementTick+0x15c>)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc2a:	e02e      	b.n	800dc8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	3304      	adds	r3, #4
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7ff fc8e 	bl	800d552 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d004      	beq.n	800dc48 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	3318      	adds	r3, #24
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7ff fc85 	bl	800d552 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	409a      	lsls	r2, r3
 800dc50:	4b23      	ldr	r3, [pc, #140]	; (800dce0 <xTaskIncrementTick+0x160>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	4a22      	ldr	r2, [pc, #136]	; (800dce0 <xTaskIncrementTick+0x160>)
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5e:	4613      	mov	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4a1f      	ldr	r2, [pc, #124]	; (800dce4 <xTaskIncrementTick+0x164>)
 800dc68:	441a      	add	r2, r3
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4619      	mov	r1, r3
 800dc70:	4610      	mov	r0, r2
 800dc72:	f7ff fc11 	bl	800d498 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7a:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <xTaskIncrementTick+0x168>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d3b9      	bcc.n	800dbf8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc88:	e7b6      	b.n	800dbf8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc8a:	4b17      	ldr	r3, [pc, #92]	; (800dce8 <xTaskIncrementTick+0x168>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc90:	4914      	ldr	r1, [pc, #80]	; (800dce4 <xTaskIncrementTick+0x164>)
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	440b      	add	r3, r1
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d907      	bls.n	800dcb2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800dca2:	2301      	movs	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
 800dca6:	e004      	b.n	800dcb2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dca8:	4b10      	ldr	r3, [pc, #64]	; (800dcec <xTaskIncrementTick+0x16c>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3301      	adds	r3, #1
 800dcae:	4a0f      	ldr	r2, [pc, #60]	; (800dcec <xTaskIncrementTick+0x16c>)
 800dcb0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dcb2:	4b0f      	ldr	r3, [pc, #60]	; (800dcf0 <xTaskIncrementTick+0x170>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dcbe:	697b      	ldr	r3, [r7, #20]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	200016a4 	.word	0x200016a4
 800dccc:	20001680 	.word	0x20001680
 800dcd0:	20001634 	.word	0x20001634
 800dcd4:	20001638 	.word	0x20001638
 800dcd8:	20001694 	.word	0x20001694
 800dcdc:	2000169c 	.word	0x2000169c
 800dce0:	20001684 	.word	0x20001684
 800dce4:	20001580 	.word	0x20001580
 800dce8:	2000157c 	.word	0x2000157c
 800dcec:	2000168c 	.word	0x2000168c
 800dcf0:	20001690 	.word	0x20001690

0800dcf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcfa:	4b3a      	ldr	r3, [pc, #232]	; (800dde4 <vTaskSwitchContext+0xf0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd02:	4b39      	ldr	r3, [pc, #228]	; (800dde8 <vTaskSwitchContext+0xf4>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd08:	e068      	b.n	800dddc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800dd0a:	4b37      	ldr	r3, [pc, #220]	; (800dde8 <vTaskSwitchContext+0xf4>)
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dd10:	4b36      	ldr	r3, [pc, #216]	; (800ddec <vTaskSwitchContext+0xf8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dd1c:	61bb      	str	r3, [r7, #24]
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	69ba      	ldr	r2, [r7, #24]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d111      	bne.n	800dd4c <vTaskSwitchContext+0x58>
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	69ba      	ldr	r2, [r7, #24]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d10b      	bne.n	800dd4c <vTaskSwitchContext+0x58>
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	3308      	adds	r3, #8
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	69ba      	ldr	r2, [r7, #24]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d105      	bne.n	800dd4c <vTaskSwitchContext+0x58>
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	330c      	adds	r3, #12
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	69ba      	ldr	r2, [r7, #24]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d008      	beq.n	800dd5e <vTaskSwitchContext+0x6a>
 800dd4c:	4b27      	ldr	r3, [pc, #156]	; (800ddec <vTaskSwitchContext+0xf8>)
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	4b26      	ldr	r3, [pc, #152]	; (800ddec <vTaskSwitchContext+0xf8>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3334      	adds	r3, #52	; 0x34
 800dd56:	4619      	mov	r1, r3
 800dd58:	4610      	mov	r0, r2
 800dd5a:	f7f3 f8e4 	bl	8000f26 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <vTaskSwitchContext+0xfc>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	fab3 f383 	clz	r3, r3
 800dd6a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd6c:	7afb      	ldrb	r3, [r7, #11]
 800dd6e:	f1c3 031f 	rsb	r3, r3, #31
 800dd72:	617b      	str	r3, [r7, #20]
 800dd74:	491f      	ldr	r1, [pc, #124]	; (800ddf4 <vTaskSwitchContext+0x100>)
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	440b      	add	r3, r1
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10c      	bne.n	800dda2 <vTaskSwitchContext+0xae>
	__asm volatile
 800dd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8c:	b672      	cpsid	i
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	b662      	cpsie	i
 800dd9c:	607b      	str	r3, [r7, #4]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <vTaskSwitchContext+0xac>
 800dda2:	697a      	ldr	r2, [r7, #20]
 800dda4:	4613      	mov	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4413      	add	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4a11      	ldr	r2, [pc, #68]	; (800ddf4 <vTaskSwitchContext+0x100>)
 800ddae:	4413      	add	r3, r2
 800ddb0:	613b      	str	r3, [r7, #16]
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	605a      	str	r2, [r3, #4]
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	3308      	adds	r3, #8
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d104      	bne.n	800ddd2 <vTaskSwitchContext+0xde>
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	685a      	ldr	r2, [r3, #4]
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	605a      	str	r2, [r3, #4]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	4a04      	ldr	r2, [pc, #16]	; (800ddec <vTaskSwitchContext+0xf8>)
 800ddda:	6013      	str	r3, [r2, #0]
}
 800dddc:	bf00      	nop
 800ddde:	3720      	adds	r7, #32
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	200016a4 	.word	0x200016a4
 800dde8:	20001690 	.word	0x20001690
 800ddec:	2000157c 	.word	0x2000157c
 800ddf0:	20001684 	.word	0x20001684
 800ddf4:	20001580 	.word	0x20001580

0800ddf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de00:	f000 f854 	bl	800deac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de04:	4b07      	ldr	r3, [pc, #28]	; (800de24 <prvIdleTask+0x2c>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d907      	bls.n	800de1c <prvIdleTask+0x24>
			{
				taskYIELD();
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <prvIdleTask+0x30>)
 800de0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de1c:	f7f3 f87c 	bl	8000f18 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800de20:	e7ee      	b.n	800de00 <prvIdleTask+0x8>
 800de22:	bf00      	nop
 800de24:	20001580 	.word	0x20001580
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de32:	2300      	movs	r3, #0
 800de34:	607b      	str	r3, [r7, #4]
 800de36:	e00c      	b.n	800de52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	4613      	mov	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4a12      	ldr	r2, [pc, #72]	; (800de8c <prvInitialiseTaskLists+0x60>)
 800de44:	4413      	add	r3, r2
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff faf9 	bl	800d43e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3301      	adds	r3, #1
 800de50:	607b      	str	r3, [r7, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b06      	cmp	r3, #6
 800de56:	d9ef      	bls.n	800de38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de58:	480d      	ldr	r0, [pc, #52]	; (800de90 <prvInitialiseTaskLists+0x64>)
 800de5a:	f7ff faf0 	bl	800d43e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de5e:	480d      	ldr	r0, [pc, #52]	; (800de94 <prvInitialiseTaskLists+0x68>)
 800de60:	f7ff faed 	bl	800d43e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de64:	480c      	ldr	r0, [pc, #48]	; (800de98 <prvInitialiseTaskLists+0x6c>)
 800de66:	f7ff faea 	bl	800d43e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de6a:	480c      	ldr	r0, [pc, #48]	; (800de9c <prvInitialiseTaskLists+0x70>)
 800de6c:	f7ff fae7 	bl	800d43e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de70:	480b      	ldr	r0, [pc, #44]	; (800dea0 <prvInitialiseTaskLists+0x74>)
 800de72:	f7ff fae4 	bl	800d43e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de76:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <prvInitialiseTaskLists+0x78>)
 800de78:	4a05      	ldr	r2, [pc, #20]	; (800de90 <prvInitialiseTaskLists+0x64>)
 800de7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de7c:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <prvInitialiseTaskLists+0x7c>)
 800de7e:	4a05      	ldr	r2, [pc, #20]	; (800de94 <prvInitialiseTaskLists+0x68>)
 800de80:	601a      	str	r2, [r3, #0]
}
 800de82:	bf00      	nop
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20001580 	.word	0x20001580
 800de90:	2000160c 	.word	0x2000160c
 800de94:	20001620 	.word	0x20001620
 800de98:	2000163c 	.word	0x2000163c
 800de9c:	20001650 	.word	0x20001650
 800dea0:	20001668 	.word	0x20001668
 800dea4:	20001634 	.word	0x20001634
 800dea8:	20001638 	.word	0x20001638

0800deac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800deb2:	e019      	b.n	800dee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800deb4:	f000 f9ea 	bl	800e28c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb8:	4b10      	ldr	r3, [pc, #64]	; (800defc <prvCheckTasksWaitingTermination+0x50>)
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3304      	adds	r3, #4
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7ff fb44 	bl	800d552 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800deca:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <prvCheckTasksWaitingTermination+0x54>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	3b01      	subs	r3, #1
 800ded0:	4a0b      	ldr	r2, [pc, #44]	; (800df00 <prvCheckTasksWaitingTermination+0x54>)
 800ded2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ded4:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <prvCheckTasksWaitingTermination+0x58>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3b01      	subs	r3, #1
 800deda:	4a0a      	ldr	r2, [pc, #40]	; (800df04 <prvCheckTasksWaitingTermination+0x58>)
 800dedc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dede:	f000 fa09 	bl	800e2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 f810 	bl	800df08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dee8:	4b06      	ldr	r3, [pc, #24]	; (800df04 <prvCheckTasksWaitingTermination+0x58>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1e1      	bne.n	800deb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800def0:	bf00      	nop
 800def2:	bf00      	nop
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20001650 	.word	0x20001650
 800df00:	2000167c 	.word	0x2000167c
 800df04:	20001664 	.word	0x20001664

0800df08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df16:	2b00      	cmp	r3, #0
 800df18:	d108      	bne.n	800df2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 fb6c 	bl	800e5fc <vPortFree>
				vPortFree( pxTCB );
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fb69 	bl	800e5fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df2a:	e01a      	b.n	800df62 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df32:	2b01      	cmp	r3, #1
 800df34:	d103      	bne.n	800df3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fb60 	bl	800e5fc <vPortFree>
	}
 800df3c:	e011      	b.n	800df62 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df44:	2b02      	cmp	r3, #2
 800df46:	d00c      	beq.n	800df62 <prvDeleteTCB+0x5a>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	b672      	cpsid	i
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	b662      	cpsie	i
 800df5c:	60fb      	str	r3, [r7, #12]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <prvDeleteTCB+0x58>
	}
 800df62:	bf00      	nop
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df72:	4b0c      	ldr	r3, [pc, #48]	; (800dfa4 <prvResetNextTaskUnblockTime+0x38>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d104      	bne.n	800df86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df7c:	4b0a      	ldr	r3, [pc, #40]	; (800dfa8 <prvResetNextTaskUnblockTime+0x3c>)
 800df7e:	f04f 32ff 	mov.w	r2, #4294967295
 800df82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df84:	e008      	b.n	800df98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df86:	4b07      	ldr	r3, [pc, #28]	; (800dfa4 <prvResetNextTaskUnblockTime+0x38>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	4a04      	ldr	r2, [pc, #16]	; (800dfa8 <prvResetNextTaskUnblockTime+0x3c>)
 800df96:	6013      	str	r3, [r2, #0]
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	20001634 	.word	0x20001634
 800dfa8:	2000169c 	.word	0x2000169c

0800dfac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfb6:	4b29      	ldr	r3, [pc, #164]	; (800e05c <prvAddCurrentTaskToDelayedList+0xb0>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfbc:	4b28      	ldr	r3, [pc, #160]	; (800e060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fac5 	bl	800d552 <uxListRemove>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10b      	bne.n	800dfe6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dfce:	4b24      	ldr	r3, [pc, #144]	; (800e060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfda:	43da      	mvns	r2, r3
 800dfdc:	4b21      	ldr	r3, [pc, #132]	; (800e064 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	4a20      	ldr	r2, [pc, #128]	; (800e064 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfe4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfec:	d10a      	bne.n	800e004 <prvAddCurrentTaskToDelayedList+0x58>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d007      	beq.n	800e004 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dff4:	4b1a      	ldr	r3, [pc, #104]	; (800e060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3304      	adds	r3, #4
 800dffa:	4619      	mov	r1, r3
 800dffc:	481a      	ldr	r0, [pc, #104]	; (800e068 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dffe:	f7ff fa4b 	bl	800d498 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e002:	e026      	b.n	800e052 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4413      	add	r3, r2
 800e00a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e00c:	4b14      	ldr	r3, [pc, #80]	; (800e060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d209      	bcs.n	800e030 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e01c:	4b13      	ldr	r3, [pc, #76]	; (800e06c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	4b0f      	ldr	r3, [pc, #60]	; (800e060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3304      	adds	r3, #4
 800e026:	4619      	mov	r1, r3
 800e028:	4610      	mov	r0, r2
 800e02a:	f7ff fa59 	bl	800d4e0 <vListInsert>
}
 800e02e:	e010      	b.n	800e052 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e030:	4b0f      	ldr	r3, [pc, #60]	; (800e070 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3304      	adds	r3, #4
 800e03a:	4619      	mov	r1, r3
 800e03c:	4610      	mov	r0, r2
 800e03e:	f7ff fa4f 	bl	800d4e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e042:	4b0c      	ldr	r3, [pc, #48]	; (800e074 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d202      	bcs.n	800e052 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e04c:	4a09      	ldr	r2, [pc, #36]	; (800e074 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	6013      	str	r3, [r2, #0]
}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20001680 	.word	0x20001680
 800e060:	2000157c 	.word	0x2000157c
 800e064:	20001684 	.word	0x20001684
 800e068:	20001668 	.word	0x20001668
 800e06c:	20001638 	.word	0x20001638
 800e070:	20001634 	.word	0x20001634
 800e074:	2000169c 	.word	0x2000169c

0800e078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e078:	b480      	push	{r7}
 800e07a:	b085      	sub	sp, #20
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3b04      	subs	r3, #4
 800e088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3b04      	subs	r3, #4
 800e096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f023 0201 	bic.w	r2, r3, #1
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3b04      	subs	r3, #4
 800e0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e0a8:	4a0c      	ldr	r2, [pc, #48]	; (800e0dc <pxPortInitialiseStack+0x64>)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3b14      	subs	r3, #20
 800e0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	3b04      	subs	r3, #4
 800e0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f06f 0202 	mvn.w	r2, #2
 800e0c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3b20      	subs	r3, #32
 800e0cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr
 800e0dc:	0800e0e1 	.word	0x0800e0e1

0800e0e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0ea:	4b14      	ldr	r3, [pc, #80]	; (800e13c <prvTaskExitError+0x5c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f2:	d00c      	beq.n	800e10e <prvTaskExitError+0x2e>
	__asm volatile
 800e0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f8:	b672      	cpsid	i
 800e0fa:	f383 8811 	msr	BASEPRI, r3
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	b662      	cpsie	i
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <prvTaskExitError+0x2c>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	b672      	cpsid	i
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	b662      	cpsie	i
 800e122:	60bb      	str	r3, [r7, #8]
}
 800e124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e126:	bf00      	nop
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d0fc      	beq.n	800e128 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e12e:	bf00      	nop
 800e130:	bf00      	nop
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	2000000c 	.word	0x2000000c

0800e140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e140:	4b07      	ldr	r3, [pc, #28]	; (800e160 <pxCurrentTCBConst2>)
 800e142:	6819      	ldr	r1, [r3, #0]
 800e144:	6808      	ldr	r0, [r1, #0]
 800e146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14a:	f380 8809 	msr	PSP, r0
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f04f 0000 	mov.w	r0, #0
 800e156:	f380 8811 	msr	BASEPRI, r0
 800e15a:	4770      	bx	lr
 800e15c:	f3af 8000 	nop.w

0800e160 <pxCurrentTCBConst2>:
 800e160:	2000157c 	.word	0x2000157c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e164:	bf00      	nop
 800e166:	bf00      	nop

0800e168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e168:	4808      	ldr	r0, [pc, #32]	; (800e18c <prvPortStartFirstTask+0x24>)
 800e16a:	6800      	ldr	r0, [r0, #0]
 800e16c:	6800      	ldr	r0, [r0, #0]
 800e16e:	f380 8808 	msr	MSP, r0
 800e172:	f04f 0000 	mov.w	r0, #0
 800e176:	f380 8814 	msr	CONTROL, r0
 800e17a:	b662      	cpsie	i
 800e17c:	b661      	cpsie	f
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	df00      	svc	0
 800e188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e18a:	bf00      	nop
 800e18c:	e000ed08 	.word	0xe000ed08

0800e190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e196:	4b37      	ldr	r3, [pc, #220]	; (800e274 <xPortStartScheduler+0xe4>)
 800e198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	22ff      	movs	r2, #255	; 0xff
 800e1a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	4b2f      	ldr	r3, [pc, #188]	; (800e278 <xPortStartScheduler+0xe8>)
 800e1bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1be:	4b2f      	ldr	r3, [pc, #188]	; (800e27c <xPortStartScheduler+0xec>)
 800e1c0:	2207      	movs	r2, #7
 800e1c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1c4:	e009      	b.n	800e1da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e1c6:	4b2d      	ldr	r3, [pc, #180]	; (800e27c <xPortStartScheduler+0xec>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	4a2b      	ldr	r2, [pc, #172]	; (800e27c <xPortStartScheduler+0xec>)
 800e1ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1da:	78fb      	ldrb	r3, [r7, #3]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1e2:	2b80      	cmp	r3, #128	; 0x80
 800e1e4:	d0ef      	beq.n	800e1c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1e6:	4b25      	ldr	r3, [pc, #148]	; (800e27c <xPortStartScheduler+0xec>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f1c3 0307 	rsb	r3, r3, #7
 800e1ee:	2b04      	cmp	r3, #4
 800e1f0:	d00c      	beq.n	800e20c <xPortStartScheduler+0x7c>
	__asm volatile
 800e1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f6:	b672      	cpsid	i
 800e1f8:	f383 8811 	msr	BASEPRI, r3
 800e1fc:	f3bf 8f6f 	isb	sy
 800e200:	f3bf 8f4f 	dsb	sy
 800e204:	b662      	cpsie	i
 800e206:	60bb      	str	r3, [r7, #8]
}
 800e208:	bf00      	nop
 800e20a:	e7fe      	b.n	800e20a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e20c:	4b1b      	ldr	r3, [pc, #108]	; (800e27c <xPortStartScheduler+0xec>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	021b      	lsls	r3, r3, #8
 800e212:	4a1a      	ldr	r2, [pc, #104]	; (800e27c <xPortStartScheduler+0xec>)
 800e214:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e216:	4b19      	ldr	r3, [pc, #100]	; (800e27c <xPortStartScheduler+0xec>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e21e:	4a17      	ldr	r2, [pc, #92]	; (800e27c <xPortStartScheduler+0xec>)
 800e220:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	b2da      	uxtb	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e22a:	4b15      	ldr	r3, [pc, #84]	; (800e280 <xPortStartScheduler+0xf0>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a14      	ldr	r2, [pc, #80]	; (800e280 <xPortStartScheduler+0xf0>)
 800e230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e234:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e236:	4b12      	ldr	r3, [pc, #72]	; (800e280 <xPortStartScheduler+0xf0>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a11      	ldr	r2, [pc, #68]	; (800e280 <xPortStartScheduler+0xf0>)
 800e23c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e240:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e242:	f000 f8dd 	bl	800e400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e246:	4b0f      	ldr	r3, [pc, #60]	; (800e284 <xPortStartScheduler+0xf4>)
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e24c:	f000 f8fc 	bl	800e448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e250:	4b0d      	ldr	r3, [pc, #52]	; (800e288 <xPortStartScheduler+0xf8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a0c      	ldr	r2, [pc, #48]	; (800e288 <xPortStartScheduler+0xf8>)
 800e256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e25a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e25c:	f7ff ff84 	bl	800e168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e260:	f7ff fd48 	bl	800dcf4 <vTaskSwitchContext>
	prvTaskExitError();
 800e264:	f7ff ff3c 	bl	800e0e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	e000e400 	.word	0xe000e400
 800e278:	200016a8 	.word	0x200016a8
 800e27c:	200016ac 	.word	0x200016ac
 800e280:	e000ed20 	.word	0xe000ed20
 800e284:	2000000c 	.word	0x2000000c
 800e288:	e000ef34 	.word	0xe000ef34

0800e28c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	607b      	str	r3, [r7, #4]
}
 800e2a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2aa:	4b10      	ldr	r3, [pc, #64]	; (800e2ec <vPortEnterCritical+0x60>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	4a0e      	ldr	r2, [pc, #56]	; (800e2ec <vPortEnterCritical+0x60>)
 800e2b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2b4:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <vPortEnterCritical+0x60>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d111      	bne.n	800e2e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2bc:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <vPortEnterCritical+0x64>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00c      	beq.n	800e2e0 <vPortEnterCritical+0x54>
	__asm volatile
 800e2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ca:	b672      	cpsid	i
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	b662      	cpsie	i
 800e2da:	603b      	str	r3, [r7, #0]
}
 800e2dc:	bf00      	nop
 800e2de:	e7fe      	b.n	800e2de <vPortEnterCritical+0x52>
	}
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	2000000c 	.word	0x2000000c
 800e2f0:	e000ed04 	.word	0xe000ed04

0800e2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2fa:	4b13      	ldr	r3, [pc, #76]	; (800e348 <vPortExitCritical+0x54>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10c      	bne.n	800e31c <vPortExitCritical+0x28>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	607b      	str	r3, [r7, #4]
}
 800e318:	bf00      	nop
 800e31a:	e7fe      	b.n	800e31a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <vPortExitCritical+0x54>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	3b01      	subs	r3, #1
 800e322:	4a09      	ldr	r2, [pc, #36]	; (800e348 <vPortExitCritical+0x54>)
 800e324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e326:	4b08      	ldr	r3, [pc, #32]	; (800e348 <vPortExitCritical+0x54>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d105      	bne.n	800e33a <vPortExitCritical+0x46>
 800e32e:	2300      	movs	r3, #0
 800e330:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e33a:	bf00      	nop
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	2000000c 	.word	0x2000000c
 800e34c:	00000000 	.word	0x00000000

0800e350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e350:	f3ef 8009 	mrs	r0, PSP
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	4b15      	ldr	r3, [pc, #84]	; (800e3b0 <pxCurrentTCBConst>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	f01e 0f10 	tst.w	lr, #16
 800e360:	bf08      	it	eq
 800e362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36a:	6010      	str	r0, [r2, #0]
 800e36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e374:	b672      	cpsid	i
 800e376:	f380 8811 	msr	BASEPRI, r0
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	f3bf 8f6f 	isb	sy
 800e382:	b662      	cpsie	i
 800e384:	f7ff fcb6 	bl	800dcf4 <vTaskSwitchContext>
 800e388:	f04f 0000 	mov.w	r0, #0
 800e38c:	f380 8811 	msr	BASEPRI, r0
 800e390:	bc09      	pop	{r0, r3}
 800e392:	6819      	ldr	r1, [r3, #0]
 800e394:	6808      	ldr	r0, [r1, #0]
 800e396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39a:	f01e 0f10 	tst.w	lr, #16
 800e39e:	bf08      	it	eq
 800e3a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3a4:	f380 8809 	msr	PSP, r0
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop

0800e3b0 <pxCurrentTCBConst>:
 800e3b0:	2000157c 	.word	0x2000157c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop

0800e3b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	b672      	cpsid	i
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	b662      	cpsie	i
 800e3d2:	607b      	str	r3, [r7, #4]
}
 800e3d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3d6:	f7ff fbd3 	bl	800db80 <xTaskIncrementTick>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3e0:	4b06      	ldr	r3, [pc, #24]	; (800e3fc <SysTick_Handler+0x44>)
 800e3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	f383 8811 	msr	BASEPRI, r3
}
 800e3f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3f4:	bf00      	nop
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	e000ed04 	.word	0xe000ed04

0800e400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e400:	b480      	push	{r7}
 800e402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e404:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <vPortSetupTimerInterrupt+0x34>)
 800e406:	2200      	movs	r2, #0
 800e408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e40a:	4b0b      	ldr	r3, [pc, #44]	; (800e438 <vPortSetupTimerInterrupt+0x38>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e410:	4b0a      	ldr	r3, [pc, #40]	; (800e43c <vPortSetupTimerInterrupt+0x3c>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a0a      	ldr	r2, [pc, #40]	; (800e440 <vPortSetupTimerInterrupt+0x40>)
 800e416:	fba2 2303 	umull	r2, r3, r2, r3
 800e41a:	099b      	lsrs	r3, r3, #6
 800e41c:	4a09      	ldr	r2, [pc, #36]	; (800e444 <vPortSetupTimerInterrupt+0x44>)
 800e41e:	3b01      	subs	r3, #1
 800e420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e422:	4b04      	ldr	r3, [pc, #16]	; (800e434 <vPortSetupTimerInterrupt+0x34>)
 800e424:	2207      	movs	r2, #7
 800e426:	601a      	str	r2, [r3, #0]
}
 800e428:	bf00      	nop
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	e000e010 	.word	0xe000e010
 800e438:	e000e018 	.word	0xe000e018
 800e43c:	20000000 	.word	0x20000000
 800e440:	10624dd3 	.word	0x10624dd3
 800e444:	e000e014 	.word	0xe000e014

0800e448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e458 <vPortEnableVFP+0x10>
 800e44c:	6801      	ldr	r1, [r0, #0]
 800e44e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e452:	6001      	str	r1, [r0, #0]
 800e454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e456:	bf00      	nop
 800e458:	e000ed88 	.word	0xe000ed88

0800e45c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08a      	sub	sp, #40	; 0x28
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e464:	2300      	movs	r3, #0
 800e466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e468:	f7ff fade 	bl	800da28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e46c:	4b5e      	ldr	r3, [pc, #376]	; (800e5e8 <pvPortMalloc+0x18c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e474:	f000 f920 	bl	800e6b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e478:	4b5c      	ldr	r3, [pc, #368]	; (800e5ec <pvPortMalloc+0x190>)
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4013      	ands	r3, r2
 800e480:	2b00      	cmp	r3, #0
 800e482:	f040 8092 	bne.w	800e5aa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d01f      	beq.n	800e4cc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e48c:	2208      	movs	r2, #8
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	4413      	add	r3, r2
 800e492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d016      	beq.n	800e4cc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f023 0307 	bic.w	r3, r3, #7
 800e4a4:	3308      	adds	r3, #8
 800e4a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f003 0307 	and.w	r3, r3, #7
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00c      	beq.n	800e4cc <pvPortMalloc+0x70>
	__asm volatile
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	b672      	cpsid	i
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	b662      	cpsie	i
 800e4c6:	617b      	str	r3, [r7, #20]
}
 800e4c8:	bf00      	nop
 800e4ca:	e7fe      	b.n	800e4ca <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d06b      	beq.n	800e5aa <pvPortMalloc+0x14e>
 800e4d2:	4b47      	ldr	r3, [pc, #284]	; (800e5f0 <pvPortMalloc+0x194>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d866      	bhi.n	800e5aa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4dc:	4b45      	ldr	r3, [pc, #276]	; (800e5f4 <pvPortMalloc+0x198>)
 800e4de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4e0:	4b44      	ldr	r3, [pc, #272]	; (800e5f4 <pvPortMalloc+0x198>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4e6:	e004      	b.n	800e4f2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d903      	bls.n	800e504 <pvPortMalloc+0xa8>
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1f1      	bne.n	800e4e8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e504:	4b38      	ldr	r3, [pc, #224]	; (800e5e8 <pvPortMalloc+0x18c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d04d      	beq.n	800e5aa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e50e:	6a3b      	ldr	r3, [r7, #32]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2208      	movs	r2, #8
 800e514:	4413      	add	r3, r2
 800e516:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	685a      	ldr	r2, [r3, #4]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	1ad2      	subs	r2, r2, r3
 800e528:	2308      	movs	r3, #8
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d921      	bls.n	800e574 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4413      	add	r3, r2
 800e536:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	f003 0307 	and.w	r3, r3, #7
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00c      	beq.n	800e55c <pvPortMalloc+0x100>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	b672      	cpsid	i
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	b662      	cpsie	i
 800e556:	613b      	str	r3, [r7, #16]
}
 800e558:	bf00      	nop
 800e55a:	e7fe      	b.n	800e55a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	685a      	ldr	r2, [r3, #4]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	1ad2      	subs	r2, r2, r3
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e56e:	69b8      	ldr	r0, [r7, #24]
 800e570:	f000 f904 	bl	800e77c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e574:	4b1e      	ldr	r3, [pc, #120]	; (800e5f0 <pvPortMalloc+0x194>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	4a1c      	ldr	r2, [pc, #112]	; (800e5f0 <pvPortMalloc+0x194>)
 800e580:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e582:	4b1b      	ldr	r3, [pc, #108]	; (800e5f0 <pvPortMalloc+0x194>)
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	4b1c      	ldr	r3, [pc, #112]	; (800e5f8 <pvPortMalloc+0x19c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d203      	bcs.n	800e596 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e58e:	4b18      	ldr	r3, [pc, #96]	; (800e5f0 <pvPortMalloc+0x194>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a19      	ldr	r2, [pc, #100]	; (800e5f8 <pvPortMalloc+0x19c>)
 800e594:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	4b14      	ldr	r3, [pc, #80]	; (800e5ec <pvPortMalloc+0x190>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	431a      	orrs	r2, r3
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5aa:	f7ff fa4b 	bl	800da44 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d101      	bne.n	800e5b8 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e5b4:	f7f2 fcc2 	bl	8000f3c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	f003 0307 	and.w	r3, r3, #7
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00c      	beq.n	800e5dc <pvPortMalloc+0x180>
	__asm volatile
 800e5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c6:	b672      	cpsid	i
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	b662      	cpsie	i
 800e5d6:	60fb      	str	r3, [r7, #12]
}
 800e5d8:	bf00      	nop
 800e5da:	e7fe      	b.n	800e5da <pvPortMalloc+0x17e>
	return pvReturn;
 800e5dc:	69fb      	ldr	r3, [r7, #28]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3728      	adds	r7, #40	; 0x28
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200096b8 	.word	0x200096b8
 800e5ec:	200096c4 	.word	0x200096c4
 800e5f0:	200096bc 	.word	0x200096bc
 800e5f4:	200096b0 	.word	0x200096b0
 800e5f8:	200096c0 	.word	0x200096c0

0800e5fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d04c      	beq.n	800e6a8 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e60e:	2308      	movs	r3, #8
 800e610:	425b      	negs	r3, r3
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	4413      	add	r3, r2
 800e616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	4b23      	ldr	r3, [pc, #140]	; (800e6b0 <vPortFree+0xb4>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4013      	ands	r3, r2
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10c      	bne.n	800e644 <vPortFree+0x48>
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	b672      	cpsid	i
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	b662      	cpsie	i
 800e63e:	60fb      	str	r3, [r7, #12]
}
 800e640:	bf00      	nop
 800e642:	e7fe      	b.n	800e642 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00c      	beq.n	800e666 <vPortFree+0x6a>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	b672      	cpsid	i
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	b662      	cpsie	i
 800e660:	60bb      	str	r3, [r7, #8]
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	685a      	ldr	r2, [r3, #4]
 800e66a:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <vPortFree+0xb4>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4013      	ands	r3, r2
 800e670:	2b00      	cmp	r3, #0
 800e672:	d019      	beq.n	800e6a8 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d115      	bne.n	800e6a8 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	685a      	ldr	r2, [r3, #4]
 800e680:	4b0b      	ldr	r3, [pc, #44]	; (800e6b0 <vPortFree+0xb4>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	43db      	mvns	r3, r3
 800e686:	401a      	ands	r2, r3
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e68c:	f7ff f9cc 	bl	800da28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <vPortFree+0xb8>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4413      	add	r3, r2
 800e69a:	4a06      	ldr	r2, [pc, #24]	; (800e6b4 <vPortFree+0xb8>)
 800e69c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e69e:	6938      	ldr	r0, [r7, #16]
 800e6a0:	f000 f86c 	bl	800e77c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e6a4:	f7ff f9ce 	bl	800da44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6a8:	bf00      	nop
 800e6aa:	3718      	adds	r7, #24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	200096c4 	.word	0x200096c4
 800e6b4:	200096bc 	.word	0x200096bc

0800e6b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6c4:	4b27      	ldr	r3, [pc, #156]	; (800e764 <prvHeapInit+0xac>)
 800e6c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f003 0307 	and.w	r3, r3, #7
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00c      	beq.n	800e6ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3307      	adds	r3, #7
 800e6d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f023 0307 	bic.w	r3, r3, #7
 800e6de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	4a1f      	ldr	r2, [pc, #124]	; (800e764 <prvHeapInit+0xac>)
 800e6e8:	4413      	add	r3, r2
 800e6ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6f0:	4a1d      	ldr	r2, [pc, #116]	; (800e768 <prvHeapInit+0xb0>)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6f6:	4b1c      	ldr	r3, [pc, #112]	; (800e768 <prvHeapInit+0xb0>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	4413      	add	r3, r2
 800e702:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e704:	2208      	movs	r2, #8
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	1a9b      	subs	r3, r3, r2
 800e70a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f023 0307 	bic.w	r3, r3, #7
 800e712:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4a15      	ldr	r2, [pc, #84]	; (800e76c <prvHeapInit+0xb4>)
 800e718:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e71a:	4b14      	ldr	r3, [pc, #80]	; (800e76c <prvHeapInit+0xb4>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2200      	movs	r2, #0
 800e720:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e722:	4b12      	ldr	r3, [pc, #72]	; (800e76c <prvHeapInit+0xb4>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	1ad2      	subs	r2, r2, r3
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e738:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <prvHeapInit+0xb4>)
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	4a0a      	ldr	r2, [pc, #40]	; (800e770 <prvHeapInit+0xb8>)
 800e746:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	4a09      	ldr	r2, [pc, #36]	; (800e774 <prvHeapInit+0xbc>)
 800e74e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e750:	4b09      	ldr	r3, [pc, #36]	; (800e778 <prvHeapInit+0xc0>)
 800e752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e756:	601a      	str	r2, [r3, #0]
}
 800e758:	bf00      	nop
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	200016b0 	.word	0x200016b0
 800e768:	200096b0 	.word	0x200096b0
 800e76c:	200096b8 	.word	0x200096b8
 800e770:	200096c0 	.word	0x200096c0
 800e774:	200096bc 	.word	0x200096bc
 800e778:	200096c4 	.word	0x200096c4

0800e77c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e784:	4b28      	ldr	r3, [pc, #160]	; (800e828 <prvInsertBlockIntoFreeList+0xac>)
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	e002      	b.n	800e790 <prvInsertBlockIntoFreeList+0x14>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	60fb      	str	r3, [r7, #12]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	429a      	cmp	r2, r3
 800e798:	d8f7      	bhi.n	800e78a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d108      	bne.n	800e7be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	441a      	add	r2, r3
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	441a      	add	r2, r3
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d118      	bne.n	800e804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	4b15      	ldr	r3, [pc, #84]	; (800e82c <prvInsertBlockIntoFreeList+0xb0>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d00d      	beq.n	800e7fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	685a      	ldr	r2, [r3, #4]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	441a      	add	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	e008      	b.n	800e80c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7fa:	4b0c      	ldr	r3, [pc, #48]	; (800e82c <prvInsertBlockIntoFreeList+0xb0>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	601a      	str	r2, [r3, #0]
 800e802:	e003      	b.n	800e80c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	429a      	cmp	r2, r3
 800e812:	d002      	beq.n	800e81a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e81a:	bf00      	nop
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	200096b0 	.word	0x200096b0
 800e82c:	200096b8 	.word	0x200096b8

0800e830 <__libc_init_array>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	4d0d      	ldr	r5, [pc, #52]	; (800e868 <__libc_init_array+0x38>)
 800e834:	4c0d      	ldr	r4, [pc, #52]	; (800e86c <__libc_init_array+0x3c>)
 800e836:	1b64      	subs	r4, r4, r5
 800e838:	10a4      	asrs	r4, r4, #2
 800e83a:	2600      	movs	r6, #0
 800e83c:	42a6      	cmp	r6, r4
 800e83e:	d109      	bne.n	800e854 <__libc_init_array+0x24>
 800e840:	4d0b      	ldr	r5, [pc, #44]	; (800e870 <__libc_init_array+0x40>)
 800e842:	4c0c      	ldr	r4, [pc, #48]	; (800e874 <__libc_init_array+0x44>)
 800e844:	f000 f820 	bl	800e888 <_init>
 800e848:	1b64      	subs	r4, r4, r5
 800e84a:	10a4      	asrs	r4, r4, #2
 800e84c:	2600      	movs	r6, #0
 800e84e:	42a6      	cmp	r6, r4
 800e850:	d105      	bne.n	800e85e <__libc_init_array+0x2e>
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	f855 3b04 	ldr.w	r3, [r5], #4
 800e858:	4798      	blx	r3
 800e85a:	3601      	adds	r6, #1
 800e85c:	e7ee      	b.n	800e83c <__libc_init_array+0xc>
 800e85e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e862:	4798      	blx	r3
 800e864:	3601      	adds	r6, #1
 800e866:	e7f2      	b.n	800e84e <__libc_init_array+0x1e>
 800e868:	0800e8f0 	.word	0x0800e8f0
 800e86c:	0800e8f0 	.word	0x0800e8f0
 800e870:	0800e8f0 	.word	0x0800e8f0
 800e874:	0800e8f4 	.word	0x0800e8f4

0800e878 <memset>:
 800e878:	4402      	add	r2, r0
 800e87a:	4603      	mov	r3, r0
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d100      	bne.n	800e882 <memset+0xa>
 800e880:	4770      	bx	lr
 800e882:	f803 1b01 	strb.w	r1, [r3], #1
 800e886:	e7f9      	b.n	800e87c <memset+0x4>

0800e888 <_init>:
 800e888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88a:	bf00      	nop
 800e88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e88e:	bc08      	pop	{r3}
 800e890:	469e      	mov	lr, r3
 800e892:	4770      	bx	lr

0800e894 <_fini>:
 800e894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e896:	bf00      	nop
 800e898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e89a:	bc08      	pop	{r3}
 800e89c:	469e      	mov	lr, r3
 800e89e:	4770      	bx	lr
